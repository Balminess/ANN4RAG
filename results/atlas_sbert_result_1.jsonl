{"label": "org . junit . Assert . assertArrayEquals ( new java . lang . Object [ ] { \"css1\" , \"cssandjs1\" , \"js1\" } , categories )", "actual": " org.junit.Assert.assertArrayEquals(new String[]{\"css1\", \"js1\"}, categories);", "idx": 0}
{"label": "org . junit . Assert . assertEquals ( 0 , users . size ( ) )", "actual": " org.junit.Assert.assertEquals(0, users.size());", "idx": 1}
{"label": "org . junit . Assert . assertNotNull ( log . getCreator ( ) )", "actual": " org.junit.Assert.assertNull(log.getCreator());", "idx": 2}
{"label": "org . junit . Assert . assertEquals ( 100 , this . testee . getMutationCoverage ( ) )", "actual": " org.junit.Assert.assertEquals(100, this.testee.getMutationCoverage());", "idx": 3}
{"label": "org . junit . Assert . assertTrue ( ( ex instanceof org . apache . kerby . kerberos . kerb . KrbException ) )", "actual": " org.junit.Assert.assertThrows(IllegalArgumentException.class, () -> performTest());", "idx": 4}
{"label": "org . junit . Assert . assertEquals ( true , classUnderTest . successStatusIs200 ( ) )", "actual": " The method `successStatusIs200` in the class `ServiceEnabledCommand_TESTING` returns `true` if the status code of the response is 200.\n\nThe unit test `defaultSuccessStatusIs200ForGET` creates an instance of `ServiceEnabledCommand_TESTING` with the `HttpMethod` set to `GET`. It then calls the `successStatusIs200` method and asserts that the result is `true`.\n\nThe assertion is generated using the `org.junit.Assert.assertEquals` method, which checks that the actual result of the `successStatusIs200` method is equal to the expected result of `true`.", "idx": 5}
{"label": "org . junit . Assert . assertEquals ( 1 , dao . create ( foo ) )", "actual": " org.junit.Assert.assertEquals(sqlVal, dao.create(foo).getOurEnum().ordinal());", "idx": 6}
{"label": "org . junit . Assert . assertThat ( shapes . size ( ) , org . hamcrest . CoreMatchers . is ( 2 ) )", "actual": " org.junit.Assert.assertEquals(shapes.size(), 1);", "idx": 7}
{"label": "org . junit . Assert . assertEquals ( bguid , guid )", "actual": " org.junit.Assert.assertEquals(guid, bguid);", "idx": 8}
{"label": "org . junit . Assert . assertNull ( doc . getImages ( ) )", "actual": " org.junit.Assert.assertEquals(doc.getImages(), this.images);", "idx": 9}
{"label": "org . junit . Assert . assertEquals ( expecteds , actuals )", "actual": " org.junit.Assert.assertEquals(expecteds, actuals);", "idx": 10}
{"label": "org . junit . Assert . assertEquals ( value , clone . getLocalValue ( ) , 0.0 )", "actual": " org.junit.Assert.assertEquals(null, min.getLocalValue());", "idx": 11}
{"label": "org . junit . Assert . assertEquals ( 0 , ndbtB . getFailed ( ) . size ( ) )", "actual": " org.junit.Assert.assertEquals(0, ndbtB.getFailed().size());", "idx": 12}
{"label": "org . junit . Assert . assertFalse ( subject . controleer ( persoon , verzoek ) )", "actual": " org.junit.Assert.assertFalse(controleer(persoon, verzoek));", "idx": 13}
{"label": "org . junit . Assert . assertNotNull ( page )", "actual": " org.junit.Assert.assertNotNull(page);", "idx": 14}
{"label": "org . junit . Assert . assertTrue ( new java . lang . String ( twoByteContents ) . equals ( output ) )", "actual": " org.junit.Assert.assertTrue(output.equals(\"xy\"));", "idx": 15}
{"label": "org . junit . Assert . assertEquals ( expectedFormat , actualFormat )", "actual": " org.junit.Assert.assertEquals(expectedFormat, actualFormat);", "idx": 16}
{"label": "org . junit . Assert . assertEquals ( name , t1 . toString ( ) )", "actual": " org.junit.Assert.assertEquals(\"\", t1.toString());", "idx": 17}
{"label": "org . junit . Assert . assertTrue ( tQuery . containsRowWithKey ( 1 ) )", "actual": " org.junit.Assert.assertTrue(tQuery.containsRowWithKey(new Object[]{\"John\", \"Doe\"}));", "idx": 18}
{"label": "org . junit . Assert . assertTrue ( ( ( result . length ) == 0 ) )", "actual": " org.junit.Assert.assertArrayEquals(new byte[0], result);", "idx": 19}
{"label": "org . junit . Assert . assertNotNull ( experiment )", "actual": " The method `setUpExperiment` in the class `org.eclipse.tracecompass.tmf.core.trace.experiment.TmfExperiment` is responsible for setting up an experiment with a given set of traces. The method takes an array of trace files as input and returns an instance of `org.eclipse.tracecompass.tmf.core.trace.experiment.TmfExperiment`.\n\nThe method first creates an array of `org.eclipse.tracecompass.tmf.core.trace.ITmfTrace` instances with the same length as the input array of trace files. It then iterates over the trace files and creates a new `org.eclipse.tracecompass.analysis.os.linux.core.tests.stubs.trace.TmfXmlKernelTraceStub` instance for each trace file. The method then initializes the trace stubs with the trace files and", "idx": 20}
{"label": "org . junit . Assert . assertEquals ( msg , expEpsNext , epsNext )", "actual": " org.junit.Assert.assertEquals(expected, actual);", "idx": 21}
{"label": "org . junit . Assert . assertEquals ( 1 , out . size ( ) )", "actual": " org.junit.Assert.assertEquals(out.size(), 1);", "idx": 22}
{"label": "org . junit . Assert . assertThat ( remainingAmount , org . hamcrest . CoreMatchers . is ( fullDepositAmount ) )", "actual": " org.junit.Assert.assertEquals(fullDepositAmount, remainingAmount);", "idx": 23}
{"label": "org . junit . Assert . assertEquals ( expectedValue , instance . getLabelID ( \"R3\" ) )", "actual": " org.junit.Assert.assertEquals(expectedValue, instance.getLabelID(label));", "idx": 24}
{"label": "org . junit . Assert . assertTrue ( hasWorkItems )", "actual": " org.junit.Assert.assertTrue(hasWorkItems);", "idx": 25}
{"label": "org . junit . Assert . assertTrue ( areDependencyTypesDetected ( fromClass , toClass , typesToFind , true ) )", "actual": " To generate the assertion for the `areDependencyTypesDetected` method, you can use the following code:\n```\norg.junit.Assert.assertThat(\n    areDependencyTypesDetected(fromClass, toClass, typesToFind, \"\", isIndirect),\n    org.hamcrest.CoreMatchers.is(org.hamcrest.CoreMatchers.equalTo(true))\n);\n```\nThis will check that the `areDependencyTypesDetected` method returns `true` when called with the specified parameters.\n\nAlternatively, you can use the `assertTrue` method from the `org.junit.Assert` class to check that the method returns `true`:\n```\norg.junit.Assert.assertTrue(\n    areDependencyTypesDetected(fromClass, toClass, typesToFind, \"\", isIndirect)\n);\n```\nThis will have the same effect", "idx": 26}
{"label": "org . junit . Assert . assertNull ( string )", "actual": " org.junit.Assert.assertNull(string);", "idx": 27}
{"label": "org . junit . Assert . assertTrue ( ( ( result . length ( ) ) < ( javaContent . length ( ) ) ) )", "actual": " org.junit.Assert.assertEquals(1, ksession.fireAllRules());\n\nThis assertion checks that the `fireAllRules()` method returns 1, which indicates that the rule was successfully fired.\n\nAlternatively, you can use the `assertTrue()` method to check that the rule was fired, like this:\n```\norg.junit.Assert.assertTrue(ksession.fireAllRules());\n```\nThis will check that the `fireAllRules()` method returns a non-null value, which indicates that the rule was successfully fired.", "idx": 28}
{"label": "org . junit . Assert . assertNotNull ( logManager )", "actual": " Sure, here is the response with the assertion added:\n\n### METHOD_UNDER_TEST\ngetLogManager ( ) { return logManager ; }\n### UNIT_TEST\ntestLogManagerCreation ( ) { org . jsoar . kernel . LogManager logManager = agent . getLogManager ( ) ; org . junit . Assert . assertNotNull ( logManager ) ; }\n[METHOD_UNDER_TEST]:getLogManager\n[UNIT_TEST]:testLogManagerCreation\n### generate assertion\norg . junit . Assert . assertNotNull ( logManager ) ;", "idx": 29}
{"label": "org . junit . Assert . assertTrue ( ( ( events . size ( ) ) == 5 ) )", "actual": " org.junit.Assert.assertNotNull(events);\n\nThis assertion checks that the `events` list is not null. If the list is null, the test will fail.", "idx": 30}
{"label": "org . junit . Assert . assertEquals ( givenCodes , decodedCodes )", "actual": " org.junit.Assert.assertEquals(givenCodes, decodedCodes);", "idx": 31}
{"label": "org . junit . Assert . assertSame ( assertions , returned )", "actual": " org.junit.Assert.assertEquals(returned, this);", "idx": 32}
{"label": "org . junit . Assert . assertEquals ( 0L , mcn )", "actual": " org.junit.Assert.assertEquals(0L, mcn);", "idx": 33}
{"label": "org . junit . Assert . assertEquals ( 0 , checksum )", "actual": " org.junit.Assert.assertEquals(0, checksum);", "idx": 34}
{"label": "org . junit . Assert . assertFalse ( access . isValidToExecute ( null ) )", "actual": " org.junit.Assert.assertFalse(isValidToExecute(null));", "idx": 35}
{"label": "org . junit . Assert . assertEquals ( p . getXAttrName ( ) , \"user.a1\" )", "actual": " org.junit.Assert.assertEquals(\"user.a1\", p.getXAttrName());", "idx": 36}
{"label": "org . junit . Assert . assertNotNull ( results )", "actual": " org.junit.Assert.assertNotNull(results);", "idx": 37}
{"label": "org . junit . Assert . assertThat ( pulseLengthAnalyzer . pulseCount ( ) , org . hamcrest . core . Is . is ( 2 ) )", "actual": " org.junit.Assert.assertEquals(2, pulseLengthAnalyzer.pulseCount());", "idx": 38}
{"label": "org . junit . Assert . assertThat ( shapes . size ( ) , org . hamcrest . CoreMatchers . is ( 1 ) )", "actual": " org.junit.Assert.assertEquals(shapes.size(), 1);", "idx": 39}
{"label": "org . junit . Assert . assertThat ( c . count , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( 0 ) ) )", "actual": " org.junit.Assert.assertEquals(1, c.count);", "idx": 40}
{"label": "org . junit . Assert . assertEquals ( 1000 , con . request ( ) . timeout ( ) )", "actual": " org.junit.Assert.assertEquals(1000, con.getTimeout());", "idx": 41}
{"label": "org . junit . Assert . assertFalse ( ( ( boolean ) ( testMethod . invoke ( paar ) ) ) )", "actual": " org.junit.Assert.assertTrue(testMethod.invoke(paar));", "idx": 42}
{"label": "org . junit . Assert . assertEquals ( expected , actual )", "actual": " org.junit.Assert.assertEquals(expected, actual);", "idx": 43}
{"label": "org . junit . Assert . assertThat ( generatedJson , org . hamcrest . CoreMatchers . is ( expectedJson ) )", "actual": " org.junit.Assert.assertEquals(generatedJson, expectedJson);", "idx": 44}
{"label": "org . junit . Assert . assertEquals ( in , out )", "actual": " org.junit.Assert.assertEquals(\"x\", out);", "idx": 45}
{"label": "org . junit . Assert . assertEquals ( expectedTags , metric . getTags ( ) )", "actual": " org.junit.Assert.assertNotNull(metrics);", "idx": 46}
{"label": "org . junit . Assert . assertFalse ( projectDisabled )", "actual": " org.junit.Assert.assertFalse(projectDisabled);", "idx": 47}
{"label": "org . junit . Assert . assertEquals ( 2 , cofactors . size ( ) )", "actual": " org.junit.Assert.assertNotNull(cofactors);", "idx": 48}
{"label": "org . junit . Assert . assertFalse ( g1 . equals ( g2 ) )", "actual": " org.junit.Assert.assertTrue(g1.equals(g2));", "idx": 49}
{"label": "org . junit . Assert . assertThat ( filter . matches ( ctConstructor ) , org . hamcrest . core . Is . is ( false ) )", "actual": " org.junit.Assert.assertFalse(result);", "idx": 50}
{"label": "org . junit . Assert . assertTrue ( cellIdxSet . equals ( expectedIdxSet ) )", "actual": " org.junit.Assert.assertEquals(cellIdxSet, expectedIdxSet);", "idx": 51}
{"label": "org . junit . Assert . assertEquals ( dataflow , edit . getSubject ( ) )", "actual": " org.junit.Assert.assertEquals(edit.getSubject(), configurable);", "idx": 52}
{"label": "org . junit . Assert . assertEquals ( expectedBindingString , relativizedVolumeString )", "actual": " org.junit.Assert.assertEquals(expectedBindingString, relativizedVolumeString);", "idx": 53}
{"label": "org . junit . Assert . assertThat ( rendered , org . hamcrest . CoreMatchers . is ( test [ 1 ] ) )", "actual": " org.junit.Assert.assertEquals(rendered, test[1]);", "idx": 54}
{"label": "org . junit . Assert . assertEquals ( expected , result )", "actual": " org.junit.Assert.assertEquals(expected, result);", "idx": 55}
{"label": "org . junit . Assert . assertTrue ( org . teiid . query . optimizer . relational . rules . CapabilitiesUtil . supportsSelectDistinct ( modelID , metadata , finder ) )", "actual": " org.junit.Assert.assertTrue(supportsSelectDistinct(null, metadata, finder));", "idx": 56}
{"label": "org . junit . Assert . assertThat ( target . getMergeFeature ( feature . getId ( ) ) , org . hamcrest . Matchers . is ( isNull ) )", "actual": " org.junit.Assert.assertNull(target.getMergeFeature(\"fx1\"));", "idx": 57}
{"label": "org . junit . Assert . assertEquals ( com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . NEW_VALUE , element . getPropertyRaw ( com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . TEST_PROPERTY ) )", "actual": " org.junit.Assert.assertEquals(element.getProperty(com.vaadin.flow.server.communication.rpc.MapSyncRpcHandlerTest.TEST_PROPERTY), com.vaadin.flow.server.communication.rpc.MapSyncRpcHandlerTest.NEW_VALUE);", "idx": 58}
{"label": "org . junit . Assert . assertEquals ( pos . getErrorIndex ( ) , 0 )", "actual": " org.junit.Assert.assertEquals(getErrorIndex(), pos.getErrorIndex());", "idx": 59}
{"label": "org . junit . Assert . assertNull ( expression . evaluate ( document ) )", "actual": " org.junit.Assert.assertThrows(UnsupportedOperationException.class, () -> expression.evaluate(document));", "idx": 60}
{"label": "org . junit . Assert . assertNull ( principal )", "actual": " org.junit.Assert.assertEquals(principal.getName(), XWikiRightService.SUPERADMIN_USER_FULLNAME);", "idx": 61}
{"label": "org . junit . Assert . assertEquals ( cache . getRootDirectory ( ) , cacheDirName )", "actual": " org.junit.Assert.assertEquals(cacheDirName, cache.getRootDirectory());", "idx": 62}
{"label": "org . junit . Assert . assertFalse ( isConsistent )", "actual": " org.junit.Assert.assertFalse(isConsistent);", "idx": 63}
{"label": "org . junit . Assert . assertNotNull ( request )", "actual": " org.junit.Assert.assertEquals(1, request.refCnt());", "idx": 64}
{"label": "org . junit . Assert . assertEquals ( 12 , details . getUserKey ( ) )", "actual": " org.junit.Assert.assertEquals(details.getUserKey(), 12);", "idx": 65}
{"label": "org . junit . Assert . assertEquals ( resourceURI , ref . toString ( ) )", "actual": " org.junit.Assert.assertEquals(\"https://example.net/cats/dogs\", ref.toString());", "idx": 66}
{"label": "org . junit . Assert . assertEquals ( expectedResult , result )", "actual": " org.junit.Assert.assertEquals(expectedResult, result);", "idx": 67}
{"label": "org . junit . Assert . assertEquals ( FileSystemKind . OBJECT_STORE , s3 . getKind ( ) )", "actual": " org.junit.Assert.assertEquals(FileSystemKind.OBJECT_STORE, s3.getKind());", "idx": 68}
{"label": "org . junit . Assert . assertSame ( io . grpc . internal . SharedResourceHolder . get ( io . grpc . inprocess . TIMER_SERVICE ) , clientTransportFactory . getScheduledExecutorService ( ) )", "actual": " The method `getObject()` in the `ProducerFactoryBean` class returns a `Producer` object. The `Producer` object is created using the `ProducerMetadata` object, which is passed as a parameter to the `ProducerFactoryBean` constructor.\n\nThe `ProducerMetadata` object is created with the `ProducerMetadata` constructor, which takes a `String` parameter representing the topic name. The `ProducerMetadata` object is then passed to the `ProducerFactoryBean` constructor, which creates a `Producer` object using the `ProducerMetadata` object.\n\nThe `Producer` object is then returned by the `getObject()` method.\n\nThe `getObject()` method is a part of the `FactoryBean` interface, which is used to create and manage objects in a Spring application. The `FactoryBean` interface provides a way to create and configure objects in a Spring application, and to manage their", "idx": 69}
{"label": "org . junit . Assert . assertEquals ( template , new com . github . jknack . handlebars . cache . HighConcurrencyTemplateCache ( cache ) . get ( source , parser ) )", "actual": " org.junit.Assert.assertThrows(Error.class, () -> new com.github.jknack.handlebars.cache.HighConcurrencyTemplateCache(cache).get(source, parser));", "idx": 70}
{"label": "org . junit . Assert . assertNull ( m )", "actual": " org.junit.Assert.assertNull(m);", "idx": 71}
{"label": "org . junit . Assert . assertTrue ( future . isCancelled ( ) )", "actual": " org.junit.Assert.assertTrue(future.isCancelled());", "idx": 72}
{"label": "org . junit . Assert . assertEquals ( 1 , descriptiveStatistics . getN ( ) )", "actual": " org.junit.Assert.assertEquals(161, descriptiveStatistics.getN());", "idx": 73}
{"label": "org . junit . Assert . assertEquals ( searchCriteriaBuilder , list . find ( ) )", "actual": " org.junit.Assert.assertNotNull(searchCriteriaBuilder);", "idx": 74}
{"label": "org . junit . Assert . assertEquals ( \"canal\" , output )", "actual": " org.junit.Assert.assertEquals(\"canal\", output);", "idx": 75}
{"label": "org . junit . Assert . assertEquals ( 1 , stat . getATime ( ) )", "actual": " org.junit.Assert.assertEquals(1, stat.getATime());", "idx": 76}
{"label": "org . junit . Assert . assertTrue ( true )", "actual": " org.junit.Assert.assertEquals(\"123123\", hash.getDigestHex().substring(((hash.getDigestHex().length() - 8) - 8).toUpperCase()));", "idx": 77}
{"label": "org . junit . Assert . assertArrayEquals ( new org . eclipse . swt . widgets . TreeItem [ ] { item1 , item2 } , tree . getSelection ( ) )", "actual": " org.junit.Assert.assertEquals(2, handler.getSelection().length);", "idx": 78}
{"label": "org . junit . Assert . assertNull ( result )", "actual": " org.junit.Assert.assertNull(result);", "idx": 79}
{"label": "org . junit . Assert . assertNotNull ( workbook . getStylesSource ( ) )", "actual": " org.junit.Assert.assertEquals(4, books.size());", "idx": 80}
{"label": "org . junit . Assert . assertEquals ( 40.4 , readDouble ( file ) , 0 )", "actual": " org.junit.Assert.assertEquals(40.4, readDouble(file), 0.001);", "idx": 81}
{"label": "org . junit . Assert . assertSame ( data , webPage . getData ( ) )", "actual": " Sure, here is the response with the assertion generated:\n\n### METHOD_UNDER_TEST\ngetData ( ) { return data ; }\n### UNIT_TEST\ntestGetData ( ) { com . eclipsesource . tabris . ui . PageData data = mock ( com . eclipsesource . tabris . ui . PageData . class ) ; webPage = new com . eclipsesource . tabris . internal . ui . web . WebPage ( ui , uiRenderer , descriptor , data ) ; org . junit . Assert . assertEquals ( data , webPage . getData ( ) ) ; }\n[METHOD_UNDER_TEST]:getData\n[UNIT_TEST]:testGetData\n### generate assertion\norg . junit . Assert . assertEquals ( data , webPage . getData ( ) )", "idx": 82}
{"label": "org . junit . Assert . assertEquals ( \"<arg3>type</arg3>\\n\" 2 , sb . toString ( ) , tagOut )", "actual": " org.junit.Assert.assertEquals(tagOut, sb.toString());", "idx": 83}
{"label": "org . junit . Assert . assertTrue ( sf . createSocket ( \"first\" , 80 ) . getKeepAlive ( ) )", "actual": " The `next()` method in the `ResultSet` class is used to move the cursor to the next row in the result set. It returns a boolean value indicating whether the cursor was moved successfully or not.\n\nThe `close()` method in the `ResultSet` class is used to close the result set and release any resources associated with it.\n\nThe `recordAndVerifyWithMixedCascadeLevels()` method in the `SocketFactory` class is used to test the behavior of the `createSocket()` method with different cascade levels. It creates a mock `SocketFactory` object and sets up expectations for the `createSocket()` method to be called with different arguments. It then calls the `createSocket()` method with different arguments and verifies that the expected behavior occurs.\n\nThe `next()` method in the `ResultSet` class is used to move the cursor to the next row in the result set. It returns a boolean value indicating", "idx": 84}
{"label": "org . junit . Assert . assertTrue ( success )", "actual": " org.junit.Assert.assertTrue(success);", "idx": 85}
{"label": "org . junit . Assert . assertNull ( startTime )", "actual": " org.junit.Assert.assertNull(startTime);", "idx": 86}
{"label": "org . junit . Assert . assertThat ( first , org . hamcrest . CoreMatchers . equalTo ( second ) )", "actual": " org.junit.Assert.assertEquals(first, second);", "idx": 87}
{"label": "org . junit . Assert . assertFalse ( result )", "actual": " org.junit.Assert.assertFalse(result);", "idx": 88}
{"label": "org . junit . Assert . assertNotNull ( entities )", "actual": " org.junit.Assert.assertEquals(entities.getTotalElements(), 2);", "idx": 89}
{"label": "org . junit . Assert . assertNotNull ( clusterStatsRequest )", "actual": " org.junit.Assert.assertEquals(clusterStatsRequest.indices()[0], com.liferay.portal.search.elasticsearch6.internal.search.engine.adapter.cluster.StatsClusterRequestExecutorTest._INDEX_NAME);", "idx": 90}
{"label": "org . junit . Assert . assertEquals ( expResult , result )", "actual": " org.junit.Assert.assertEquals(expResult, result);", "idx": 91}
{"label": "org . junit . Assert . assertEquals ( 2 , results . size ( ) )", "actual": " org.junit.Assert.assertEquals(results.size(), 1);", "idx": 92}
{"label": "org . junit . Assert . assertTrue ( deleteSubtasksHidden )", "actual": " org.junit.Assert.assertTrue(deleteSubtasksHidden);", "idx": 93}
{"label": "org . junit . Assert . assertEquals ( str , json . toString ( ) )", "actual": " org.junit.Assert.assertEquals(\"Expected string is not equal to actual string\", expecting, found);", "idx": 94}
{"label": "org . junit . Assert . assertTrue ( configs . isEmpty ( ) )", "actual": " org.junit.Assert.assertTrue(configs.isEmpty());", "idx": 95}
{"label": "org . junit . Assert . assertEquals ( 1 , counter )", "actual": " org.junit.Assert.assertEquals(counter, 0);", "idx": 96}
{"label": "org . junit . Assert . assertTrue ( viewAction . project . visibleFileTry ( com . liferay . ide . ui . module . tests . NewModuleProjectWizardLiferayWorkspaceGradleTests . liferayWorkspace . getModuleFiles ( project . getName ( ) ) ) )", "actual": " org.junit.Assert.assertTrue(visibleFileTry(files));", "idx": 97}
{"label": "org . junit . Assert . assertTrue ( creator . recordedDirectories ( ) . contains ( java . nio . file . Paths . get ( \"foo\" , \"bar\" ) ) )", "actual": " org.junit.Assert.assertEquals(creator.recordedDirectories(), new HashSet<>(Arrays.asList(path)));", "idx": 98}
{"label": "org . junit . Assert . assertEquals ( mockResponse , testResponse )", "actual": " org.junit.Assert.assertEquals(testResponse.getStatus(), Response.Status.OK.getStatusCode());", "idx": 99}
