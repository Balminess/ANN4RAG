{"prompt": "### METHOD_UNDER_TEST\ngetFile ( java . lang . String ) { org . eclipse . linuxtools . internal . perf . model . PMFile tmp = ( ( org . eclipse . linuxtools . internal . perf . model . PMFile ) ( getChild ( fileName ) ) ) ; if ( tmp != null ) { } else { tmp = new org . eclipse . linuxtools . internal . perf . model . PMFile ( fileName ) ; addChild ( tmp ) ; } return tmp ; }\n### UNIT_TEST\ntestShortcutEditor ( ) { org . eclipse . linuxtools . internal . valgrind . helgrind . tests . ValgrindTestHelgrindLaunchShortcut shortcut = new org . eclipse . linuxtools . internal . valgrind . helgrind . tests . ValgrindTestHelgrindLaunchShortcut ( ) ; org . eclipse . ui . IWorkbenchPage page = org . eclipse . ui . PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; org . eclipse . core . resources . IFile file = proj . getProject ( ) . getFile ( \"test.c\" ) ; org . eclipse . ui . IEditorPart editor = org . eclipse . ui . ide . IDE . openEditor ( page , file ) ; \"<AssertPlaceHolder>\" ; shortcut . launch ( editor , ILaunchManager . PROFILE_MODE ) ; org . eclipse . debug . core . ILaunchConfiguration config = shortcut . getConfig ( ) ; compareWithDefaults ( config ) ; }\n[METHOD_UNDER_TEST]:getFile\n[UNIT_TEST]:testShortcutEditor\n### generate assertion\norg . junit . Assert . assertNotNull ( editor )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetLibraries ( com . day . cq . wcm . api . designer . Design , com . adobe . acs . commons . designer . PageRegion ) { final java . lang . String [ ] cssLibs = this . getCssLibraries ( design , pageRegion ) ; final java . lang . String [ ] jsLibs = this . getJsLibraries ( design , pageRegion ) ; final java . util . LinkedHashSet < java . lang . String > libs = new java . util . LinkedHashSet < java . lang . String > ( ) ; libs . addAll ( java . util . Arrays . asList ( cssLibs ) ) ; libs . addAll ( java . util . Arrays . asList ( jsLibs ) ) ; return libs . toArray ( new java . lang . String [ libs . size ( ) ] ) ; }\n### UNIT_TEST\ntestGetLibrariesDoesDeDuplication ( ) { when ( design . getContentResource ( ) ) . thenReturn ( designContentResource ) ; setLibraries ( designContentResource , PageRegion . HEAD , new java . lang . String [ ] { \"css1\" , \"cssandjs1\" } , new java . lang . String [ ] { \"js1\" , \"cssandjs1\" } ) ; java . lang . String [ ] categories = instance . getLibraries ( design , PageRegion . HEAD ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getLibraries\n[UNIT_TEST]:testGetLibrariesDoesDeDuplication\n### generate assertion", "label": "org . junit . Assert . assertArrayEquals ( new java . lang . Object [ ] { \"css1\" , \"cssandjs1\" , \"js1\" } , categories )"}
{"prompt": "### METHOD_UNDER_TEST\ngetCurrentSession ( ) { return sessionFactory . getCurrentSession ( ) ; }\n### UNIT_TEST\nfetchModeSelectCriteria ( ) { persistBooks ( ( ) -> new com . example . entities . BookFetchModeSelect ( ) ) ; System . out . println ( \"FetchMode.SELECT<sp>Criteria<sp>API\" ) ; java . util . List books = getCurrentSession ( ) . createCriteria ( com . example . entities . BookFetchModeSelect . class ) . list ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getCurrentSession\n[UNIT_TEST]:fetchModeSelectCriteria\n### generate assertion\norg . junit . Assert . assertEquals ( 4 , books . size ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetUsersWaitingNotification ( net . jforum . entities . Topic ) { java . util . List < net . jforum . entities . User > users = session . createQuery ( ( \"select<sp>u<sp>from<sp>TopicWatch<sp>tw<sp>\" + ( \"<sp>inner<sp>join<sp>tw.user<sp>u<sp>where<sp>tw.topic<sp>=<sp>:topic<sp>\" + \"<sp>and<sp>(tw.read<sp>=<sp>true<sp>or<sp>u.notifyAlways<sp>=<sp>true)\" ) ) ) . setEntity ( \"topic\" , topic ) . setComment ( \"topicWatchDAO.getUsersWaitingNotification\" ) . list ( ) ; if ( ( users . size ( ) ) > 0 ) { this . markAllAsUnread ( topic ) ; } return users ; }\n### UNIT_TEST\ngetUsersWaitingNotificationNoWatchExpectEmptyList ( ) { net . jforum . repository . TopicWatchRepository dao = this . newDao ( ) ; net . jforum . entities . Topic topic = new net . jforum . entities . Topic ( ) ; topic . setId ( 13 ) ; java . util . List < net . jforum . entities . User > users = dao . getUsersWaitingNotification ( topic ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getUsersWaitingNotification\n[UNIT_TEST]:getUsersWaitingNotificationNoWatchExpectEmptyList\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 0 , users . size ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetId ( ) { return this . id ; }\n### UNIT_TEST\ntestCreate ( ) { org . oscarehr . common . model . MeasurementType entity = new org . oscarehr . common . model . MeasurementType ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getId\n[UNIT_TEST]:testCreate\n### generate assertion\norg . junit . Assert . assertNotNull ( entity . getId ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetCreator ( ) { if ( ( creator ) == null ) { creator = new de . sstoehr . harreader . model . HarCreatorBrowser ( ) ; } return creator ; }\n### UNIT_TEST\ntestCreatorNull ( ) { de . sstoehr . harreader . model . HarLog log = new de . sstoehr . harreader . model . HarLog ( ) ; log . setCreator ( null ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getCreator\n[UNIT_TEST]:testCreatorNull\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( log . getCreator ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFaults ( ) { return _faults . toArray ( new com . persistit . IntegrityCheck . Fault [ _faults . size ( ) ] ) ; }\n### UNIT_TEST\ntestBrokenMVVs ( ) { final com . persistit . Exchange ex = _persistit . getExchange ( _volumeName , \"mvv\" , true ) ; disableBackgroundCleanup ( ) ; transactionalStore ( ex ) ; corrupt2 ( ex ) ; final com . persistit . IntegrityCheck icheck = icheck ( ) ; icheck . checkTree ( ex . getTree ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFaults\n[UNIT_TEST]:testBrokenMVVs\n### generate assertion\norg . junit . Assert . assertTrue ( ( ( icheck . getFaults ( ) . length ) > 0 ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetMutationCoverage ( ) { return ( this . numberOfMutations ) == 0 ? 100 : java . lang . Math . round ( ( ( 100.0F * ( this . numberOfMutationsDetected ) ) / ( this . numberOfMutations ) ) ) ; }\n### UNIT_TEST\nshouldCorrectlyCalculateMutationsCoverageWhenAllMutationsDetected ( ) { this . testee . addMutations ( 100 ) ; this . testee . addMutationsDetetcted ( 100 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getMutationCoverage\n[UNIT_TEST]:shouldCorrectlyCalculateMutationsCoverageWhenAllMutationsDetected\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 100 , this . testee . getMutationCoverage ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nisSuccess ( ) { if ( ! ( super . isSuccess ( ) ) ) { return false ; } return checkResults ( result ( ) , rawResult . size ( ) , dataSize ) ; }\n### UNIT_TEST\ntestBootstrap2 ( ) { final java . util . Random rnd = new java . util . Random ( 42 ) ; net . tomp2p . p2p . Peer master = null ; try { net . tomp2p . p2p . Peer [ ] peers = net . tomp2p . Utils2 . createNodes ( 2000 , rnd , 4001 ) ; master = peers [ 0 ] ; java . util . List < net . tomp2p . futures . FutureBootstrap > tmp = new java . util . ArrayList < net . tomp2p . futures . FutureBootstrap > ( ) ; for ( int i = 0 ; i < ( peers . length ) ; i ++ ) { if ( ( peers [ i ] ) != master ) { net . tomp2p . futures . FutureBootstrap res = peers [ i ] . bootstrap ( ) . peerAddress ( master . peerAddress ( ) ) . start ( ) ; tmp . add ( res ) ; } } int i = 0 ; for ( net . tomp2p . futures . FutureBootstrap fm : tmp ) { fm . awaitUninterruptibly ( ) ; if ( fm . isFailed ( ) ) System . err . println ( ( \"FAILL:\" + ( fm . failedReason ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; System . err . println ( ( \"i:\" + ( ++ i ) ) ) ; } } finally { if ( master != null ) { master . shutdown ( ) . await ( ) ; } } }\n[METHOD_UNDER_TEST]:isSuccess\n[UNIT_TEST]:testBootstrap2\n### generate assertion\norg . junit . Assert . assertEquals ( true , fm . isSuccess ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nperformTest ( ) { createCredentialCache ( getClientPrincipal ( ) , getClientPassword ( ) ) ; org . apache . kerby . kerberos . kerb . type . ticket . TgtTicket tgt ; org . apache . kerby . kerberos . kerb . client . KrbTokenClient tokenClient = getTokenClient ( ) ; try { tgt = tokenClient . requestTgt ( getKrbToken ( ) , getcCacheFile ( ) . getPath ( ) ) ; } catch ( org . apache . kerby . kerberos . kerb . KrbException e ) { if ( e . getMessage ( ) . contains ( \"timeout\" ) ) { return ; } throw e ; } verifyTicket ( tgt ) ; org . apache . kerby . kerberos . kerb . type . ticket . SgtTicket tkt = getKrbClient ( ) . requestSgt ( tgt , getServerPrincipal ( ) ) ; verifyTicket ( tkt ) ; }\n### UNIT_TEST\ntestBadIssuer ( ) { java . security . PrivateKey privateKey ; try ( java . io . InputStream is = org . apache . kerby . kerberos . kdc . TokenKdcTestBase . class . getResourceAsStream ( \"/private_key.pem\" ) ) { privateKey = org . apache . kerby . kerberos . kerb . common . PrivateKeyReader . loadPrivateKey ( is ) ; } prepareToken ( getServerPrincipal ( ) , \"oauth1.com\" , privateKey , null ) ; try { performTest ( ) ; org . junit . Assert . fail ( \"Failure<sp>expected<sp>on<sp>a<sp>bad<sp>issuer<sp>value\" ) ; } catch ( java . lang . Exception ex ) { \"<AssertPlaceHolder>\" ; } }\n[METHOD_UNDER_TEST]:performTest\n[UNIT_TEST]:testBadIssuer\n### generate assertion", "label": "org . junit . Assert . assertTrue ( ( ex instanceof org . apache . kerby . kerberos . kerb . KrbException ) )"}
{"prompt": "### METHOD_UNDER_TEST\nisSuccess ( ) { if ( ! ( super . isSuccess ( ) ) ) { return false ; } return checkResults ( result ( ) , rawResult . size ( ) , dataSize ) ; }\n### UNIT_TEST\ntestBootstrap2 ( ) { final java . util . Random rnd = new java . util . Random ( 42 ) ; net . tomp2p . p2p . Peer master = null ; try { net . tomp2p . p2p . Peer [ ] peers = net . tomp2p . Utils2 . createNodes ( 2000 , rnd , 4001 ) ; master = peers [ 0 ] ; java . util . List < net . tomp2p . futures . FutureBootstrap > tmp = new java . util . ArrayList < net . tomp2p . futures . FutureBootstrap > ( ) ; for ( int i = 0 ; i < ( peers . length ) ; i ++ ) { if ( ( peers [ i ] ) != master ) { net . tomp2p . futures . FutureBootstrap res = peers [ i ] . bootstrap ( ) . peerAddress ( master . peerAddress ( ) ) . start ( ) ; tmp . add ( res ) ; } } int i = 0 ; for ( net . tomp2p . futures . FutureBootstrap fm : tmp ) { fm . awaitUninterruptibly ( ) ; if ( fm . isFailed ( ) ) System . err . println ( ( \"FAILL:\" + ( fm . failedReason ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; System . err . println ( ( \"i:\" + ( ++ i ) ) ) ; } } finally { if ( master != null ) { master . shutdown ( ) . await ( ) ; } } }\n[METHOD_UNDER_TEST]:isSuccess\n[UNIT_TEST]:testBootstrap2\n### generate assertion\norg . junit . Assert . assertEquals ( true , fm . isSuccess ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsuccessStatusIs200 ( ) { return true ; }\n### UNIT_TEST\ndefaultSuccessStatusIs200ForGET ( ) { org . locationtech . geowave . core . cli . api . ServiceEnableCommandTest . ServiceEnabledCommand_TESTING classUnderTest = new org . locationtech . geowave . core . cli . api . ServiceEnableCommandTest . ServiceEnabledCommand_TESTING ( org . locationtech . geowave . core . cli . api . ServiceEnabledCommand . HttpMethod . GET ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:successStatusIs200\n[UNIT_TEST]:defaultSuccessStatusIs200ForGET\n### generate assertion", "label": "org . junit . Assert . assertEquals ( true , classUnderTest . successStatusIs200 ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ncreate ( java . lang . Object ) { return clone ( value ) ; }\n### UNIT_TEST\ntestCreate ( ) { com . streamsets . pipeline . api . impl . IntegerTypeSupport ts = new com . streamsets . pipeline . api . impl . IntegerTypeSupport ( ) ; int o = 1 ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:create\n[UNIT_TEST]:testCreate\n### generate assertion\norg . junit . Assert . assertSame ( o , ts . create ( o ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncreate ( T ) { checkForInitialized ( ) ; if ( data == null ) { return 0 ; } if ( data instanceof com . j256 . ormlite . misc . BaseDaoEnabled ) { @ com . j256 . ormlite . dao . SuppressWarnings ( \"unchecked\" ) com . j256 . ormlite . misc . BaseDaoEnabled < T , ID > daoEnabled = ( ( com . j256 . ormlite . misc . BaseDaoEnabled < T , ID > ) ( data ) ) ; daoEnabled . setDao ( this ) ; } com . j256 . ormlite . support . DatabaseConnection connection = connectionSource . getReadWriteConnection ( tableInfo . getTableName ( ) ) ; try { return statementExecutor . create ( connection , data , objectCache ) ; } finally { connectionSource . releaseConnection ( connection ) ; } }\n### UNIT_TEST\ntestEnumInt ( ) { java . lang . Class < com . j256 . ormlite . field . types . EnumIntegerTypeTest . LocalEnumInt > clazz = com . j256 . ormlite . field . types . EnumIntegerTypeTest . LocalEnumInt . class ; com . j256 . ormlite . dao . Dao < com . j256 . ormlite . field . types . EnumIntegerTypeTest . LocalEnumInt , java . lang . Object > dao = createDao ( clazz , true ) ; com . j256 . ormlite . field . types . EnumIntegerTypeTest . OurEnum val = com . j256 . ormlite . field . types . EnumIntegerTypeTest . OurEnum . SECOND ; int sqlVal = val . ordinal ( ) ; java . lang . String valStr = java . lang . Integer . toString ( sqlVal ) ; com . j256 . ormlite . field . types . EnumIntegerTypeTest . LocalEnumInt foo = new com . j256 . ormlite . field . types . EnumIntegerTypeTest . LocalEnumInt ( ) ; foo . ourEnum = val ; \"<AssertPlaceHolder>\" ; testType ( dao , foo , clazz , val , sqlVal , sqlVal , valStr , DataType . ENUM_INTEGER , com . j256 . ormlite . field . types . EnumIntegerTypeTest . ENUM_COLUMN , false , true , false , false , false , false , true , false ) ; }\n[METHOD_UNDER_TEST]:create\n[UNIT_TEST]:testEnumInt\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 1 , dao . create ( foo ) )"}
{"prompt": "### METHOD_UNDER_TEST\nor ( com . googlecode . javaewah . EWAHCompressedBitmap [ ] ) { if ( ( bitmaps . length ) == 1 ) return bitmaps [ 0 ] ; int largestSize = com . googlecode . javaewah . EWAHCompressedBitmap . calculateInitialSize ( bitmaps ) ; final com . googlecode . javaewah . EWAHCompressedBitmap container = new com . googlecode . javaewah . EWAHCompressedBitmap ( ( ( int ) ( largestSize * 1.5 ) ) ) ; com . googlecode . javaewah . EWAHCompressedBitmap . orWithContainer ( container , bitmaps ) ; return container ; }\n### UNIT_TEST\nshiftbug004 ( ) { com . googlecode . javaewah . EWAHCompressedBitmap bm1 = com . googlecode . javaewah . EWAHCompressedBitmap . bitmapOf ( 10 , 11 , 12 , 13 , 64 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm2 = bm1 . shift ( 1 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm3 = bm1 . or ( bm2 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm4 = com . googlecode . javaewah . EWAHCompressedBitmap . bitmapOf ( 10 , 11 , 12 , 13 , 14 , 64 , 65 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:or\n[UNIT_TEST]:shiftbug004\n### generate assertion\norg . junit . Assert . assertEquals ( bm3 , bm4 )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsize ( ) { return this . cells . size ( ) ; }\n### UNIT_TEST\nnumberedRgroupSymbol ( ) { org . openscience . cdk . renderer . generators . standard . AtomSymbol atomSymbol = atomGenerator . generatePseudoSymbol ( \"R1\" , HydrogenPosition . Right ) ; java . util . List < java . awt . Shape > shapes = atomSymbol . getOutlines ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:numberedRgroupSymbol\n### generate assertion", "label": "org . junit . Assert . assertThat ( shapes . size ( ) , org . hamcrest . CoreMatchers . is ( 2 ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetId ( ) { return id ; }\n### UNIT_TEST\ntestLookupBlob ( ) { final java . io . File repoPath = setupRepository ( \"testrepo\" ) ; org . libgit2 . jagged . Repository repository = new org . libgit2 . jagged . Repository ( repoPath . getAbsolutePath ( ) ) ; org . libgit2 . jagged . ObjectId oid = new org . libgit2 . jagged . ObjectId ( \"dc48b6c38e967e57965e36c6f7a1c3ec5c3e1ff4\" ) ; org . libgit2 . jagged . Blob blob = repository . lookup ( oid ) ; \"<AssertPlaceHolder>\" ; repository . close ( ) ; }\n[METHOD_UNDER_TEST]:getId\n[UNIT_TEST]:testLookupBlob\n### generate assertion\norg . junit . Assert . assertEquals ( oid , blob . getId ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetGUID ( java . lang . String ) { return new fr . gouv . vitam . common . guid . GUIDImpl ( guid ) ; }\n### UNIT_TEST\ntestGetGUIDByteArray ( ) { byte [ ] baguid = null ; fr . gouv . vitam . common . guid . GUID guid = null ; try { guid = fr . gouv . vitam . common . guid . GUIDReader . getGUID ( fr . gouv . vitam . common . guid . GUIDReaderTest . BASE32 ) ; baguid = guid . getBytes ( ) ; } catch ( final fr . gouv . vitam . common . exception . InvalidGuidOperationException e ) { fr . gouv . vitam . common . guid . GUIDReaderTest . LOGGER . error ( ResourcesPublicUtilTest . SHOULD_NOT_HAVE_AN_EXCEPTION , e ) ; org . junit . Assert . fail ( ResourcesPublicUtilTest . SHOULD_NOT_HAVE_AN_EXCEPTION ) ; } try { final fr . gouv . vitam . common . guid . GUID bguid = fr . gouv . vitam . common . guid . GUIDReader . getGUID ( baguid ) ; \"<AssertPlaceHolder>\" ; } catch ( final fr . gouv . vitam . common . exception . InvalidGuidOperationException e ) { fr . gouv . vitam . common . guid . GUIDReaderTest . LOGGER . error ( ResourcesPublicUtilTest . SHOULD_NOT_HAVE_AN_EXCEPTION , e ) ; org . junit . Assert . fail ( ResourcesPublicUtilTest . SHOULD_NOT_HAVE_AN_EXCEPTION ) ; } try { fr . gouv . vitam . common . guid . GUIDReader . getGUID ( ( ( byte [ ] ) ( null ) ) ) ; org . junit . Assert . fail ( ResourcesPublicUtilTest . SHOULD_HAVE_AN_EXCEPTION ) ; } catch ( final fr . gouv . vitam . common . exception . InvalidGuidOperationException e ) { } try { fr . gouv . vitam . common . guid . GUIDReader . getGUID ( new byte [ 0 ] ) ; org . junit . Assert . fail ( ResourcesPublicUtilTest . SHOULD_HAVE_AN_EXCEPTION ) ; } catch ( final fr . gouv . vitam . common . exception . InvalidGuidOperationException e ) { } try { final byte [ ] ba = new byte [ ] { 1 , 2 } ; fr . gouv . vitam . common . guid . GUIDReader . getGUID ( ba ) ; org . junit . Assert . fail ( ResourcesPublicUtilTest . SHOULD_HAVE_AN_EXCEPTION ) ; } catch ( final fr . gouv . vitam . common . exception . InvalidGuidOperationException e ) { } }\n[METHOD_UNDER_TEST]:getGUID\n[UNIT_TEST]:testGetGUIDByteArray\n### generate assertion", "label": "org . junit . Assert . assertEquals ( bguid , guid )"}
{"prompt": "### METHOD_UNDER_TEST\nisValid ( ) { return satisfiesConstraints ( constraints ) ; }\n### UNIT_TEST\ntestInvalidImageTypeShowsAsInvalid ( ) { co . cask . coopr . layout . NodeLayout badNodeLayout = new co . cask . coopr . layout . NodeLayout ( \"large-mem\" , \"rhel5\" , com . google . common . collect . ImmutableSet . of ( \"namenode\" ) ) ; com . google . common . collect . Multiset < co . cask . coopr . layout . NodeLayout > counts = com . google . common . collect . HashMultiset . create ( ) ; counts . add ( badNodeLayout , 1 ) ; co . cask . coopr . layout . ClusterLayout layout = new co . cask . coopr . layout . ClusterLayout ( co . cask . coopr . layout . ClusterLayoutTest . constraints , counts ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isValid\n[UNIT_TEST]:testInvalidImageTypeShowsAsInvalid\n### generate assertion\norg . junit . Assert . assertFalse ( layout . isValid ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetImages ( ) { return this . images ; }\n### UNIT_TEST\ntestGetImagesWhenImageClassificationIsNotOnUrlClient ( ) { com . ontotext . s4 . model . annotation . AnnotatedDocument doc = com . ontotext . s4 . service . impl . S4AnnotationClientTest . apiUrl . annotateDocument ( com . ontotext . s4 . service . impl . S4AnnotationClientTest . imageURL , SupportedMimeType . HTML ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getImages\n[UNIT_TEST]:testGetImagesWhenImageClassificationIsNotOnUrlClient\n### generate assertion", "label": "org . junit . Assert . assertNull ( doc . getImages ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nconvert ( java . lang . String ) { final java . util . regex . Matcher matcher = org . fcrepo . http . commons . domain . Range . rangePattern . matcher ( source ) ; if ( ! ( matcher . matches ( ) ) ) { return new org . fcrepo . http . commons . domain . Range ( ) ; } final java . lang . String from = matcher . group ( 1 ) ; final java . lang . String to = matcher . group ( 2 ) ; final long start ; if ( from . equals ( \"\" ) ) { start = 0 ; } else { start = java . lang . Long . parseLong ( from ) ; } final long end ; if ( to . equals ( \"\" ) ) { end = - 1 ; } else { end = java . lang . Long . parseLong ( to ) ; } return new org . fcrepo . http . commons . domain . Range ( start , end ) ; }\n### UNIT_TEST\ntestDoBackwardWithDatastreamContent ( ) { when ( node . isNodeType ( org . fcrepo . http . commons . api . rdf . FEDORA_BINARY ) ) . thenReturn ( true ) ; final org . apache . jena . rdf . model . Resource converted = converter . reverse ( ) . convert ( new org . fcrepo . kernel . modeshape . FedoraBinaryImpl ( node ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:convert\n[UNIT_TEST]:testDoBackwardWithDatastreamContent\n### generate assertion\norg . junit . Assert . assertEquals ( resource , converted )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nconvertAll ( java . util . List ) { return convertAll ( sources , new java . util . ArrayList < TARGET > ( sources . size ( ) ) ) ; }\n### UNIT_TEST\ntestConvertAll ( ) { org . lnu . is . domain . degree . Degree source = new org . lnu . is . domain . degree . Degree ( ) ; java . util . List < org . lnu . is . domain . degree . Degree > sources = java . util . Arrays . asList ( source ) ; org . lnu . is . resource . degree . DegreeResource expected = new org . lnu . is . resource . degree . DegreeResource ( ) ; java . util . List < org . lnu . is . resource . degree . DegreeResource > expecteds = java . util . Arrays . asList ( expected ) ; java . util . List < org . lnu . is . resource . degree . DegreeResource > actuals = unit . convertAll ( sources ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:convertAll\n[UNIT_TEST]:testConvertAll\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expecteds , actuals )"}
{"prompt": "### METHOD_UNDER_TEST\neval ( java . lang . String ) { return getValue ( expression , java . lang . Object . class ) ; }\n### UNIT_TEST\ntestMod02 ( ) { javax . el . ELProcessor processor = new javax . el . ELProcessor ( ) ; java . lang . Object result = processor . eval ( \"null<sp>%<sp>null\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:eval\n[UNIT_TEST]:testMod02\n### generate assertion\norg . junit . Assert . assertEquals ( java . lang . Long . valueOf ( 0 ) , result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetLocalValue ( ) { return null ; }\n### UNIT_TEST\ntestClone ( ) { org . apache . flink . api . common . accumulators . DoubleMinimum min = new org . apache . flink . api . common . accumulators . DoubleMinimum ( ) ; double value = 3.14159265359 ; min . add ( value ) ; org . apache . flink . api . common . accumulators . DoubleMinimum clone = min . clone ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getLocalValue\n[UNIT_TEST]:testClone\n### generate assertion", "label": "org . junit . Assert . assertEquals ( value , clone . getLocalValue ( ) , 0.0 )"}
{"prompt": "### METHOD_UNDER_TEST\nisSuccess ( ) { if ( ! ( super . isSuccess ( ) ) ) { return false ; } return checkResults ( result ( ) , rawResult . size ( ) , dataSize ) ; }\n### UNIT_TEST\ntestBootstrap2 ( ) { final java . util . Random rnd = new java . util . Random ( 42 ) ; net . tomp2p . p2p . Peer master = null ; try { net . tomp2p . p2p . Peer [ ] peers = net . tomp2p . Utils2 . createNodes ( 2000 , rnd , 4001 ) ; master = peers [ 0 ] ; java . util . List < net . tomp2p . futures . FutureBootstrap > tmp = new java . util . ArrayList < net . tomp2p . futures . FutureBootstrap > ( ) ; for ( int i = 0 ; i < ( peers . length ) ; i ++ ) { if ( ( peers [ i ] ) != master ) { net . tomp2p . futures . FutureBootstrap res = peers [ i ] . bootstrap ( ) . peerAddress ( master . peerAddress ( ) ) . start ( ) ; tmp . add ( res ) ; } } int i = 0 ; for ( net . tomp2p . futures . FutureBootstrap fm : tmp ) { fm . awaitUninterruptibly ( ) ; if ( fm . isFailed ( ) ) System . err . println ( ( \"FAILL:\" + ( fm . failedReason ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; System . err . println ( ( \"i:\" + ( ++ i ) ) ) ; } } finally { if ( master != null ) { master . shutdown ( ) . await ( ) ; } } }\n[METHOD_UNDER_TEST]:isSuccess\n[UNIT_TEST]:testBootstrap2\n### generate assertion\norg . junit . Assert . assertEquals ( true , fm . isSuccess ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetFailed ( ) { return m_failed ; }\n### UNIT_TEST\ntestTwentySwitchTopologyVRendMun ( ) { org . opennms . netmgt . enlinkd . TwentyNodeTopology topology = new org . opennms . netmgt . enlinkd . TwentyNodeTopology ( ) ; org . opennms . netmgt . enlinkd . service . api . BroadcastDomain domain = new org . opennms . netmgt . enlinkd . service . api . BroadcastDomain ( ) ; org . opennms . netmgt . enlinkd . service . api . Bridge . create ( domain , topology . vrendmunalv02Id ) ; org . opennms . netmgt . enlinkd . service . api . Bridge . create ( domain , topology . vrendmunasw01Id ) ; org . opennms . netmgt . enlinkd . service . api . Bridge . create ( domain , topology . comunevillarendenawl1Id ) ; setBridgeElements ( domain , topology . elemlist ) ; org . opennms . netmgt . enlinkd . service . api . DiscoveryBridgeTopology ndbtB = new org . opennms . netmgt . enlinkd . service . api . DiscoveryBridgeTopology ( domain ) ; ndbtB . addUpdatedBFT ( topology . vrendmunalv02Id , topology . bftvrendmunalv02 ) ; ndbtB . addUpdatedBFT ( topology . vrendmunasw01Id , topology . bftvrendmunasw01 ) ; ndbtB . addUpdatedBFT ( topology . comunevillarendenawl1Id , topology . bftcomunevillarendenawl1 ) ; ndbtB . calculate ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFailed\n[UNIT_TEST]:testTwentySwitchTopologyVRendMun\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 0 , ndbtB . getFailed ( ) . size ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nmap ( java . util . Set , java . util . Set ) { final java . util . List < nl . moderniseringgba . migratie . conversie . model . brp . BrpRelatie > result = new java . util . ArrayList < nl . moderniseringgba . migratie . conversie . model . brp . BrpRelatie > ( ) ; for ( final nl . moderniseringgba . migratie . synchronisatie . domein . brp . kern . entity . Betrokkenheid ikBetrokkenheid : ikBetrokkenheidSet ) { final nl . moderniseringgba . migratie . synchronisatie . domein . brp . kern . entity . Relatie relatie = ikBetrokkenheid . getRelatie ( ) ; final nl . moderniseringgba . migratie . conversie . model . brp . attribuut . BrpSoortRelatieCode soortRelatieCode = nl . moderniseringgba . migratie . synchronisatie . service . impl . mapper . BrpMapperUtil . mapBrpSoortRelatieCode ( relatie . getSoortRelatie ( ) ) ; final nl . moderniseringgba . migratie . conversie . model . brp . attribuut . BrpSoortBetrokkenheidCode rolCode = nl . moderniseringgba . migratie . synchronisatie . service . impl . mapper . BrpMapperUtil . mapBrpSoortBetrokkenheidCode ( ikBetrokkenheid . getSoortBetrokkenheid ( ) ) ; nl . moderniseringgba . migratie . conversie . model . brp . BrpStapel < nl . moderniseringgba . migratie . conversie . model . brp . groep . BrpRelatieInhoud > relatieStapel = relatieMapper . map ( relatie . getRelatieHistorieSet ( ) ) ; if ( multiRealiteitSet != null ) { for ( final nl . moderniseringgba . migratie . synchronisatie . domein . brp . kern . entity . MultiRealiteitRegel multiRealiteit : multiRealiteitSet ) { if ( ( SoortMultiRealiteitRegel . RELATIE . equals ( multiRealiteit . getSoortMultiRealiteitRegel ( ) ) ) && ( relatie . getId ( ) . equals ( multiRealiteit . getRelatie ( ) . getId ( ) ) ) ) { relatieStapel = brpMultiRealiteitMapper . verwerk ( relatieStapel , multiRealiteit ) ; } } } if ( ( ( nl . moderniseringgba . migratie . conversie . model . brp . attribuut . BrpSoortRelatieCode . HUWELIJK ) == soortRelatieCode ) || ( ( nl . moderniseringgba . migratie . conversie . model . brp . attribuut . BrpSoortRelatieCode . GEREGISTREERD_PARTNERSCHAP ) == soortRelatieCode ) ) { if ( relatieStapel == null ) { continue ; } } final java . util . List < nl . moderniseringgba . migratie . conversie . model . brp . BrpBetrokkenheid > betrokkenheden = new java . util . ArrayList < nl . moderniseringgba . migratie . conversie . model . brp . BrpBetrokkenheid > ( ) ; for ( final nl . moderniseringgba . migratie . synchronisatie . domein . brp . kern . entity . Betrokkenheid betrokkene : relatie . getBetrokkenheidSet ( ) ) { if ( ! ( betrokkene . getId ( ) . equals ( ikBetrokkenheid . getId ( ) ) ) ) { if ( ( ( ikBetrokkenheid . getSoortBetrokkenheid ( ) ) == ( nl . moderniseringgba . migratie . synchronisatie . domein . brp . kern . entity . SoortBetrokkenheid . OUDER ) ) && ( ( betrokkene . getSoortBetrokkenheid ( ) ) == ( nl . moderniseringgba . migratie . synchronisatie . domein . brp . kern . entity . SoortBetrokkenheid . OUDER ) ) ) { continue ; } final nl . moderniseringgba . migratie . conversie . model . brp . BrpBetrokkenheid betrokkenheid = mapBetrokkene ( ikBetrokkenheid , betrokkene , multiRealiteitSet ) ; if ( betrokkenheid == null ) { continue ; } betrokkenheden . add ( betrokkenheid ) ; } } if ( ( betrokkenheden . size ( ) ) > 0 ) { result . add ( new nl . moderniseringgba . migratie . conversie . model . brp . BrpRelatie ( soortRelatieCode , rolCode , betrokkenheden , relatieStapel ) ) ; } } return result ; }\n### UNIT_TEST\ntestVoorkomenTbvLeveringMutatie ( ) { final nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonIndicatieHistorie historie = maakPersoonIndicatieHistorie ( ) ; historie . setIndicatieVoorkomenTbvLeveringMutaties ( Boolean . TRUE ) ; final java . util . Set < nl . bzk . algemeenbrp . dal . domein . brp . entity . PersoonIndicatieHistorie > historieSet = new java . util . HashSet ( ) ; historieSet . add ( historie ) ; final nl . bzk . migratiebrp . conversie . model . brp . BrpStapel < nl . bzk . migratiebrp . conversie . model . brp . groep . BrpSignaleringMetBetrekkingTotVerstrekkenReisdocumentInhoud > result = mapper . map ( historieSet , brpOnderzoekMapper ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:map\n[UNIT_TEST]:testVoorkomenTbvLeveringMutatie\n### generate assertion\norg . junit . Assert . assertNull ( result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncontroleer ( nl . bzk . migratiebrp . synchronisatie . dal . domein . brp . kern . entity . Persoon , nl . bzk . migratiebrp . bericht . model . sync . impl . VerwerkToevalligeGebeurtenisVerzoekBericht ) { final nl . bzk . migratiebrp . bericht . model . sync . generated . PersoonType persoon = verzoek . getPersoon ( ) ; if ( persoon == null ) { return false ; } return rootPersoon . getPersoonOverlijdenHistorieSet ( ) . isEmpty ( ) ; }\n### UNIT_TEST\ntestFalseVerkeerdeVoorvoegsel ( ) { org . mockito . Mockito . when ( persoon . getVoornamen ( ) ) . thenReturn ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . VOORNAMEN ) ; org . mockito . Mockito . when ( persoon . getVoorvoegsel ( ) ) . thenReturn ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . VOORVOEGSELS ) ; org . mockito . Mockito . when ( persoon . getGeslachtsnaamstam ( ) ) . thenReturn ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . GESLACHTSNAAM ) ; org . mockito . Mockito . when ( persoon . getAdellijkeTitel ( ) ) . thenReturn ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . ADELLIJKTITEL ) ; org . mockito . Mockito . when ( persoon . getPredicaat ( ) ) . thenReturn ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . PREDICAAT ) ; final nl . bzk . migratiebrp . bericht . model . sync . impl . VerwerkToevalligeGebeurtenisVerzoekBericht verzoek = new nl . bzk . migratiebrp . bericht . model . sync . impl . VerwerkToevalligeGebeurtenisVerzoekBericht ( ) ; final nl . bzk . migratiebrp . bericht . model . sync . generated . NaamGroepType naamGroepType = new nl . bzk . migratiebrp . bericht . model . sync . generated . NaamGroepType ( ) ; naamGroepType . setVoornamen ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . VOORNAMEN ) ; naamGroepType . setVoorvoegsel ( \"den\" ) ; naamGroepType . setGeslachtsnaam ( nl . bzk . migratiebrp . synchronisatie . runtime . service . toevalligegebeurtenis . controle . persoon . GeslachtsnaamComponentenControleTest . GESLACHTSNAAM ) ; naamGroepType . setAdellijkeTitelPredicaat ( AdellijkeTitelPredicaatType . JH ) ; final nl . bzk . migratiebrp . bericht . model . sync . generated . PersoonType persoonType = new nl . bzk . migratiebrp . bericht . model . sync . generated . PersoonType ( ) ; persoonType . setNaam ( naamGroepType ) ; verzoek . setPersoon ( persoonType ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:controleer\n[UNIT_TEST]:testFalseVerkeerdeVoorvoegsel\n### generate assertion", "label": "org . junit . Assert . assertFalse ( subject . controleer ( persoon , verzoek ) )"}
{"prompt": "### METHOD_UNDER_TEST\nfindIds ( ) { new org . tests . model . cache . EColAB ( \"03\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"04\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"05\" , \"someId\" ) . save ( ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; java . util . List < java . lang . Integer > colA_first = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . Integer > colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . String > sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( colA_first ) . isSameAs ( colA_second ) ; assertThat ( colA_first ) . hasSize ( 3 ) ; assertThat ( sql ) . hasSize ( 1 ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . PUT ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( sql ) . hasSize ( 1 ) ; }\n### UNIT_TEST\ntestQuery ( ) { org . tests . model . basic . Truck truck = new org . tests . model . basic . Truck ( ) ; truck . setLicenseNumber ( \"TK123\" ) ; io . ebean . Ebean . save ( truck ) ; java . util . List < java . lang . Integer > ids = io . ebean . Ebean . find ( org . tests . model . basic . Vehicle . class ) . findIds ( ) ; \"<AssertPlaceHolder>\" ; io . ebean . Ebean . delete ( truck ) ; }\n[METHOD_UNDER_TEST]:findIds\n[UNIT_TEST]:testQuery\n### generate assertion\norg . junit . Assert . assertNotNull ( ids )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nfindAll ( com . gentics . mesh . core . data . MeshAuthUser , java . util . List , com . gentics . mesh . parameter . PagingParameters ) { com . syncleus . ferma . traversals . VertexTraversal < ? , ? , ? > traversal = user . getPermTraversal ( com . gentics . mesh . core . data . root . impl . READ_PERM ) ; return new com . gentics . mesh . core . data . page . impl . DynamicTransformablePageImpl < com . gentics . mesh . core . data . node . Node > ( user , traversal , pagingInfo , READ_PERM , com . gentics . mesh . core . data . node . impl . NodeImpl . class ) ; }\n### UNIT_TEST\ntestFindAllVisible ( ) { try ( com . syncleus . ferma . tx . Tx tx = tx ( ) ) { com . gentics . mesh . core . data . page . Page < ? extends com . gentics . mesh . core . data . schema . SchemaContainer > page = meshRoot ( ) . getSchemaContainerRoot ( ) . findAll ( mockActionContext ( ) , new com . gentics . mesh . parameter . impl . PagingParametersImpl ( 1 , 25L ) ) ; \"<AssertPlaceHolder>\" ; } }\n[METHOD_UNDER_TEST]:findAll\n[UNIT_TEST]:testFindAllVisible\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( page )"}
{"prompt": "### METHOD_UNDER_TEST\nequals ( java . lang . Object ) { if ( obj == ( this ) ) { return true ; } if ( ! ( obj instanceof org . jfree . data . xy . YWithXInterval ) ) { return false ; } org . jfree . data . xy . YWithXInterval that = ( ( org . jfree . data . xy . YWithXInterval ) ( obj ) ) ; if ( ( this . y ) != ( that . y ) ) { return false ; } if ( ( this . xLow ) != ( that . xLow ) ) { return false ; } if ( ( this . xHigh ) != ( that . xHigh ) ) { return false ; } return true ; }\n### UNIT_TEST\ntestEquals ( ) { org . jfree . data . time . Month m1 = new org . jfree . data . time . Month ( org . jfree . chart . date . MonthConstants . MAY , 2002 ) ; org . jfree . data . time . Month m2 = new org . jfree . data . time . Month ( org . jfree . chart . date . MonthConstants . MAY , 2002 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:equals\n[UNIT_TEST]:testEquals\n### generate assertion\norg . junit . Assert . assertTrue ( m1 . equals ( m2 ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nequals ( java . lang . Object ) { if ( ( this ) == o ) return true ; if ( ( o == null ) || ( ( getClass ( ) ) != ( o . getClass ( ) ) ) ) return false ; org . apache . hadoop . yarn . service . component . instance . ComponentInstanceId that = ( ( org . apache . hadoop . yarn . service . component . instance . ComponentInstanceId ) ( o ) ) ; if ( ( getId ( ) ) != ( that . getId ( ) ) ) return false ; return ( getCompName ( ) ) != null ? getCompName ( ) . equals ( that . getCompName ( ) ) : ( that . getCompName ( ) ) == null ; }\n### UNIT_TEST\ntestTwoByteTextFil ( ) { byte [ ] twoByteContents = new byte [ ] { 'x' , 'y' } ; java . lang . String output = readUsingTextCommand ( org . apache . hadoop . fs . shell . TestTextCommand . TEXT_FILENAME , twoByteContents ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:equals\n[UNIT_TEST]:testTwoByteTextFil\n### generate assertion", "label": "org . junit . Assert . assertTrue ( new java . lang . String ( twoByteContents ) . equals ( output ) )"}
{"prompt": "### METHOD_UNDER_TEST\ntoStringUnsorted ( com . splicemachine . homeless . ResultSet ) { return com . splicemachine . homeless . TestUtils . FormattedResult . ResultFactory . convert ( \"\" , rs , false ) . toString ( ) . trim ( ) ; }\n### UNIT_TEST\ntestMinusDateColumn ( ) { java . lang . String sqlText = java . lang . String . format ( \"select<sp>d<sp>+<sp>1<sp>from<sp>%s\" , com . splicemachine . derby . impl . sql . execute . operations . SimpleDateArithmeticIT . QUALIFIED_TABLE_NAME ) ; java . sql . ResultSet rs = com . splicemachine . derby . impl . sql . execute . operations . SimpleDateArithmeticIT . spliceClassWatcher . executeQuery ( sqlText ) ; java . lang . String expected = \"1<sp>|\\n\" + ( \"------------\\n\" + \"1988-12-27<sp>|\" ) ; \"<AssertPlaceHolder>\" ; rs . close ( ) ; }\n[METHOD_UNDER_TEST]:toStringUnsorted\n[UNIT_TEST]:testMinusDateColumn\n### generate assertion\norg . junit . Assert . assertEquals ( ( ( \"\\n\" + sqlText ) + \"\\n\" ) , expected , TestUtils . FormattedResult . ResultFactory . toStringUnsorted ( rs ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nformatWithServerTimeZone ( java . util . Date ) { return org . kie . workbench . common . widgets . client . util . TimeZoneUtils . FORMATTER . format ( date , org . kie . workbench . common . widgets . client . util . TimeZoneUtils . getTimeZone ( ) ) ; }\n### UNIT_TEST\ntestFormatWithServerTimeZone ( ) { final java . util . Date date = mock ( java . util . Date . class ) ; final com . google . gwt . i18n . client . TimeZone timeZone = mock ( com . google . gwt . i18n . client . TimeZone . class ) ; final java . lang . String expectedFormat = \"01-01-1900\" ; mockStatic ( org . kie . workbench . common . widgets . client . util . TimeZoneUtils . class ) ; when ( org . kie . workbench . common . widgets . client . util . TimeZoneUtils . getTimeZone ( ) ) . thenReturn ( timeZone ) ; when ( org . kie . workbench . common . widgets . client . util . TimeZoneUtils . formatWithServerTimeZone ( any ( java . util . Date . class ) ) ) . thenCallRealMethod ( ) ; when ( dateTimeFormat . format ( eq ( date ) , eq ( timeZone ) ) ) . thenReturn ( expectedFormat ) ; final java . lang . String actualFormat = org . kie . workbench . common . widgets . client . util . TimeZoneUtils . formatWithServerTimeZone ( date ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:formatWithServerTimeZone\n[UNIT_TEST]:testFormatWithServerTimeZone\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expectedFormat , actualFormat )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { if ( ( stringValue ) == null ) stringValue = decode ( com . beijunyi . parallelgit . filesystem . CHARSET , path ) ; return stringValue ; }\n### UNIT_TEST\nresolveRootPathFromAbsolutePathTest ( ) { com . beijunyi . parallelgit . filesystem . GitPath parent = gfs . getPath ( \"/parent/dir\" ) ; com . beijunyi . parallelgit . filesystem . GitPath path = parent . resolve ( \"/\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:resolveRootPathFromAbsolutePathTest\n### generate assertion\norg . junit . Assert . assertEquals ( \"/\" , path . toString ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ntoString ( ) { return ( ( getActionMemento ( ) . getNameParmsId ( ) ) + \"#\" ) + ( getNumber ( ) ) ; }\n### UNIT_TEST\ntestConcatEmptyStringLeavesBufferUnchanged ( ) { t1 . concat ( \"\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testConcatEmptyStringLeavesBufferUnchanged\n### generate assertion", "label": "org . junit . Assert . assertEquals ( name , t1 . toString ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nhasNext ( ) { return this . iterator . hasNext ( ) ; }\n### UNIT_TEST\nkeyIteratorIsEmpty ( ) { java . util . Iterator < java . lang . String > kit = this . dataset . keyIterator ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:hasNext\n[UNIT_TEST]:keyIteratorIsEmpty\n### generate assertion\norg . junit . Assert . assertFalse ( kit . hasNext ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncontainsRowWithKey ( java . lang . Object [ ] ) { java . lang . String query = null ; boolean contains = false ; if ( ( delegate ) != null ) { if ( ( delegate ) instanceof com . vaadin . v7 . data . util . sqlcontainer . query . FreeformStatementDelegate ) { try { com . vaadin . v7 . data . util . sqlcontainer . query . generator . StatementHelper sh = ( ( com . vaadin . v7 . data . util . sqlcontainer . query . FreeformStatementDelegate ) ( delegate ) ) . getContainsRowQueryStatement ( keys ) ; java . sql . PreparedStatement pstmt = null ; java . sql . ResultSet rs = null ; java . sql . Connection c = getConnection ( ) ; try { pstmt = c . prepareStatement ( sh . getQueryString ( ) ) ; sh . setParameterValuesToStatement ( pstmt ) ; rs = pstmt . executeQuery ( ) ; contains = rs . next ( ) ; return contains ; } finally { releaseConnection ( c , pstmt , rs ) ; } } catch ( java . lang . UnsupportedOperationException e ) { } } try { query = delegate . getContainsRowQueryString ( keys ) ; } catch ( java . lang . UnsupportedOperationException e ) { query = modifyWhereClause ( keys ) ; } } else { query = modifyWhereClause ( keys ) ; } java . sql . Statement statement = null ; java . sql . ResultSet rs = null ; java . sql . Connection conn = getConnection ( ) ; try { statement = conn . createStatement ( ) ; rs = statement . executeQuery ( query ) ; contains = rs . next ( ) ; } finally { releaseConnection ( conn , statement , rs ) ; } return contains ; }\n### UNIT_TEST\ncontainsRowWithKeys_existingKeys_returnsTrue ( ) { com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery tQuery = new com . vaadin . v7 . data . util . sqlcontainer . query . TableQuery ( \"people\" , connectionPool , com . vaadin . v7 . data . util . sqlcontainer . SQLTestsConstants . sqlGen ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:containsRowWithKey\n[UNIT_TEST]:containsRowWithKeys_existingKeys_returnsTrue\n### generate assertion", "label": "org . junit . Assert . assertTrue ( tQuery . containsRowWithKey ( 1 ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetTransaction ( java . lang . String , java . lang . String ) { return null ; }\n### UNIT_TEST\ntestGetTransactionsAfterRemoveInvalid ( ) { long initialTime = clock . millis ( ) ; when ( clock . millis ( ) ) . thenReturn ( initialTime , ( initialTime + 1000 ) , ( initialTime + 2000 ) ) ; org . hawkular . apm . api . model . config . txn . TransactionConfig btc1 = new org . hawkular . apm . api . model . config . txn . TransactionConfig ( ) ; btc1 . setDescription ( \"btc1\" ) ; try { cfgs . setTransaction ( null , \"btc1\" , btc1 ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( \"Failed<sp>to<sp>update<sp>btc1:<sp>\" + e ) ) ; } try { cfgs . removeTransaction ( null , \"btc1\" ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( \"Failed<sp>to<sp>remove<sp>btc1:<sp>\" + e ) ) ; } org . hawkular . apm . api . model . config . txn . TransactionConfig btc1again = cfgs . getTransaction ( null , \"btc1\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getTransaction\n[UNIT_TEST]:testGetTransactionsAfterRemoveInvalid\n### generate assertion\norg . junit . Assert . assertNull ( btc1again )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetObject ( com . sun . sgs . service . Transaction , long , boolean ) { byte [ ] result = dataStore . getObject ( txn , oid , forUpdate ) ; com . sun . sgs . profile . ProfileOperation op = ( forUpdate ) ? stats . getObjectForUpdateOp : stats . getObjectOp ; op . report ( ) ; stats . readBytesCounter . incrementCount ( result . length ) ; stats . readObjectsCounter . incrementCount ( ) ; stats . readBytesSample . addSample ( result . length ) ; return result ; }\n### UNIT_TEST\ntestSetObjectsEmptyData ( ) { long [ ] ids = new long [ ] { id } ; byte [ ] [ ] dataArray = new byte [ ] [ ] { new byte [ ] { } } ; com . sun . sgs . test . impl . service . data . store . TestDataStoreImpl . store . setObjects ( txn , ids , dataArray ) ; txn . commit ( ) ; txn = createTransaction ( UsePrepareAndCommit . ARBITRARY ) ; byte [ ] result = com . sun . sgs . test . impl . service . data . store . TestDataStoreImpl . store . getObject ( txn , id , false ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getObject\n[UNIT_TEST]:testSetObjectsEmptyData\n### generate assertion", "label": "org . junit . Assert . assertTrue ( ( ( result . length ) == 0 ) )"}
{"prompt": "### METHOD_UNDER_TEST\nadd ( E ) { ea [ last ] = event ; if ( ( ++ ( last ) ) == ( maxSize ) ) last = 0 ; if ( ( numElems ) < ( maxSize ) ) ( numElems ) ++ ; else if ( ( ++ ( first ) ) == ( maxSize ) ) first = 0 ; }\n### UNIT_TEST\ntestSimpleP2 ( ) { java . util . List < ch . qos . logback . core . pattern . parser . Token > tl = new ch . qos . logback . core . pattern . parser . TokenStream ( \"X<sp>%a<sp>%-12.550(hello<sp>%class{.4?})\" ) . tokenize ( ) ; java . util . List < ch . qos . logback . core . pattern . parser . Token > witness = new java . util . ArrayList < ch . qos . logback . core . pattern . parser . Token > ( ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . LITERAL , \"X<sp>\" ) ) ; witness . add ( Token . PERCENT_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . SIMPLE_KEYWORD , \"a\" ) ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . LITERAL , \"<sp>\" ) ) ; witness . add ( Token . PERCENT_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . FORMAT_MODIFIER , \"-12.550\" ) ) ; witness . add ( Token . BARE_COMPOSITE_KEYWORD_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . LITERAL , \"hello<sp>\" ) ) ; witness . add ( Token . PERCENT_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . SIMPLE_KEYWORD , \"class\" ) ) ; java . util . List < java . lang . String > ol = new java . util . ArrayList < java . lang . String > ( ) ; ol . add ( \".4?\" ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . OPTION , ol ) ) ; witness . add ( Token . RIGHT_PARENTHESIS_TOKEN ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:add\n[UNIT_TEST]:testSimpleP2\n### generate assertion\norg . junit . Assert . assertEquals ( witness , tl )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsetUpExperiment ( java . lang . String [ ] ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ ] traces = new org . eclipse . tracecompass . tmf . core . trace . ITmfTrace [ traceFiles . length ] ; int i = 0 ; for ( java . lang . String traceFile : traceFiles ) { org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub trace = new org . eclipse . tracecompass . analysis . os . linux . core . tests . stubs . trace . TmfXmlKernelTraceStub ( ) ; org . eclipse . core . runtime . IPath filePath = org . eclipse . tracecompass . lttng2 . kernel . core . tests . Activator . getAbsoluteFilePath ( traceFile ) ; org . eclipse . core . runtime . IStatus status = trace . validate ( null , filePath . toOSString ( ) ) ; if ( ! ( status . isOK ( ) ) ) { org . junit . Assert . fail ( status . getException ( ) . getMessage ( ) ) ; } trace . initTrace ( null , filePath . toOSString ( ) , org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class ) ; traces [ ( i ++ ) ] = trace ; } org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment experiment = new org . eclipse . tracecompass . tmf . core . trace . experiment . TmfExperiment ( org . eclipse . tracecompass . tmf . core . event . ITmfEvent . class , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . EXPERIMENT , traces , org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . BLOCK_SIZE , null ) ; experiment . traceOpened ( new org . eclipse . tracecompass . tmf . core . signal . TmfTraceOpenedSignal ( this , experiment , null ) ) ; org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule module = null ; for ( org . eclipse . tracecompass . tmf . core . analysis . IAnalysisModule mod : org . eclipse . tracecompass . tmf . core . trace . TmfTraceUtils . getAnalysisModulesOfClass ( experiment , org . eclipse . tracecompass . analysis . graph . core . building . TmfGraphBuilderModule . class ) ) { module = mod ; } org . junit . Assert . assertNotNull ( module ) ; module . schedule ( ) ; org . junit . Assert . assertTrue ( module . waitForCompletion ( ) ) ; return experiment ; }\n### UNIT_TEST\ntestNetworkExchangeOneTrace ( ) { org . eclipse . tracecompass . tmf . core . trace . ITmfTrace experiment = setUpExperiment ( \"testfiles/graph/network_exchange_wifi.xml\" ) ; \"<AssertPlaceHolder>\" ; try { org . eclipse . tracecompass . lttng2 . kernel . core . tests . analysis . graph . DistributedCriticalPathTest . internalTestNetworkExchangeOneTrace ( experiment ) ; } finally { experiment . dispose ( ) ; } }\n[METHOD_UNDER_TEST]:setUpExperiment\n[UNIT_TEST]:testNetworkExchangeOneTrace\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( experiment )"}
{"prompt": "### METHOD_UNDER_TEST\ngetCardinality ( ) { return ( ( int ) ( getLongCardinality ( ) ) ) ; }\n### UNIT_TEST\nremove ( ) { org . roaringbitmap . Container rc = new org . roaringbitmap . RunContainer ( ) ; rc . add ( ( ( short ) ( 1 ) ) ) ; org . roaringbitmap . Container newContainer = rc . remove ( 1 , 2 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getCardinality\n[UNIT_TEST]:remove\n### generate assertion\norg . junit . Assert . assertEquals ( 0 , newContainer . getCardinality ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetSecond ( ) { return value ; }\n### UNIT_TEST\ntestMaxPoolBackprop ( ) { org . nd4j . linalg . factory . Nd4j . getRandom ( ) . setSeed ( 12345 ) ; for ( int i = 0 ; i < 5 ; i ++ ) { int [ ] inputShape = new int [ ] { 1 , 1 , 4 , 3 } ; int [ ] kernel = new int [ ] { 2 , 2 } ; int [ ] strides = new int [ ] { 1 , 1 } ; int [ ] pad = new int [ ] { 0 , 0 } ; int [ ] dilation = new int [ ] { 1 , 1 } ; boolean same = true ; java . lang . String fn = \"maxpool2d_bp\" ; int nIArgs = 11 ; int [ ] a = new int [ nIArgs ] ; a [ 0 ] = kernel [ 0 ] ; a [ 1 ] = kernel [ 1 ] ; a [ 2 ] = strides [ 0 ] ; a [ 3 ] = strides [ 1 ] ; a [ 4 ] = pad [ 0 ] ; a [ 5 ] = pad [ 1 ] ; a [ 6 ] = dilation [ 0 ] ; a [ 7 ] = dilation [ 1 ] ; a [ 8 ] = ( same ) ? 1 : 0 ; a [ 10 ] = 0 ; java . util . List < org . nd4j . linalg . primitives . Pair < org . nd4j . linalg . api . ndarray . INDArray , java . lang . String > > inputs = org . nd4j . linalg . checkutil . NDArrayCreationUtil . getAll4dTestArraysWithShape ( 12345 , inputShape ) ; for ( org . nd4j . linalg . primitives . Pair < org . nd4j . linalg . api . ndarray . INDArray , java . lang . String > pIn : inputs ) { org . nd4j . linalg . api . ndarray . INDArray input = pIn . getFirst ( ) ; int [ ] outShapeHW = org . nd4j . linalg . convolution . ConvolutionTestsC . getOutputSize ( input , kernel , strides , pad , same ) ; java . util . List < org . nd4j . linalg . primitives . Pair < org . nd4j . linalg . api . ndarray . INDArray , java . lang . String > > eps = org . nd4j . linalg . checkutil . NDArrayCreationUtil . getAll4dTestArraysWithShape ( 12345 , inputShape [ 0 ] , inputShape [ 1 ] , outShapeHW [ 0 ] , outShapeHW [ 1 ] ) ; for ( org . nd4j . linalg . primitives . Pair < org . nd4j . linalg . api . ndarray . INDArray , java . lang . String > pEps : eps ) { org . nd4j . linalg . api . ndarray . INDArray epsilon = pEps . getFirst ( ) ; org . nd4j . linalg . api . ndarray . INDArray epsNext = org . nd4j . linalg . factory . Nd4j . create ( inputShape , 'c' ) ; epsilon = epsilon . dup ( 'c' ) ; org . nd4j . linalg . api . ops . DynamicCustomOp op = org . nd4j . linalg . api . ops . DynamicCustomOp . builder ( fn ) . addInputs ( input , epsilon ) . addOutputs ( epsNext ) . addIntegerArguments ( a ) . build ( ) ; org . nd4j . linalg . factory . Nd4j . getExecutioner ( ) . exec ( op ) ; org . nd4j . linalg . api . ndarray . INDArray expEpsNext = org . nd4j . linalg . convolution . ConvolutionTestsC . expGradMaxPoolBackPropSame ( input , epsilon , kernel , strides , same ) ; java . lang . String msg = ( ( \"input=\" + ( pIn . getSecond ( ) ) ) + \",<sp>eps=\" ) + ( pEps . getSecond ( ) ) ; \"<AssertPlaceHolder>\" ; } } } }\n[METHOD_UNDER_TEST]:getSecond\n[UNIT_TEST]:testMaxPoolBackprop\n### generate assertion", "label": "org . junit . Assert . assertEquals ( msg , expEpsNext , epsNext )"}
{"prompt": "### METHOD_UNDER_TEST\nor ( com . googlecode . javaewah . EWAHCompressedBitmap [ ] ) { if ( ( bitmaps . length ) == 1 ) return bitmaps [ 0 ] ; int largestSize = com . googlecode . javaewah . EWAHCompressedBitmap . calculateInitialSize ( bitmaps ) ; final com . googlecode . javaewah . EWAHCompressedBitmap container = new com . googlecode . javaewah . EWAHCompressedBitmap ( ( ( int ) ( largestSize * 1.5 ) ) ) ; com . googlecode . javaewah . EWAHCompressedBitmap . orWithContainer ( container , bitmaps ) ; return container ; }\n### UNIT_TEST\nshiftbug004 ( ) { com . googlecode . javaewah . EWAHCompressedBitmap bm1 = com . googlecode . javaewah . EWAHCompressedBitmap . bitmapOf ( 10 , 11 , 12 , 13 , 64 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm2 = bm1 . shift ( 1 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm3 = bm1 . or ( bm2 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm4 = com . googlecode . javaewah . EWAHCompressedBitmap . bitmapOf ( 10 , 11 , 12 , 13 , 14 , 64 , 65 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:or\n[UNIT_TEST]:shiftbug004\n### generate assertion\norg . junit . Assert . assertEquals ( bm3 , bm4 )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsize ( ) { return store . size ( ) ; }\n### UNIT_TEST\ntestDecodeWithLeadingLFAndXmlDecl ( ) { final java . util . ArrayList < java . lang . Object > out = new java . util . ArrayList ( ) ; new org . opendaylight . netconf . nettyutil . handler . NetconfXMLToMessageDecoder ( ) . decode ( null , io . netty . buffer . Unpooled . wrappedBuffer ( \"\\n<?xml<sp>version=\\\"1.0\\\"<sp>encoding=\\\"UTF-8\\\"?><msg/>\" . getBytes ( ) ) , out ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:testDecodeWithLeadingLFAndXmlDecl\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 1 , out . size ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ndeductFromBalanceBy ( java . math . BigDecimal ) { if ( ( amountToDeduct . compareTo ( balance ) ) > 0 ) { throw new java . lang . UnsupportedOperationException ( \"Insufficient<sp>funds.\" ) ; } balance = subtractFromBalance ( amountToDeduct ) ; }\n### UNIT_TEST\nitShouldDeductFromCustomerAccountBalance ( ) { customer . deductFromBalanceBy ( new java . math . BigDecimal ( 200 ) ) ; srp . example2 . fixed . Account expectedAccount = new srp . example2 . fixed . Account ( new java . math . BigDecimal ( 300 ) , accountHolders ) ; srp . example2 . fixed . Customer expectedCustomer = new srp . example2 . fixed . Customer ( \"srp.example2.Customer<sp>name\" , expectedAccount ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:deductFromBalanceBy\n[UNIT_TEST]:itShouldDeductFromCustomerAccountBalance\n### generate assertion\norg . junit . Assert . assertEquals ( expectedCustomer , customer )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nmakeScheduledPayments ( org . mifos . accounts . business . AccountPaymentEntity , java . util . List , org . mifos . customers . business . CustomerBO , org . mifos . accounts . productdefinition . util . helpers . SavingsType , org . mifos . framework . util . helpers . Money ) { org . mifos . application . master . business . MifosCurrency currency = payment . getAccount ( ) . getCurrency ( ) ; org . mifos . framework . util . helpers . Money amountRemaining = new org . mifos . framework . util . helpers . Money ( currency , payment . getAmount ( ) . getAmount ( ) ) ; org . mifos . framework . util . helpers . Money runningBalance = new org . mifos . framework . util . helpers . Money ( currency , savingsBalanceBeforeDeposit . getAmount ( ) ) ; final java . util . Date transactionDate = payment . getPaymentDate ( ) ; org . mifos . framework . util . helpers . Money depositAmount ; org . mifos . accounts . util . helpers . PaymentStatus paymentStatus ; if ( savingsType . getValue ( ) . equals ( SavingsType . VOLUNTARY . getValue ( ) ) ) { paymentStatus = org . mifos . accounts . util . helpers . PaymentStatus . PAID ; org . mifos . accounts . savings . business . SavingsScheduleEntity lastExpectedPayment = null ; for ( org . mifos . accounts . savings . business . SavingsScheduleEntity expectedPayment : scheduledDeposits ) { lastExpectedPayment = expectedPayment ; expectedPayment . setPaymentDetails ( new org . mifos . framework . util . helpers . Money ( currency ) , paymentStatus , new java . sql . Date ( transactionDate . getTime ( ) ) ) ; } if ( lastExpectedPayment != null ) { if ( amountRemaining . isGreaterThanOrEqual ( lastExpectedPayment . getTotalDepositDue ( ) ) ) { depositAmount = lastExpectedPayment . getTotalDepositDue ( ) ; amountRemaining = amountRemaining . subtract ( lastExpectedPayment . getTotalDepositDue ( ) ) ; } else { depositAmount = new org . mifos . framework . util . helpers . Money ( currency , amountRemaining . getAmount ( ) ) ; amountRemaining = new org . mifos . framework . util . helpers . Money ( currency ) ; } lastExpectedPayment . setPaymentDetails ( depositAmount , paymentStatus , new java . sql . Date ( transactionDate . getTime ( ) ) ) ; runningBalance = runningBalance . add ( depositAmount ) ; final org . mifos . accounts . savings . business . SavingsTrxnDetailEntity voluntaryPaymentTrxn = savingsTransactionActivityHelper . createSavingsTrxnForDeposit ( payment , depositAmount , payingCustomer , lastExpectedPayment , runningBalance ) ; payment . addAccountTrxn ( voluntaryPaymentTrxn ) ; } } else { for ( org . mifos . accounts . savings . business . SavingsScheduleEntity accountAction : scheduledDeposits ) { paymentStatus = org . mifos . accounts . util . helpers . PaymentStatus . UNPAID ; if ( amountRemaining . isGreaterThanOrEqual ( accountAction . getTotalDepositDue ( ) ) ) { depositAmount = accountAction . getTotalDepositDue ( ) ; amountRemaining = amountRemaining . subtract ( accountAction . getTotalDepositDue ( ) ) ; paymentStatus = org . mifos . accounts . util . helpers . PaymentStatus . PAID ; } else { depositAmount = new org . mifos . framework . util . helpers . Money ( currency , amountRemaining . getAmount ( ) ) ; amountRemaining = new org . mifos . framework . util . helpers . Money ( currency ) ; } accountAction . setPaymentDetails ( depositAmount , paymentStatus , new java . sql . Date ( transactionDate . getTime ( ) ) ) ; runningBalance = runningBalance . add ( depositAmount ) ; final org . mifos . accounts . savings . business . SavingsTrxnDetailEntity mandatoryScheduledPaymentTrxn = savingsTransactionActivityHelper . createSavingsTrxnForDeposit ( payment , depositAmount , payingCustomer , accountAction , runningBalance ) ; payment . addAccountTrxn ( mandatoryScheduledPaymentTrxn ) ; if ( amountRemaining . isLessThanOrEqualZero ( ) ) { return amountRemaining ; } } } return amountRemaining ; }\n### UNIT_TEST\nwhenNoUnpaidScheduledInstallmentsExistTheFullAmountOfTheDepositIsReturned ( ) { final org . mifos . framework . util . helpers . Money balanceBeforeDeposit = new org . mifos . framework . util . helpers . Money ( org . mifos . framework . TestUtils . RUPEE , \"0.0\" ) ; final org . mifos . framework . util . helpers . Money fullDepositAmount = new org . mifos . framework . util . helpers . Money ( org . mifos . framework . TestUtils . RUPEE , \"100.0\" ) ; final java . util . Date dateOfDeposit = new org . joda . time . DateTime ( ) . toDate ( ) ; final java . util . List < org . mifos . accounts . savings . business . SavingsScheduleEntity > unpaidDepositsForPayingCustomer = java . util . Arrays . asList ( ) ; when ( accountPayment . getAmount ( ) ) . thenReturn ( fullDepositAmount ) ; when ( accountPayment . getPaymentDate ( ) ) . thenReturn ( dateOfDeposit ) ; final org . mifos . framework . util . helpers . Money remainingAmount = paymentStrategy . makeScheduledPayments ( accountPayment , unpaidDepositsForPayingCustomer , payingCustomer , SavingsType . MANDATORY , balanceBeforeDeposit ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:makeScheduledPayments\n[UNIT_TEST]:whenNoUnpaidScheduledInstallmentsExistTheFullAmountOfTheDepositIsReturned\n### generate assertion", "label": "org . junit . Assert . assertThat ( remainingAmount , org . hamcrest . CoreMatchers . is ( fullDepositAmount ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetId ( ) { return this . id ; }\n### UNIT_TEST\ntestCreate ( ) { org . oscarehr . common . model . MeasurementType entity = new org . oscarehr . common . model . MeasurementType ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getId\n[UNIT_TEST]:testCreate\n### generate assertion\norg . junit . Assert . assertNotNull ( entity . getId ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetLabelID ( java . lang . String ) { addLabel ( label ) ; return labelMap . indexOf ( label ) ; }\n### UNIT_TEST\ntestGetLabelID ( ) { java . lang . String label = \"R3\" ; org . openscience . cdk . smsd . helper . LabelContainer instance = new org . openscience . cdk . smsd . helper . LabelContainer ( ) ; instance . addLabel ( label ) ; java . lang . Integer expectedValue = 2 ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getLabelID\n[UNIT_TEST]:testGetLabelID\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expectedValue , instance . getLabelID ( \"R3\" ) )"}
{"prompt": "### METHOD_UNDER_TEST\nhasNext ( ) { return this . iterator . hasNext ( ) ; }\n### UNIT_TEST\nkeyIteratorIsEmpty ( ) { java . util . Iterator < java . lang . String > kit = this . dataset . keyIterator ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:hasNext\n[UNIT_TEST]:keyIteratorIsEmpty\n### generate assertion\norg . junit . Assert . assertFalse ( kit . hasNext ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nhasWorkItems ( ) { return ( view . workItemsCount ( ) ) > 1 ; }\n### UNIT_TEST\ntestHasWorkItemsWhenItIsTrue ( ) { when ( view . workItemsCount ( ) ) . thenReturn ( 2 ) ; final boolean hasWorkItems = page . hasWorkItems ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:hasWorkItems\n[UNIT_TEST]:testHasWorkItemsWhenItIsTrue\n### generate assertion", "label": "org . junit . Assert . assertTrue ( hasWorkItems )"}
{"prompt": "### METHOD_UNDER_TEST\nisPrivate ( java . lang . String ) { return ( methodSignature != null ) && ( methodSignature . matches ( ( ( ( org . junithelper . core . util . AccessModifierDetector . RegExp . Prefix ) + \"private\" ) + ( org . junithelper . core . util . AccessModifierDetector . RegExp . Suffix ) ) ) ) ; }\n### UNIT_TEST\nisPrivate_A$String_StringIsNull ( ) { java . lang . String methodSignature = null ; boolean actual = org . junithelper . core . util . AccessModifierDetector . isPrivate ( methodSignature ) ; boolean expected = false ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isPrivate\n[UNIT_TEST]:isPrivate_A$String_StringIsNull\n### generate assertion\norg . junit . Assert . assertThat ( actual , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( expected ) ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nareDependencyTypesDetected ( java . lang . String , java . lang . String , java . util . ArrayList , boolean ) { return areDependencyTypesDetected ( classFrom , classTo , dependencyTypes , \"\" , isIndirect ) ; }\n### UNIT_TEST\nCallInstanceMethodIndirect_VarMethod ( ) { java . lang . String fromClass = \"domain.indirect.violatingfrom.CallInstanceMethodIndirect_VarMethod\" ; java . lang . String toClass = \"domain.indirect.indirectto.ServiceOne\" ; java . util . ArrayList < java . lang . String > typesToFind = new java . util . ArrayList < java . lang . String > ( ) ; typesToFind . add ( \"Call\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:areDependencyTypesDetected\n[UNIT_TEST]:CallInstanceMethodIndirect_VarMethod\n### generate assertion", "label": "org . junit . Assert . assertTrue ( areDependencyTypesDetected ( fromClass , toClass , typesToFind , true ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetInstance ( org . eclipse . rap . rwt . service . UISession ) { return ( ( org . eclipse . rap . rwt . internal . SingletonManager ) ( uiSession . getAttribute ( org . eclipse . rap . rwt . internal . SingletonManager . ATTR_SINGLETON_MANAGER ) ) ) ; }\n### UNIT_TEST\ntestGetInstance_uiSession_nullIfNotInstalled ( ) { org . eclipse . rap . rwt . internal . SingletonManager singletonManager = org . eclipse . rap . rwt . internal . SingletonManager . getInstance ( uiSession ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getInstance\n[UNIT_TEST]:testGetInstance_uiSession_nullIfNotInstalled\n### generate assertion\norg . junit . Assert . assertNull ( singletonManager )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nlogoutUser ( javax . servlet . http . HttpSession ) { org . oscm . integrationhelper . BssClient . logger . debug ( ( \"logoutUser<sp>-<sp>\" + ( session . getId ( ) ) ) ) ; if ( ( ( session . getAttribute ( Constants . SUB_KEY ) ) == null ) || ( ( session . getAttribute ( Constants . CM_ID ) ) == null ) ) { org . oscm . integrationhelper . BssClient . logger . error ( \"logoutUser<sp>-<sp>subKey<sp>or<sp>bssId<sp>missing!\" ) ; return null ; } return org . oscm . integrationhelper . BssClient . deleteServiceSession ( java . lang . Long . parseLong ( session . getAttribute ( Constants . SUB_KEY ) . toString ( ) ) , session . getAttribute ( Constants . CM_ID ) . toString ( ) ) ; }\n### UNIT_TEST\nlogoutUser_bssidNull ( ) { javax . servlet . http . HttpSession session = mock ( javax . servlet . http . HttpSession . class ) ; doReturn ( \"subid\" ) . when ( session ) . getAttribute ( eq ( Constants . SUB_KEY ) ) ; doReturn ( null ) . when ( session ) . getAttribute ( Constants . CM_ID ) ; java . lang . String string = org . oscm . integrationhelper . BssClient . logoutUser ( session ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:logoutUser\n[UNIT_TEST]:logoutUser_bssidNull\n### generate assertion", "label": "org . junit . Assert . assertNull ( string )"}
{"prompt": "### METHOD_UNDER_TEST\nfireAllRules ( ) { return 0 ; }\n### UNIT_TEST\ntestJoinLongToDouble ( ) { final java . lang . String drl1 = ( ( ( ( ( ( ( ( ( \"import<sp>\" + ( org . drools . modelcompiler . TypeCoercionTest . DoubleHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"import<sp>\" ) + ( org . drools . modelcompiler . TypeCoercionTest . LongHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"rule<sp>R<sp>when\\n\" ) + \"<sp>LongHolder(<sp>$l<sp>:<sp>value<sp>)\\n\" ) + \"<sp>DoubleHolder(<sp>value<sp>>=<sp>$l<sp>)\\n\" ) + \"then\\n\" ) + \"end\\n\" ; org . kie . api . runtime . KieSession ksession = getKieSession ( drl1 ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . LongHolder ( ) ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . DoubleHolder ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:fireAllRules\n[UNIT_TEST]:testJoinLongToDouble\n### generate assertion\norg . junit . Assert . assertEquals ( 1 , ksession . fireAllRules ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nlength ( ) { return nextFencePost ; }\n### UNIT_TEST\ntestCompressorTooLongMethod ( ) { eu . numberfour . n4js . antlr . compressor . ParserCompressorFragment2 pci = new eu . numberfour . n4js . antlr . compressor . ParserCompressorFragment2 ( ) ; java . lang . String tokenValues = loadFile ( \"TokenValues.txt\" ) ; java . util . Map < java . lang . String , java . lang . Integer > constMap = pci . createConstMap ( tokenValues ) ; java . lang . String javaContent = loadFile ( \"TooLongMethodSnippet1.txt\" ) ; java . lang . String result = pci . processCascades ( javaContent , constMap ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:length\n[UNIT_TEST]:testCompressorTooLongMethod\n### generate assertion", "label": "org . junit . Assert . assertTrue ( ( ( result . length ( ) ) < ( javaContent . length ( ) ) ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetIndexPath ( ) { return indexPath ; }\n### UNIT_TEST\ntestServerGetIndexPath ( ) { System . out . println ( \"testServerGetIndexPath\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getIndexPath\n[UNIT_TEST]:testServerGetIndexPath\n### generate assertion\norg . junit . Assert . assertEquals ( config . getIndexPath ( ) , storage . getIndexPath ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetLogManager ( ) { return logManager ; }\n### UNIT_TEST\ntestLogManagerCreation ( ) { org . jsoar . kernel . LogManager logManager = agent . getLogManager ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getLogManager\n[UNIT_TEST]:testLogManagerCreation\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( logManager )"}
{"prompt": "### METHOD_UNDER_TEST\ngetDeclaration ( ) { return null ; }\n### UNIT_TEST\ntestGetDeclaration ( ) { org . eclipse . tracecompass . ctf . core . event . types . IntegerDeclaration result = fixture . getDeclaration ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getDeclaration\n[UNIT_TEST]:testGetDeclaration\n### generate assertion\norg . junit . Assert . assertNotNull ( result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetCapturedEvents ( ) { return capturedEvents ; }\n### UNIT_TEST\ntestBuildReportChunkSuccessfull2 ( ) { imagedata . setCaption ( null ) ; instance . buildReportChunk ( ichunk , doc , true ) ; java . util . ArrayList < java . lang . Object [ ] > events = docListener . getCapturedEvents ( ) ; \"<AssertPlaceHolder>\" ; java . lang . Object [ ] event = events . get ( 0 ) ; confirmParagraphAdded ( event , \"CONTEXT:<sp>ERROR\" ) ; event = events . get ( 1 ) ; confirmParagraphAdded ( event , ( \"GROUP:<sp>\" + ( group ) ) ) ; event = events . get ( 2 ) ; confirmParagraphAdded ( event , ( \"RULE:<sp>\" + ( rule ) ) ) ; event = events . get ( 3 ) ; confirmParagraphAdded ( event , \"TAGS:<sp>'tag1'<sp>'tag2'\" ) ; event = events . get ( 4 ) ; confirmImageAdded ( event , imagedata . getURL ( ) ) ; }\n[METHOD_UNDER_TEST]:getCapturedEvents\n[UNIT_TEST]:testBuildReportChunkSuccessfull2\n### generate assertion", "label": "org . junit . Assert . assertTrue ( ( ( events . size ( ) ) == 5 ) )"}
{"prompt": "### METHOD_UNDER_TEST\nadd ( long [ ] ) { for ( long oneLong : dat ) { addLong ( oneLong ) ; } }\n### UNIT_TEST\nequalTest1 ( ) { org . roaringbitmap . Container ac = new org . roaringbitmap . ArrayContainer ( ) ; org . roaringbitmap . Container ar = new org . roaringbitmap . RunContainer ( ) ; for ( int k = 0 ; k < 100 ; ++ k ) { ac = ac . add ( ( ( short ) ( k * 10 ) ) ) ; ar = ar . add ( ( ( short ) ( k * 10 ) ) ) ; } \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:add\n[UNIT_TEST]:equalTest1\n### generate assertion\norg . junit . Assert . assertEquals ( ac , ar )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nadd ( T ) { return this . queue . offer ( data ) ; }\n### UNIT_TEST\ntest_with_random_codes ( ) { final int numCodes = org . apache . commons . lang3 . RandomUtils . nextInt ( 1 , com . navercorp . pinpoint . common . server . bo . codec . stat . header . BitCountingHeaderEncoderTest . MAX_NUM_TEST_VALUES ) ; final java . util . List < java . lang . Integer > givenCodes = new java . util . ArrayList < java . lang . Integer > ( numCodes ) ; for ( int i = 0 ; i < numCodes ; i ++ ) { givenCodes . add ( com . navercorp . pinpoint . common . server . bo . codec . stat . header . BitCountingHeaderEncoderTest . RANDOM . nextInt ( 5 ) ) ; } com . navercorp . pinpoint . common . server . bo . codec . stat . header . BitCountingHeaderEncoder encoder = new com . navercorp . pinpoint . common . server . bo . codec . stat . header . BitCountingHeaderEncoder ( ) ; for ( int i = 0 ; i < ( givenCodes . size ( ) ) ; i ++ ) { encoder . addCode ( givenCodes . get ( i ) ) ; } final byte [ ] header = encoder . getHeader ( ) ; java . util . List < java . lang . Integer > decodedCodes = new java . util . ArrayList < java . lang . Integer > ( numCodes ) ; com . navercorp . pinpoint . common . server . bo . codec . stat . header . BitCountingHeaderDecoder decoder = new com . navercorp . pinpoint . common . server . bo . codec . stat . header . BitCountingHeaderDecoder ( header ) ; for ( int i = 0 ; i < numCodes ; i ++ ) { int code = decoder . getCode ( ) ; decodedCodes . add ( code ) ; } \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:add\n[UNIT_TEST]:test_with_random_codes\n### generate assertion", "label": "org . junit . Assert . assertEquals ( givenCodes , decodedCodes )"}
{"prompt": "### METHOD_UNDER_TEST\nisGreaterOrEqual ( ) { return ( ( this ) == ( org . eclipse . n4js . semver . SemverMatcher . VersionNumberRelation . Equal ) ) || ( ( this ) == ( org . eclipse . n4js . semver . SemverMatcher . VersionNumberRelation . Greater ) ) ; }\n### UNIT_TEST\ntestNodeJsVersion ( ) { final org . eclipse . n4js . utils . process . ProcessResult result = commandFactory . checkBinaryVersionCommand ( nodeJsBinary ) . execute ( ) ; final org . eclipse . n4js . semver . Semver . VersionNumber currentVersion = semverHelper . parseVersionNumber ( result . getStdOut ( ) . trim ( ) ) ; java . lang . String msg = ( ( ( ( \"Version<sp>of<sp>node<sp>in<sp>\" + ( nodeJsBinary . getBinaryAbsolutePath ( ) ) ) + \":<sp>\" ) + currentVersion ) + \",<sp>need<sp>at<sp>least<sp>\" ) + ( org . eclipse . n4js . binaries . BinariesConstants . NODE_MIN_VERSION ) ; org . eclipse . n4js . semver . SemverMatcher . VersionNumberRelation relation = org . eclipse . n4js . semver . SemverMatcher . relation ( currentVersion , BinariesConstants . NODE_MIN_VERSION ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isGreaterOrEqual\n[UNIT_TEST]:testNodeJsVersion\n### generate assertion\norg . junit . Assert . assertTrue ( msg , relation . isGreaterOrEqual ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisEqualByComparingTo ( java . lang . String ) { return super . isEqualByComparingTo ( new java . math . BigDecimal ( expected ) ) ; }\n### UNIT_TEST\nshould_return_this ( ) { org . fest . assertions . api . ConcreteUnevenComparableAssert returned = assertions . isEqualByComparingTo ( actual ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isEqualByComparingTo\n[UNIT_TEST]:should_return_this\n### generate assertion", "label": "org . junit . Assert . assertSame ( assertions , returned )"}
{"prompt": "### METHOD_UNDER_TEST\nsize ( ) { return ( ( ( historicProcessInstanceIds . size ( ) ) + ( historicDecisionInstanceIds . size ( ) ) ) + ( historicCaseInstanceIds . size ( ) ) ) + ( historicBatchIds . size ( ) ) ; }\n### UNIT_TEST\ntestQueryByType ( ) { helper . createMigrationBatchWithSize ( 1 ) ; helper . createMigrationBatchWithSize ( 1 ) ; java . util . List < org . camunda . bpm . engine . batch . BatchStatistics > statistics = managementService . createBatchStatisticsQuery ( ) . type ( Batch . TYPE_PROCESS_INSTANCE_MIGRATION ) . list ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:testQueryByType\n### generate assertion\norg . junit . Assert . assertEquals ( 2 , statistics . size ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetMinimumChangeNumber ( ) { try { return jdbcTemplate . queryForObject ( org . sagebionetworks . repo . model . dbo . dao . DBOChangeDAOImpl . SQL_SELECT_MIN_CHANGE_NUMBER , org . sagebionetworks . repo . model . dbo . dao . Long . class ) ; } catch ( java . lang . NullPointerException e ) { return 0L ; } }\n### UNIT_TEST\ntestGetMinimumChangeNumberEmpty ( ) { long mcn = changeDAO . getMinimumChangeNumber ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getMinimumChangeNumber\n[UNIT_TEST]:testGetMinimumChangeNumberEmpty\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 0L , mcn )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFaults ( ) { return _faults . toArray ( new com . persistit . IntegrityCheck . Fault [ _faults . size ( ) ] ) ; }\n### UNIT_TEST\ntestBrokenMVVs ( ) { final com . persistit . Exchange ex = _persistit . getExchange ( _volumeName , \"mvv\" , true ) ; disableBackgroundCleanup ( ) ; transactionalStore ( ex ) ; corrupt2 ( ex ) ; final com . persistit . IntegrityCheck icheck = icheck ( ) ; icheck . checkTree ( ex . getTree ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFaults\n[UNIT_TEST]:testBrokenMVVs\n### generate assertion\norg . junit . Assert . assertTrue ( ( ( icheck . getFaults ( ) . length ) > 0 ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nchecksumCRC32 ( org . pentaho . di . core . row . ValueMetaInterface , java . lang . Object , boolean ) { long checksum = 0 ; if ( dataA == null ) { return checksum ; } org . apache . commons . vfs2 . FileObject file = null ; java . util . zip . CheckedInputStream cis = null ; try { file = org . pentaho . di . core . vfs . KettleVFS . getFileObject ( dataA . toString ( ) ) ; org . pentaho . di . core . row . ValueDataUtil . throwsErrorOnFileNotFound ( file ) ; cis = null ; cis = new java . util . zip . CheckedInputStream ( org . pentaho . di . core . vfs . KettleVFS . getInputStream ( file ) , new java . util . zip . CRC32 ( ) ) ; byte [ ] buf = new byte [ 128 ] ; int readSize = 0 ; do { readSize = cis . read ( buf ) ; } while ( readSize >= 0 ) ; checksum = cis . getChecksum ( ) . getValue ( ) ; } catch ( org . pentaho . di . core . exception . KettleFileNotFoundException e ) { if ( failIfNoFile ) { throw e ; } org . pentaho . di . core . row . ValueDataUtil . log . debug ( e . getMessage ( ) ) ; } catch ( java . lang . Exception e ) { org . pentaho . di . core . row . ValueDataUtil . log . debug ( e . getMessage ( ) ) ; } finally { org . apache . commons . io . IOUtils . closeQuietly ( file ) ; org . apache . commons . io . IOUtils . closeQuietly ( cis ) ; } return checksum ; }\n### UNIT_TEST\nchecksumCRC32NullPathNoFailTest ( ) { long checksum = org . pentaho . di . core . row . ValueDataUtil . checksumCRC32 ( new org . pentaho . di . core . row . value . ValueMetaString ( ) , null , false ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:checksumCRC32\n[UNIT_TEST]:checksumCRC32NullPathNoFailTest\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 0 , checksum )"}
{"prompt": "### METHOD_UNDER_TEST\ngetPersonVoided ( ) { return personVoided ; }\n### UNIT_TEST\nvoidPatient_shouldVoidPerson ( ) { org . openmrs . Patient patient = org . openmrs . api . PatientServiceTest . patientService . getPatient ( 2 ) ; org . openmrs . api . PatientServiceTest . patientService . voidPatient ( patient , \"reason\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getPersonVoided\n[UNIT_TEST]:voidPatient_shouldVoidPerson\n### generate assertion\norg . junit . Assert . assertTrue ( patient . getPersonVoided ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisValidToExecute ( uk . gov . gchq . gaffer . user . User ) { return ( isPublic ) || ( ( null != user ) && ( ( isAddingUser ( user ) ) || ( ( ! ( isAuthsNullOrEmpty ( ) ) ) && ( isUserHasASharedAuth ( user ) ) ) ) ) ; }\n### UNIT_TEST\nshouldNeverValidateNullUserIV ( ) { final uk . gov . gchq . gaffer . federatedstore . FederatedAccess access = new uk . gov . gchq . gaffer . federatedstore . FederatedAccess . Builder ( ) . addingUserId ( null ) . build ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isValidToExecute\n[UNIT_TEST]:shouldNeverValidateNullUserIV\n### generate assertion", "label": "org . junit . Assert . assertFalse ( access . isValidToExecute ( null ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFirstName ( ) { return firstName ; }\n### UNIT_TEST\ntestFieldValueOverwritten ( ) { final org . hyalinedto . test . domainclasses . Person dto = org . hyalinedto . api . Hyaline . dtoFromScratch ( john , new org . hyalinedto . api . DTO ( ) { @ org . hyalinedto . test . api . SuppressWarnings ( \"unused\" ) private java . lang . String firstName = \"Ringo\" ; } ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFirstName\n[UNIT_TEST]:testFieldValueOverwritten\n### generate assertion\norg . junit . Assert . assertEquals ( \"Ringo\" , dto . getFirstName ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetXAttrName ( ) { return getValue ( ) ; }\n### UNIT_TEST\ntestXAttrNameParam ( ) { final org . apache . hadoop . hdfs . web . resources . XAttrNameParam p = new org . apache . hadoop . hdfs . web . resources . XAttrNameParam ( \"user.a1\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getXAttrName\n[UNIT_TEST]:testXAttrNameParam\n### generate assertion", "label": "org . junit . Assert . assertEquals ( p . getXAttrName ( ) , \"user.a1\" )"}
{"prompt": "### METHOD_UNDER_TEST\nfindIds ( ) { new org . tests . model . cache . EColAB ( \"03\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"04\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"05\" , \"someId\" ) . save ( ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; java . util . List < java . lang . Integer > colA_first = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . Integer > colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . String > sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( colA_first ) . isSameAs ( colA_second ) ; assertThat ( colA_first ) . hasSize ( 3 ) ; assertThat ( sql ) . hasSize ( 1 ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . PUT ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( sql ) . hasSize ( 1 ) ; }\n### UNIT_TEST\ntestQuery ( ) { org . tests . model . basic . Truck truck = new org . tests . model . basic . Truck ( ) ; truck . setLicenseNumber ( \"TK123\" ) ; io . ebean . Ebean . save ( truck ) ; java . util . List < java . lang . Integer > ids = io . ebean . Ebean . find ( org . tests . model . basic . Vehicle . class ) . findIds ( ) ; \"<AssertPlaceHolder>\" ; io . ebean . Ebean . delete ( truck ) ; }\n[METHOD_UNDER_TEST]:findIds\n[UNIT_TEST]:testQuery\n### generate assertion\norg . junit . Assert . assertNotNull ( ids )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nfindWaitingListsAndDemographics ( java . lang . Integer ) { javax . persistence . Query query = entityManager . createQuery ( \"FROM<sp>WaitingList<sp>w,<sp>Demographic<sp>d<sp>WHERE<sp>w.demographicNo<sp>=<sp>d.DemographicNo<sp>AND<sp>w.listId<sp>=<sp>:listId<sp>AND<sp>w.isHistory<sp>=<sp>'N'<sp>ORDER<sp>BY<sp>w.position\" ) ; query . setParameter ( \"listId\" , listId ) ; return query . getResultList ( ) ; }\n### UNIT_TEST\ntestFindWaitingListsAndDemographics ( ) { java . util . List < java . lang . Object [ ] > results = dao . findWaitingListsAndDemographics ( 1 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:findWaitingListsAndDemographics\n[UNIT_TEST]:testFindWaitingListsAndDemographics\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( results )"}
{"prompt": "### METHOD_UNDER_TEST\nadd ( E ) { ea [ last ] = event ; if ( ( ++ ( last ) ) == ( maxSize ) ) last = 0 ; if ( ( numElems ) < ( maxSize ) ) ( numElems ) ++ ; else if ( ( ++ ( first ) ) == ( maxSize ) ) first = 0 ; }\n### UNIT_TEST\ntestSimpleP2 ( ) { java . util . List < ch . qos . logback . core . pattern . parser . Token > tl = new ch . qos . logback . core . pattern . parser . TokenStream ( \"X<sp>%a<sp>%-12.550(hello<sp>%class{.4?})\" ) . tokenize ( ) ; java . util . List < ch . qos . logback . core . pattern . parser . Token > witness = new java . util . ArrayList < ch . qos . logback . core . pattern . parser . Token > ( ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . LITERAL , \"X<sp>\" ) ) ; witness . add ( Token . PERCENT_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . SIMPLE_KEYWORD , \"a\" ) ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . LITERAL , \"<sp>\" ) ) ; witness . add ( Token . PERCENT_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . FORMAT_MODIFIER , \"-12.550\" ) ) ; witness . add ( Token . BARE_COMPOSITE_KEYWORD_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . LITERAL , \"hello<sp>\" ) ) ; witness . add ( Token . PERCENT_TOKEN ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . SIMPLE_KEYWORD , \"class\" ) ) ; java . util . List < java . lang . String > ol = new java . util . ArrayList < java . lang . String > ( ) ; ol . add ( \".4?\" ) ; witness . add ( new ch . qos . logback . core . pattern . parser . Token ( Token . OPTION , ol ) ) ; witness . add ( Token . RIGHT_PARENTHESIS_TOKEN ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:add\n[UNIT_TEST]:testSimpleP2\n### generate assertion\norg . junit . Assert . assertEquals ( witness , tl )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\npulseCount ( ) { return count ; }\n### UNIT_TEST\ncountIs2AfterAdding2Pulses ( ) { pulseLengthAnalyzer . addPulse ( 10.0 , false ) ; pulseLengthAnalyzer . addPulse ( 10.0 , true ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:pulseCount\n[UNIT_TEST]:countIs2AfterAdding2Pulses\n### generate assertion", "label": "org . junit . Assert . assertThat ( pulseLengthAnalyzer . pulseCount ( ) , org . hamcrest . core . Is . is ( 2 ) )"}
{"prompt": "### METHOD_UNDER_TEST\nor ( com . googlecode . javaewah . EWAHCompressedBitmap [ ] ) { if ( ( bitmaps . length ) == 1 ) return bitmaps [ 0 ] ; int largestSize = com . googlecode . javaewah . EWAHCompressedBitmap . calculateInitialSize ( bitmaps ) ; final com . googlecode . javaewah . EWAHCompressedBitmap container = new com . googlecode . javaewah . EWAHCompressedBitmap ( ( ( int ) ( largestSize * 1.5 ) ) ) ; com . googlecode . javaewah . EWAHCompressedBitmap . orWithContainer ( container , bitmaps ) ; return container ; }\n### UNIT_TEST\nshiftbug004 ( ) { com . googlecode . javaewah . EWAHCompressedBitmap bm1 = com . googlecode . javaewah . EWAHCompressedBitmap . bitmapOf ( 10 , 11 , 12 , 13 , 64 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm2 = bm1 . shift ( 1 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm3 = bm1 . or ( bm2 ) ; com . googlecode . javaewah . EWAHCompressedBitmap bm4 = com . googlecode . javaewah . EWAHCompressedBitmap . bitmapOf ( 10 , 11 , 12 , 13 , 14 , 64 , 65 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:or\n[UNIT_TEST]:shiftbug004\n### generate assertion\norg . junit . Assert . assertEquals ( bm3 , bm4 )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsize ( ) { return this . cells . size ( ) ; }\n### UNIT_TEST\nRgroupSymbolY ( ) { org . openscience . cdk . renderer . generators . standard . AtomSymbol atomSymbol = atomGenerator . generatePseudoSymbol ( \"Y1a2\" , HydrogenPosition . Right ) ; java . util . List < java . awt . Shape > shapes = atomSymbol . getOutlines ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:RgroupSymbolY\n### generate assertion", "label": "org . junit . Assert . assertThat ( shapes . size ( ) , org . hamcrest . CoreMatchers . is ( 1 ) )"}
{"prompt": "### METHOD_UNDER_TEST\nfireAllRules ( ) { return 0 ; }\n### UNIT_TEST\ntestJoinLongToDouble ( ) { final java . lang . String drl1 = ( ( ( ( ( ( ( ( ( \"import<sp>\" + ( org . drools . modelcompiler . TypeCoercionTest . DoubleHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"import<sp>\" ) + ( org . drools . modelcompiler . TypeCoercionTest . LongHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"rule<sp>R<sp>when\\n\" ) + \"<sp>LongHolder(<sp>$l<sp>:<sp>value<sp>)\\n\" ) + \"<sp>DoubleHolder(<sp>value<sp>>=<sp>$l<sp>)\\n\" ) + \"then\\n\" ) + \"end\\n\" ; org . kie . api . runtime . KieSession ksession = getKieSession ( drl1 ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . LongHolder ( ) ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . DoubleHolder ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:fireAllRules\n[UNIT_TEST]:testJoinLongToDouble\n### generate assertion\norg . junit . Assert . assertEquals ( 1 , ksession . fireAllRules ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\napply ( T1 , T2 , T3 , T4 , T5 ) { return new com . m3 . scalaflavor4j . Tuple5 < T1 , T2 , T3 , T4 , T5 > ( _1 , _2 , _3 , _4 , _5 ) ; }\n### UNIT_TEST\n__A$VoidFunction1_emptyGenerator ( ) { com . m3 . scalaflavor4j . CollectionLike < java . lang . String > xs1 = com . m3 . scalaflavor4j . Seq . apply ( \"a\" , \"b\" ) ; com . m3 . scalaflavor4j . CollectionLike < java . lang . Integer > xs2 = com . m3 . scalaflavor4j . Seq . apply ( 1 , 2 , 3 , 4 , 5 ) ; com . m3 . scalaflavor4j . CollectionLike < java . lang . Long > xs3 = com . m3 . scalaflavor4j . Seq . apply ( ) ; final com . m3 . scalaflavor4j . ForComprehension3Test . Called c = new com . m3 . scalaflavor4j . ForComprehension3Test . Called ( ) ; com . m3 . scalaflavor4j . For . apply ( xs1 , xs2 , xs3 ) . apply ( new com . m3 . scalaflavor4j . VoidF1 < com . m3 . scalaflavor4j . Tuple3 < java . lang . String , java . lang . Integer , java . lang . Long > > ( ) { public void apply ( com . m3 . scalaflavor4j . Tuple3 < java . lang . String , java . lang . Integer , java . lang . Long > t ) { ( c . count ) ++ ; } } ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:apply\n[UNIT_TEST]:__A$VoidFunction1_emptyGenerator\n### generate assertion", "label": "org . junit . Assert . assertThat ( c . count , org . hamcrest . CoreMatchers . is ( org . hamcrest . CoreMatchers . equalTo ( 0 ) ) )"}
{"prompt": "### METHOD_UNDER_TEST\napi ( com . sendgrid . Request ) { com . sendgrid . Request req = new com . sendgrid . Request ( ) ; req . setMethod ( request . getMethod ( ) ) ; req . setBaseUri ( this . host ) ; req . setEndpoint ( ( ( ( \"/\" + ( version ) ) + \"/\" ) + ( request . getEndpoint ( ) ) ) ) ; req . setBody ( request . getBody ( ) ) ; for ( Map . Entry < java . lang . String , java . lang . String > header : this . requestHeaders . entrySet ( ) ) { req . addHeader ( header . getKey ( ) , header . getValue ( ) ) ; } for ( Map . Entry < java . lang . String , java . lang . String > queryParam : request . getQueryParams ( ) . entrySet ( ) ) { req . addQueryParam ( queryParam . getKey ( ) , queryParam . getValue ( ) ) ; } return makeCall ( req ) ; }\n### UNIT_TEST\ntest_senders_get ( ) { com . sendgrid . SendGrid sg = new com . sendgrid . SendGrid ( \"SENDGRID_API_KEY\" , true ) ; sg . setHost ( \"localhost:4010\" ) ; sg . addRequestHeader ( \"X-Mock\" , \"200\" ) ; com . sendgrid . Request request = new com . sendgrid . Request ( ) ; request . setMethod ( Method . GET ) ; request . setEndpoint ( \"senders\" ) ; com . sendgrid . Response response = sg . api ( request ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:api\n[UNIT_TEST]:test_senders_get\n### generate assertion\norg . junit . Assert . assertEquals ( 200 , response . getStatusCode ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nconnect ( org . jsoup . helper . URL ) { org . jsoup . helper . Connection con = new org . jsoup . helper . HttpConnection ( ) ; con . url ( url ) ; return con ; }\n### UNIT_TEST\ntimeout ( ) { org . jsoup . Connection con = org . jsoup . helper . HttpConnection . connect ( \"http://example.com/\" ) ; con . timeout ( 1000 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:connect\n[UNIT_TEST]:timeout\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 1000 , con . request ( ) . timeout ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nfromYml ( java . lang . String , java . lang . reflect . Type ) { java . util . Map result = com . flow . platform . yml . parser . YmlParser . ymlToMap ( str ) ; return com . flow . platform . yml . parser . YmlParser . fromObject ( result . get ( \"flow\" ) , typeOfT ) ; }\n### UNIT_TEST\nshould_required ( ) { java . lang . String demo = loadDemoFlowYaml ( \"demo-yml.yaml\" ) ; try { com . flow . platform . yml . parser . test . domain . FlowTestRequired [ ] flows = com . flow . platform . yml . parser . YmlParser . fromYml ( demo , com . flow . platform . yml . parser . test . domain . FlowTestRequired [ ] . class ) ; } catch ( com . flow . platform . yml . parser . exception . YmlParseException e ) { \"<AssertPlaceHolder>\" ; } }\n[METHOD_UNDER_TEST]:fromYml\n[UNIT_TEST]:should_required\n### generate assertion\norg . junit . Assert . assertEquals ( com . flow . platform . yml . parser . exception . YmlParseException . class , e . getClass ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ninvoke ( javax . xml . transform . dom . DOMSource ) { java . lang . Thread . currentThread ( ) . setName ( \"Stuf<sp>bericht<sp>vertaler<sp>ontvanger\" ) ; nl . bzk . brp . delivery . stuf . StufWebService . LOGGER . debug ( \"Stuf<sp>bericht<sp>vertaler<sp>ontvanger<sp>aangeroepen\" ) ; nl . bzk . brp . domain . leveringmodel . persoon . BrpNu . set ( nl . bzk . algemeenbrp . util . common . DatumUtil . nuAlsZonedDateTime ( ) ) ; try { schemaValidatorService . valideer ( request , nl . bzk . brp . delivery . stuf . StufWebService . SCHEMA ) ; } catch ( nl . bzk . brp . service . algemeen . request . SchemaValidatorService schemaValidatieException ) { nl . bzk . brp . delivery . stuf . StufWebService . LOGGER . debug ( \"Stuf<sp>bericht<sp>vertaler<sp>ontvanger<sp>aangeroepen<sp>met<sp>invalide<sp>xml\" , schemaValidatieException ) ; throw new org . apache . cxf . interceptor . Fault ( schemaValidatieException . getCause ( ) ) ; } return nl . bzk . brp . service . algemeen . AlgemeneFoutHandler . doeBijFout ( ( e ) -> { nl . bzk . brp . delivery . stuf . StufWebService . LOGGER . error ( \"Algemene<sp>fout\" , e ) ; throw new javax . xml . ws . WebServiceException ( \"Er<sp>is<sp>iets<sp>fout<sp>gegaan<sp>bij<sp>het<sp>verwerken<sp>van<sp>het<sp>stuf<sp>vertaal<sp>verzoek.\" ) ; } ) . voerUit ( ( ) -> maakResponse ( request ) ) ; }\n### UNIT_TEST\ntestIsBijhoudingActueel_Lo3Historie ( ) { onderzoek . setVoortgekomenUitNietActueelVoorkomen ( true ) ; nl . bzk . migratiebrp . synchronisatie . dal . service . impl . delta . proces . OnderzoekPaar paar = new nl . bzk . migratiebrp . synchronisatie . dal . service . impl . delta . proces . OnderzoekPaar ( onderzoek , null ) ; final java . lang . reflect . Method testMethod = nl . bzk . migratiebrp . synchronisatie . dal . service . impl . delta . proces . OnderzoekPaar . class . getDeclaredMethod ( \"isBijhoudingActueel\" ) ; testMethod . setAccessible ( true ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:invoke\n[UNIT_TEST]:testIsBijhoudingActueel_Lo3Historie\n### generate assertion", "label": "org . junit . Assert . assertFalse ( ( ( boolean ) ( testMethod . invoke ( paar ) ) ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFirstName ( ) { return firstName ; }\n### UNIT_TEST\ntestFieldValueOverwritten ( ) { final org . hyalinedto . test . domainclasses . Person dto = org . hyalinedto . api . Hyaline . dtoFromScratch ( john , new org . hyalinedto . api . DTO ( ) { @ org . hyalinedto . test . api . SuppressWarnings ( \"unused\" ) private java . lang . String firstName = \"Ringo\" ; } ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFirstName\n[UNIT_TEST]:testFieldValueOverwritten\n### generate assertion\norg . junit . Assert . assertEquals ( \"Ringo\" , dto . getFirstName ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetDOMRESBY ( ) { return \"<-:\" ; }\n### UNIT_TEST\ntestGetDOMRESBY ( ) { java . lang . String actual = table . getDOMRESBY ( ) ; java . lang . String expected = \"<-:\" ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getDOMRESBY\n[UNIT_TEST]:testGetDOMRESBY\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expected , actual )"}
{"prompt": "### METHOD_UNDER_TEST\ngetObject ( ) { return object ; }\n### UNIT_TEST\ncreateProducerWithDefaultMetadata ( ) { final org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > producerMetadata = new org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > ( \"test\" ) ; final org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > tm = org . mockito . Mockito . spy ( producerMetadata ) ; final org . springframework . integration . kafka . support . ProducerFactoryBean < byte [ ] , byte [ ] > producerFactoryBean = new org . springframework . integration . kafka . support . ProducerFactoryBean < byte [ ] , byte [ ] > ( tm , \"localhost:9092\" ) ; final kafka . javaapi . producer . Producer < byte [ ] , byte [ ] > producer = producerFactoryBean . getObject ( ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getPartitioner ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getCompressionCodec ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getValueEncoder ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getKeyEncoder ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . isAsync ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 0 ) ) . getBatchNumMessages ( ) ; }\n[METHOD_UNDER_TEST]:getObject\n[UNIT_TEST]:createProducerWithDefaultMetadata\n### generate assertion\norg . junit . Assert . assertTrue ( ( producer != null ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncreateSnakeCase ( ) { return new com . google . gson . GsonBuilder ( ) . setFieldNamingPolicy ( FieldNamingPolicy . LOWER_CASE_WITH_UNDERSCORES ) . registerTypeAdapter ( com . github . seratch . jslack . api . model . block . LayoutBlock . class , new com . github . seratch . jslack . common . json . GsonLayoutBlockFactory ( ) ) . registerTypeAdapter ( com . github . seratch . jslack . api . model . block . composition . TextObject . class , new com . github . seratch . jslack . common . json . GsonTextObjectFactory ( ) ) . registerTypeAdapter ( com . github . seratch . jslack . api . model . block . ContextBlockElement . class , new com . github . seratch . jslack . common . json . GsonContextBlockElementFactory ( ) ) . registerTypeAdapter ( com . github . seratch . jslack . api . model . block . element . BlockElement . class , new com . github . seratch . jslack . common . json . GsonBlockElementFactory ( ) ) . create ( ) ; }\n### UNIT_TEST\nserialize ( ) { com . google . gson . Gson gson = com . github . seratch . jslack . common . json . GsonFactory . createSnakeCase ( ) ; com . github . seratch . jslack . api . model . event . ChannelRenameEvent event = new com . github . seratch . jslack . api . model . event . ChannelRenameEvent ( ) ; event . setChannel ( new com . github . seratch . jslack . api . model . event . ChannelRenameEvent . Channel ( ) ) ; event . getChannel ( ) . setName ( \"foo\" ) ; java . lang . String generatedJson = gson . toJson ( event ) ; java . lang . String expectedJson = \"{\\\"type\\\":\\\"channel_rename\\\",\\\"channel\\\":{\\\"name\\\":\\\"foo\\\"}}\" ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:createSnakeCase\n[UNIT_TEST]:serialize\n### generate assertion", "label": "org . junit . Assert . assertThat ( generatedJson , org . hamcrest . CoreMatchers . is ( expectedJson ) )"}
{"prompt": "### METHOD_UNDER_TEST\nget ( org . spf4j . base . Tag ) { java . lang . Object res = baggage . get ( key ) ; if ( res == null ) { if ( ( source ) != null ) { return source . get ( key ) ; } else { return null ; } } else { return ( ( T ) ( res ) ) ; } }\n### UNIT_TEST\ntestConverterAvroArray ( ) { org . spf4j . jmx . JMXBeanMapping mxBeanMapping2 = conv . get ( org . spf4j . tsdb2 . avro . TableDef [ ] . class ) ; \"<AssertPlaceHolder>\" ; org . spf4j . tsdb2 . avro . TableDef [ ] defs = new org . spf4j . tsdb2 . avro . TableDef [ ] { org . spf4j . tsdb2 . avro . TableDef . newBuilder ( ) . setId ( 4 ) . setDescription ( \"bla\" ) . setName ( \"name\" ) . setSampleTime ( 10 ) . setColumns ( java . util . Collections . singletonList ( org . spf4j . tsdb2 . avro . ColumnDef . newBuilder ( ) . setName ( \"bla\" ) . setType ( Type . LONG ) . setDescription ( \"bla\" ) . setUnitOfMeasurement ( \"um\" ) . build ( ) ) ) . build ( ) } ; java . lang . Object toOpenValue = mxBeanMapping2 . toOpenValue ( defs ) ; org . spf4j . jmx . OpenTypeConverterTest . LOG . debug ( \"Open<sp>value<sp>{}<sp>from<sp>{}\" , toOpenValue , defs ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:testConverterAvroArray\n### generate assertion\norg . junit . Assert . assertNotNull ( mxBeanMapping2 )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetAsString ( javax . faces . context . FacesContext , javax . faces . component . UIComponent , java . lang . Object ) { java . lang . String retVal ; if ( ! ( object instanceof org . oscm . internal . vo . VOPaymentInfo ) ) { retVal = \"\" ; } else { retVal = java . lang . String . valueOf ( ( ( org . oscm . internal . vo . VOPaymentInfo ) ( object ) ) . getKey ( ) ) ; } return retVal ; }\n### UNIT_TEST\ntestGetAsStringOneChar ( ) { java . lang . String in = \"x\" ; java . lang . String out = converter . getAsString ( context , component , in ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getAsString\n[UNIT_TEST]:testGetAsStringOneChar\n### generate assertion", "label": "org . junit . Assert . assertEquals ( in , out )"}
{"prompt": "### METHOD_UNDER_TEST\nget ( org . spf4j . base . Tag ) { java . lang . Object res = baggage . get ( key ) ; if ( res == null ) { if ( ( source ) != null ) { return source . get ( key ) ; } else { return null ; } } else { return ( ( T ) ( res ) ) ; } }\n### UNIT_TEST\ntestConverterAvroArray ( ) { org . spf4j . jmx . JMXBeanMapping mxBeanMapping2 = conv . get ( org . spf4j . tsdb2 . avro . TableDef [ ] . class ) ; \"<AssertPlaceHolder>\" ; org . spf4j . tsdb2 . avro . TableDef [ ] defs = new org . spf4j . tsdb2 . avro . TableDef [ ] { org . spf4j . tsdb2 . avro . TableDef . newBuilder ( ) . setId ( 4 ) . setDescription ( \"bla\" ) . setName ( \"name\" ) . setSampleTime ( 10 ) . setColumns ( java . util . Collections . singletonList ( org . spf4j . tsdb2 . avro . ColumnDef . newBuilder ( ) . setName ( \"bla\" ) . setType ( Type . LONG ) . setDescription ( \"bla\" ) . setUnitOfMeasurement ( \"um\" ) . build ( ) ) ) . build ( ) } ; java . lang . Object toOpenValue = mxBeanMapping2 . toOpenValue ( defs ) ; org . spf4j . jmx . OpenTypeConverterTest . LOG . debug ( \"Open<sp>value<sp>{}<sp>from<sp>{}\" , toOpenValue , defs ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:testConverterAvroArray\n### generate assertion\norg . junit . Assert . assertNotNull ( mxBeanMapping2 )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetTags ( ) { return tags ; }\n### UNIT_TEST\ntestTaggedMetricsNull ( ) { final com . github . sps . metrics . Map < java . lang . String , java . lang . String > tags = null ; com . github . sps . metrics . TaggedGauge < java . lang . Integer > gauge = new com . github . sps . metrics . TaggedGauge < java . lang . Integer > ( ) { @ com . github . sps . metrics . Override public com . github . sps . metrics . Integer getValue ( ) { return 1 ; } @ com . github . sps . metrics . Override public com . github . sps . metrics . Map < java . lang . String , java . lang . String > getTags ( ) { return tags ; } } ; final com . github . sps . metrics . TaggedCounter counter = new com . github . sps . metrics . TaggedCounter ( tags ) ; final com . github . sps . metrics . TaggedHistogram histogram = mock ( com . github . sps . metrics . TaggedHistogram . class ) ; when ( histogram . getCount ( ) ) . thenReturn ( 1L ) ; when ( histogram . getTags ( ) ) . thenReturn ( tags ) ; final com . github . sps . metrics . Snapshot snapshot = mock ( com . github . sps . metrics . Snapshot . class ) ; when ( snapshot . getMax ( ) ) . thenReturn ( 2L ) ; when ( snapshot . getMean ( ) ) . thenReturn ( 3.0 ) ; when ( snapshot . getMin ( ) ) . thenReturn ( 4L ) ; when ( snapshot . getStdDev ( ) ) . thenReturn ( 5.0 ) ; when ( snapshot . getMedian ( ) ) . thenReturn ( 6.0 ) ; when ( snapshot . get75thPercentile ( ) ) . thenReturn ( 7.0 ) ; when ( snapshot . get95thPercentile ( ) ) . thenReturn ( 8.0 ) ; when ( snapshot . get98thPercentile ( ) ) . thenReturn ( 9.0 ) ; when ( snapshot . get99thPercentile ( ) ) . thenReturn ( 10.0 ) ; when ( snapshot . get999thPercentile ( ) ) . thenReturn ( 11.0 ) ; when ( histogram . getSnapshot ( ) ) . thenReturn ( snapshot ) ; final com . github . sps . metrics . TaggedMeter meter = new com . github . sps . metrics . TaggedMeter ( tags ) ; final com . github . sps . metrics . TaggedTimer timer = new com . github . sps . metrics . TaggedTimer ( tags ) ; com . github . sps . metrics . SortedMap < java . lang . String , com . github . sps . metrics . Gauge > gauges = new com . github . sps . metrics . TreeMap < java . lang . String , com . github . sps . metrics . Gauge > ( ) ; gauges . put ( \"gauge\" , gauge ) ; reporter . report ( gauges , this . < com . github . sps . metrics . Counter > map ( \"counter\" , counter ) , this . < com . github . sps . metrics . Histogram > map ( \"histogram\" , histogram ) , this . < com . github . sps . metrics . Meter > map ( \"meter\" , meter ) , this . < com . codahale . metrics . Timer > map ( \"timer\" , timer ) ) ; verify ( opentsdb ) . send ( captor . capture ( ) ) ; final com . github . sps . metrics . Set < com . github . sps . metrics . opentsdb . OpenTsdbMetric > metrics = captor . getValue ( ) ; final com . github . sps . metrics . Map < java . lang . String , java . lang . String > expectedTags = new com . github . sps . metrics . HashMap < java . lang . String , java . lang . String > ( ) ; expectedTags . put ( \"foo\" , \"bar\" ) ; for ( com . github . sps . metrics . opentsdb . OpenTsdbMetric metric : metrics ) { \"<AssertPlaceHolder>\" ; } }\n[METHOD_UNDER_TEST]:getTags\n[UNIT_TEST]:testTaggedMetricsNull\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expectedTags , metric . getTags ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nneedUpgrade ( ) { int appliedTasks = repository . countUpgradeTask ( org . talend . dataprep . upgrade . VERSION . name ( ) ) ; int availableTasks = ( ( int ) ( tasks . stream ( ) . filter ( ( task ) -> java . util . Objects . equals ( task . getTarget ( ) , org . talend . dataprep . upgrade . VERSION ) ) . count ( ) ) ) ; if ( appliedTasks > availableTasks ) { org . talend . dataprep . upgrade . UpgradeService . LOG . warn ( \"It<sp>seems<sp>that<sp>more<sp>upgrade<sp>tasks<sp>have<sp>been<sp>applied<sp>than<sp>the<sp>available<sp>ones.\" ) ; return true ; } else if ( appliedTasks == availableTasks ) { return false ; } else { return true ; } }\n### UNIT_TEST\nshouldNotAllowUpgrade ( ) { when ( repository . countUpgradeTask ( anyString ( ) ) ) . thenReturn ( 1 ) ; final org . talend . dataprep . upgrade . model . UpgradeTask upgradeTask = mock ( org . talend . dataprep . upgrade . model . UpgradeTask . class ) ; when ( upgradeTask . getTarget ( ) ) . thenReturn ( org . talend . dataprep . upgrade . VERSION ) ; service . setTasks ( java . util . Collections . singletonList ( upgradeTask ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:needUpgrade\n[UNIT_TEST]:shouldNotAllowUpgrade\n### generate assertion\norg . junit . Assert . assertFalse ( service . needUpgrade ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisProjectDisabled ( fr . norad . visuwall . api . domain . SoftwareProjectId ) { checkConnected ( ) ; checkSoftwareProjectId ( softwareProjectId ) ; try { java . lang . String jobName = softwareProjectId . getProjectId ( ) ; fr . norad . visuwall . providers . hudson . domain . HudsonJob job = hudson . findJob ( jobName ) ; return job . isDisabled ( ) ; } catch ( fr . norad . visuwall . providers . hudson . exception . HudsonJobNotFoundException e ) { throw new fr . norad . visuwall . api . exception . ProjectNotFoundException ( ( \"Can't<sp>find<sp>job<sp>with<sp>software<sp>project<sp>id:<sp>\" + softwareProjectId ) , e ) ; } }\n### UNIT_TEST\nshould_projects_are_not_disabled ( ) { boolean projectDisabled = connection . isProjectDisabled ( fr . norad . visuwall . plugin . demo . SoftwareProjectIds . earth ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isProjectDisabled\n[UNIT_TEST]:should_projects_are_not_disabled\n### generate assertion", "label": "org . junit . Assert . assertFalse ( projectDisabled )"}
{"prompt": "### METHOD_UNDER_TEST\nfindIds ( ) { new org . tests . model . cache . EColAB ( \"03\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"04\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"05\" , \"someId\" ) . save ( ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; java . util . List < java . lang . Integer > colA_first = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . Integer > colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . String > sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( colA_first ) . isSameAs ( colA_second ) ; assertThat ( colA_first ) . hasSize ( 3 ) ; assertThat ( sql ) . hasSize ( 1 ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . PUT ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( sql ) . hasSize ( 1 ) ; }\n### UNIT_TEST\ntestQuery ( ) { org . tests . model . basic . Truck truck = new org . tests . model . basic . Truck ( ) ; truck . setLicenseNumber ( \"TK123\" ) ; io . ebean . Ebean . save ( truck ) ; java . util . List < java . lang . Integer > ids = io . ebean . Ebean . find ( org . tests . model . basic . Vehicle . class ) . findIds ( ) ; \"<AssertPlaceHolder>\" ; io . ebean . Ebean . delete ( truck ) ; }\n[METHOD_UNDER_TEST]:findIds\n[UNIT_TEST]:testQuery\n### generate assertion\norg . junit . Assert . assertNotNull ( ids )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncall ( ) { return parseReactomeEntryPage ( this . pathwayId ) ; }\n### UNIT_TEST\ntestGetCofactors ( ) { uk . ac . ebi . ep . adapter . intenz . IntenzCallable . GetCofactorsCaller cofactorsCaller = new uk . ac . ebi . ep . adapter . intenz . IntenzCallable . GetCofactorsCaller ( \"ftp://ftp.ebi.ac.uk/pub/databases/intenz/xml/ASCII/EC_1/EC_1.1/EC_1.1.1/EC_1.1.1.1.xml\" ) ; java . util . Collection < uk . ac . ebi . ep . enzyme . model . Molecule > cofactors = cofactorsCaller . call ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:call\n[UNIT_TEST]:testGetCofactors\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 2 , cofactors . size ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nequals ( java . lang . Object ) { if ( obj == ( this ) ) { return true ; } if ( ! ( obj instanceof org . jfree . data . xy . YWithXInterval ) ) { return false ; } org . jfree . data . xy . YWithXInterval that = ( ( org . jfree . data . xy . YWithXInterval ) ( obj ) ) ; if ( ( this . y ) != ( that . y ) ) { return false ; } if ( ( this . xLow ) != ( that . xLow ) ) { return false ; } if ( ( this . xHigh ) != ( that . xHigh ) ) { return false ; } return true ; }\n### UNIT_TEST\ntestEquals ( ) { org . jfree . data . time . Month m1 = new org . jfree . data . time . Month ( org . jfree . chart . date . MonthConstants . MAY , 2002 ) ; org . jfree . data . time . Month m2 = new org . jfree . data . time . Month ( org . jfree . chart . date . MonthConstants . MAY , 2002 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:equals\n[UNIT_TEST]:testEquals\n### generate assertion\norg . junit . Assert . assertTrue ( m1 . equals ( m2 ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nequals ( java . lang . Object ) { if ( obj == ( this ) ) { return true ; } if ( ! ( obj instanceof org . jfree . data . general . TestIntervalCategoryDataset ) ) { return false ; } org . jfree . data . general . TestIntervalCategoryDataset that = ( ( org . jfree . data . general . TestIntervalCategoryDataset ) ( obj ) ) ; if ( ! ( getRowKeys ( ) . equals ( that . getRowKeys ( ) ) ) ) { return false ; } if ( ! ( getColumnKeys ( ) . equals ( that . getColumnKeys ( ) ) ) ) { return false ; } int rowCount = getRowCount ( ) ; int colCount = getColumnCount ( ) ; for ( int r = 0 ; r < rowCount ; r ++ ) { for ( int c = 0 ; c < colCount ; c ++ ) { java . lang . Number v1 = getValue ( r , c ) ; java . lang . Number v2 = that . getValue ( r , c ) ; if ( v1 == null ) { if ( v2 != null ) { return false ; } } else if ( ! ( v1 . equals ( v2 ) ) ) { return false ; } } } return true ; }\n### UNIT_TEST\ntestEquals1481087 ( ) { org . jfree . chart . labels . StandardCategoryToolTipGenerator g1 = new org . jfree . chart . labels . StandardCategoryToolTipGenerator ( \"{0}\" , new java . text . DecimalFormat ( \"0.00\" ) ) ; org . jfree . chart . labels . StandardCategoryItemLabelGenerator g2 = new org . jfree . chart . labels . StandardCategoryItemLabelGenerator ( \"{0}\" , new java . text . DecimalFormat ( \"0.00\" ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:equals\n[UNIT_TEST]:testEquals1481087\n### generate assertion", "label": "org . junit . Assert . assertFalse ( g1 . equals ( g2 ) )"}
{"prompt": "### METHOD_UNDER_TEST\nhasField ( java . lang . String ) { return fFields . containsKey ( fieldTag ) ; }\n### UNIT_TEST\ntestHasField ( ) { fixture . setTag ( \"\" ) ; java . lang . String tag = \"\" ; boolean result = fixture . hasField ( tag ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:hasField\n[UNIT_TEST]:testHasField\n### generate assertion\norg . junit . Assert . assertEquals ( false , result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nmatches ( javassist . CtField ) { javassist . CtClass declaringClass = ctField . getDeclaringClass ( ) ; java . lang . String className = declaringClass . getName ( ) ; if ( ! ( this . patternClass . matcher ( className ) . matches ( ) ) ) { return false ; } java . lang . String fieldName = ctField . getName ( ) ; return this . patternField . matcher ( fieldName ) . matches ( ) ; }\n### UNIT_TEST\ntestConstructorOneParamLongUnsuccessful ( ) { japicmp . filter . JavadocLikeBehaviorFilter filter = new japicmp . filter . JavadocLikeBehaviorFilter ( \"japicmp.Test#Test(java.lang.Long)\" ) ; javassist . ClassPool classPool = new javassist . ClassPool ( ) ; classPool . appendSystemPath ( ) ; javassist . CtClass ctClass = japicmp . util . CtClassBuilder . create ( ) . name ( \"japicmp.Test\" ) . addToClassPool ( classPool ) ; javassist . CtConstructor ctConstructor = japicmp . util . CtConstructorBuilder . create ( ) . parameter ( classPool . get ( \"java.lang.Double\" ) ) . addToClass ( ctClass ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:matches\n[UNIT_TEST]:testConstructorOneParamLongUnsuccessful\n### generate assertion", "label": "org . junit . Assert . assertThat ( filter . matches ( ctConstructor ) , org . hamcrest . core . Is . is ( false ) )"}
{"prompt": "### METHOD_UNDER_TEST\nequals ( java . lang . Object ) { if ( obj == ( this ) ) { return true ; } if ( ! ( obj instanceof org . jfree . data . xy . YWithXInterval ) ) { return false ; } org . jfree . data . xy . YWithXInterval that = ( ( org . jfree . data . xy . YWithXInterval ) ( obj ) ) ; if ( ( this . y ) != ( that . y ) ) { return false ; } if ( ( this . xLow ) != ( that . xLow ) ) { return false ; } if ( ( this . xHigh ) != ( that . xHigh ) ) { return false ; } return true ; }\n### UNIT_TEST\ntestEquals ( ) { org . jfree . data . time . Month m1 = new org . jfree . data . time . Month ( org . jfree . chart . date . MonthConstants . MAY , 2002 ) ; org . jfree . data . time . Month m2 = new org . jfree . data . time . Month ( org . jfree . chart . date . MonthConstants . MAY , 2002 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:equals\n[UNIT_TEST]:testEquals\n### generate assertion\norg . junit . Assert . assertTrue ( m1 . equals ( m2 ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nequals ( java . lang . Object ) { if ( ( this ) == obj ) return true ; if ( obj == null ) return false ; if ( ( getClass ( ) ) != ( obj . getClass ( ) ) ) return false ; org . numenta . nupic . Parameters other = ( ( org . numenta . nupic . Parameters ) ( obj ) ) ; if ( ( paramMap ) == null ) { if ( ( other . paramMap ) != null ) return false ; } else { java . lang . Class < ? > [ ] classArray = new java . lang . Class [ ] { java . lang . Object . class } ; try { for ( org . numenta . nupic . Parameters . KEY key : paramMap . keySet ( ) ) { if ( ( ( paramMap . get ( key ) ) == null ) || ( ( other . paramMap . get ( key ) ) == null ) ) continue ; java . lang . Class < ? > thisValueClass = paramMap . get ( key ) . getClass ( ) ; java . lang . Class < ? > otherValueClass = other . paramMap . get ( key ) . getClass ( ) ; boolean isSpecial = isSpecial ( key , thisValueClass ) ; if ( ( ! isSpecial ) && ( ( ( thisValueClass . getMethod ( \"equals\" , classArray ) . getDeclaringClass ( ) ) != thisValueClass ) || ( ( otherValueClass . getMethod ( \"equals\" , classArray ) . getDeclaringClass ( ) ) != otherValueClass ) ) ) { continue ; } else if ( isSpecial ) { if ( int [ ] . class . isAssignableFrom ( thisValueClass ) ) { if ( ! ( java . util . Arrays . equals ( ( ( int [ ] ) ( paramMap . get ( key ) ) ) , ( ( int [ ] ) ( other . paramMap . get ( key ) ) ) ) ) ) return false ; } else if ( key == ( org . numenta . nupic . Parameters . KEY . FIELD_ENCODING_MAP ) ) { if ( ! ( com . cedarsoftware . util . DeepEquals . deepEquals ( paramMap . get ( key ) , other . paramMap . get ( key ) ) ) ) { return false ; } } } else if ( ( ! ( other . paramMap . containsKey ( key ) ) ) || ( ! ( paramMap . get ( key ) . equals ( other . paramMap . get ( key ) ) ) ) ) { return false ; } } } catch ( java . lang . Exception e ) { return false ; } } return true ; }\n### UNIT_TEST\ntestAsCellIndexes ( ) { org . numenta . nupic . model . Connections cn = new org . numenta . nupic . model . Connections ( ) ; cn . setColumnDimensions ( new int [ ] { 64 , 64 } ) ; cn . setCellsPerColumn ( 4 ) ; org . numenta . nupic . algorithms . TemporalMemory . init ( cn ) ; int [ ] expectedIndexes = new int [ ] { 0 , 3 , 4 , 16383 } ; java . util . Set < org . numenta . nupic . model . Cell > cells = cn . getCellSet ( expectedIndexes ) ; java . util . List < java . lang . Integer > cellIdxList = org . numenta . nupic . model . Connections . asCellIndexes ( cells ) ; java . util . Set < java . lang . Integer > cellIdxSet = new java . util . HashSet ( cellIdxList ) ; java . util . Set < java . lang . Integer > expectedIdxSet = new java . util . HashSet < java . lang . Integer > ( java . util . stream . IntStream . of ( expectedIndexes ) . boxed ( ) . collect ( java . util . stream . Collectors . toList ( ) ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:equals\n[UNIT_TEST]:testAsCellIndexes\n### generate assertion", "label": "org . junit . Assert . assertTrue ( cellIdxSet . equals ( expectedIdxSet ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetId ( ) { return id ; }\n### UNIT_TEST\ntestLookupBlob ( ) { final java . io . File repoPath = setupRepository ( \"testrepo\" ) ; org . libgit2 . jagged . Repository repository = new org . libgit2 . jagged . Repository ( repoPath . getAbsolutePath ( ) ) ; org . libgit2 . jagged . ObjectId oid = new org . libgit2 . jagged . ObjectId ( \"dc48b6c38e967e57965e36c6f7a1c3ec5c3e1ff4\" ) ; org . libgit2 . jagged . Blob blob = repository . lookup ( oid ) ; \"<AssertPlaceHolder>\" ; repository . close ( ) ; }\n[METHOD_UNDER_TEST]:getId\n[UNIT_TEST]:testLookupBlob\n### generate assertion\norg . junit . Assert . assertEquals ( oid , blob . getId ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetSubject ( ) { return configurable ; }\n### UNIT_TEST\ntestCreateDataflowInputPortEdit ( ) { org . apache . taverna . workflowmodel . Edit < org . apache . taverna . workflowmodel . Dataflow > edit = org . apache . taverna . workflowmodel . impl . CreateDataflowInputPortEditTest . edits . getCreateDataflowInputPortEdit ( dataflow , portName , portDepth , portGranularDepth ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getSubject\n[UNIT_TEST]:testCreateDataflowInputPortEdit\n### generate assertion", "label": "org . junit . Assert . assertEquals ( dataflow , edit . getSubject ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { if ( ( stringValue ) == null ) stringValue = decode ( com . beijunyi . parallelgit . filesystem . CHARSET , path ) ; return stringValue ; }\n### UNIT_TEST\nresolveRootPathFromAbsolutePathTest ( ) { com . beijunyi . parallelgit . filesystem . GitPath parent = gfs . getPath ( \"/parent/dir\" ) ; com . beijunyi . parallelgit . filesystem . GitPath path = parent . resolve ( \"/\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:resolveRootPathFromAbsolutePathTest\n### generate assertion\norg . junit . Assert . assertEquals ( \"/\" , path . toString ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nstripLeadingPeriod ( java . lang . String ) { if ( path . startsWith ( io . fabric8 . maven . docker . util . PathTestUtil . DOT ) ) { return path . substring ( 1 ) ; } return path ; }\n### UNIT_TEST\ntestResolveParentRelativeVolumePath ( ) { java . lang . String relativePath = ( io . fabric8 . maven . docker . util . PathTestUtil . DOT ) + ( io . fabric8 . maven . docker . util . VolumeBindingUtilTest . RELATIVE_PATH ) ; java . lang . String volumeString = java . lang . String . format ( BIND_STRING_FMT , relativePath , io . fabric8 . maven . docker . util . VolumeBindingUtilTest . CONTAINER_PATH ) ; java . lang . String relativizedVolumeString = io . fabric8 . maven . docker . util . VolumeBindingUtil . resolveRelativeVolumeBinding ( io . fabric8 . maven . docker . util . VolumeBindingUtilTest . ABS_BASEDIR , volumeString ) ; java . lang . String expectedBindingString = java . lang . String . format ( BIND_STRING_FMT , new java . io . File ( io . fabric8 . maven . docker . util . VolumeBindingUtilTest . ABS_BASEDIR . getParent ( ) , io . fabric8 . maven . docker . util . PathTestUtil . stripLeadingPeriod ( io . fabric8 . maven . docker . util . VolumeBindingUtilTest . RELATIVE_PATH ) ) , io . fabric8 . maven . docker . util . VolumeBindingUtilTest . CONTAINER_PATH ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:stripLeadingPeriod\n[UNIT_TEST]:testResolveParentRelativeVolumePath\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expectedBindingString , relativizedVolumeString )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { return ( ( ( ( ( ( ( \"[\" + ( grammar . name ) ) + \".\" ) + ( name ) ) + \",index=\" ) + ( index ) ) + \",line=\" ) + ( tree . getToken ( ) . getLine ( ) ) ) + \"]\" ; }\n### UNIT_TEST\ntestRepeatsVisit2 ( ) { org . antlr . runtime . tree . TreeWizard wiz = new org . antlr . runtime . tree . TreeWizard ( org . antlr . test . TestTreeWizard . adaptor , org . antlr . test . TestTreeWizard . tokens ) ; org . antlr . runtime . tree . CommonTree t = ( ( org . antlr . runtime . tree . CommonTree ) ( wiz . create ( \"(A<sp>B<sp>(A<sp>C<sp>B)<sp>B<sp>D<sp>D)\" ) ) ) ; final java . util . List < java . lang . Object > elements = new java . util . ArrayList < java . lang . Object > ( ) ; wiz . visit ( t , wiz . getTokenType ( \"A\" ) , new org . antlr . runtime . tree . TreeWizard . Visitor ( ) { @ org . antlr . test . Override public void visit ( java . lang . Object t ) { elements . add ( t ) ; } } ) ; java . lang . String found = elements . toString ( ) ; java . lang . String expecting = \"[A,<sp>A]\" ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testRepeatsVisit2\n### generate assertion\norg . junit . Assert . assertEquals ( expecting , found )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nrender ( ) { return render ( new java . util . HashMap < java . lang . String , java . lang . Object > ( ) ) ; }\n### UNIT_TEST\napplyTest ( ) { java . lang . String [ ] [ ] tests = new java . lang . String [ ] [ ] { new java . lang . String [ ] { \"{%<sp>if<sp>1.0<sp>==<sp>1<sp>%}TRUE{%<sp>else<sp>%}FALSE{%<sp>endif<sp>%}\" , \"TRUE\" } , new java . lang . String [ ] { \"{%<sp>if<sp>nil<sp>==<sp>nil<sp>%}TRUE{%<sp>else<sp>%}FALSE{%<sp>endif<sp>%}\" , \"TRUE\" } , new java . lang . String [ ] { \"{%<sp>if<sp>false<sp>==<sp>false<sp>%}TRUE{%<sp>else<sp>%}FALSE{%<sp>endif<sp>%}\" , \"TRUE\" } , new java . lang . String [ ] { \"{%<sp>if<sp>\\\"\\\"<sp>==<sp>\\'\\'<sp>%}TRUE{%<sp>else<sp>%}FALSE{%<sp>endif<sp>%}\" , \"TRUE\" } } ; for ( java . lang . String [ ] test : tests ) { liqp . Template template = liqp . Template . parse ( test [ 0 ] ) ; java . lang . String rendered = java . lang . String . valueOf ( template . render ( ) ) ; \"<AssertPlaceHolder>\" ; } }\n[METHOD_UNDER_TEST]:render\n[UNIT_TEST]:applyTest\n### generate assertion", "label": "org . junit . Assert . assertThat ( rendered , org . hamcrest . CoreMatchers . is ( test [ 1 ] ) )"}
{"prompt": "### METHOD_UNDER_TEST\nfromJson ( com . fasterxml . jackson . databind . JsonNode ) { if ( node instanceof com . fasterxml . jackson . databind . node . ObjectNode ) { com . fasterxml . jackson . databind . node . ObjectNode onode = ( ( com . fasterxml . jackson . databind . node . ObjectNode ) ( node ) ) ; java . lang . String firstField = onode . fieldNames ( ) . next ( ) ; if ( ( com . redhat . lightblue . query . UnaryLogicalOperator . fromString ( firstField ) ) != null ) { return com . redhat . lightblue . query . UnaryLogicalExpression . fromJson ( onode ) ; } else if ( ( com . redhat . lightblue . query . NaryLogicalOperator . fromString ( firstField ) ) != null ) { return com . redhat . lightblue . query . NaryLogicalExpression . fromJson ( onode ) ; } else { return com . redhat . lightblue . query . ComparisonExpression . fromJson ( onode ) ; } } else { throw com . redhat . lightblue . util . Error . get ( QueryConstants . ERR_INVALID_QUERY , node . toString ( ) ) ; } }\n### UNIT_TEST\ntestFromJson ( ) { com . fasterxml . jackson . databind . JsonNode jsonNode = com . fasterxml . jackson . databind . node . JsonNodeFactory . withExactBigDecimals ( false ) . binaryNode ( new byte [ 0 ] ) ; java . lang . Object fromJson = binaryType . fromJson ( jsonNode ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:fromJson\n[UNIT_TEST]:testFromJson\n### generate assertion\norg . junit . Assert . assertTrue ( ( fromJson instanceof byte [ ] ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ntypedObjectFromValueAndField ( java . lang . Object , com . pardot . rhombus . cobject . CField ) { try { return com . pardot . rhombus . util . JsonUtil . typedObjectFromValueAndFieldType ( jsonValue , field . getType ( ) ) ; } catch ( java . lang . IllegalArgumentException e ) { throw new java . lang . IllegalArgumentException ( ( ( ( ( ( ( ( \"Field<sp>\" + ( field . getName ( ) ) ) + \":<sp>Unable<sp>to<sp>convert<sp>\" ) + jsonValue ) + \"<sp>of<sp>type<sp>\" ) + ( jsonValue . getClass ( ) ) ) + \"<sp>to<sp>C*<sp>type<sp>\" ) + ( field . getType ( ) . toString ( ) ) ) ) ; } }\n### UNIT_TEST\ntypedObjectFromDoubleAndBigint ( ) { com . pardot . rhombus . cobject . CField field = new com . pardot . rhombus . cobject . CField ( \"test\" , \"bigint\" ) ; java . lang . Double jsonValue = 1.2345678901234567E9 ; java . lang . Long expected = 1234567890L ; java . lang . Object result = com . pardot . rhombus . util . JsonUtil . typedObjectFromValueAndField ( jsonValue , field ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:typedObjectFromValueAndField\n[UNIT_TEST]:typedObjectFromDoubleAndBigint\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expected , result )"}
{"prompt": "### METHOD_UNDER_TEST\nsize ( ) { return ( ( ( historicProcessInstanceIds . size ( ) ) + ( historicDecisionInstanceIds . size ( ) ) ) + ( historicCaseInstanceIds . size ( ) ) ) + ( historicBatchIds . size ( ) ) ; }\n### UNIT_TEST\ntestQueryByType ( ) { helper . createMigrationBatchWithSize ( 1 ) ; helper . createMigrationBatchWithSize ( 1 ) ; java . util . List < org . camunda . bpm . engine . batch . BatchStatistics > statistics = managementService . createBatchStatisticsQuery ( ) . type ( Batch . TYPE_PROCESS_INSTANCE_MIGRATION ) . list ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:testQueryByType\n### generate assertion\norg . junit . Assert . assertEquals ( 2 , statistics . size ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsupportsSelectDistinct ( java . lang . Object , org . teiid . query . metadata . QueryMetadataInterface , org . teiid . query . optimizer . capabilities . CapabilitiesFinder ) { return org . teiid . query . optimizer . relational . rules . CapabilitiesUtil . supports ( Capability . QUERY_SELECT_DISTINCT , modelID , metadata , capFinder ) ; }\n### UNIT_TEST\ntestSupportsDistinct1 ( ) { org . teiid . query . metadata . TransformationMetadata metadata = org . teiid . query . unittest . RealMetadataFactory . example1Cached ( ) ; org . teiid . metadata . Schema modelID = metadata . getMetadataStore ( ) . getSchema ( \"PM1\" ) ; org . teiid . query . optimizer . capabilities . FakeCapabilitiesFinder finder = new org . teiid . query . optimizer . capabilities . FakeCapabilitiesFinder ( ) ; org . teiid . query . optimizer . capabilities . BasicSourceCapabilities sourceCaps = new org . teiid . query . optimizer . capabilities . BasicSourceCapabilities ( ) ; sourceCaps . setCapabilitySupport ( Capability . QUERY_SELECT_DISTINCT , true ) ; finder . addCapabilities ( \"pm1\" , sourceCaps ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:supportsSelectDistinct\n[UNIT_TEST]:testSupportsDistinct1\n### generate assertion", "label": "org . junit . Assert . assertTrue ( org . teiid . query . optimizer . relational . rules . CapabilitiesUtil . supportsSelectDistinct ( modelID , metadata , finder ) )"}
{"prompt": "### METHOD_UNDER_TEST\nexist ( java . lang . String ) { org . ff4j . utils . Util . assertHasLength ( uid ) ; return getFeatureBucket ( ) . exists ( uid ) ; }\n### UNIT_TEST\ntestImportFeatures ( ) { testedStore . importFeatures ( null ) ; org . ff4j . core . Feature fx1 = new org . ff4j . core . Feature ( \"fx1\" , true ) ; org . ff4j . core . Feature fx2 = new org . ff4j . core . Feature ( \"fx2\" , true ) ; testedStore . importFeatures ( org . ff4j . utils . Util . list ( fx1 , fx2 ) ) ; \"<AssertPlaceHolder>\" ; testedStore . importFeatures ( org . ff4j . utils . Util . list ( fx1 , fx2 ) ) ; }\n[METHOD_UNDER_TEST]:exist\n[UNIT_TEST]:testImportFeatures\n### generate assertion\norg . junit . Assert . assertTrue ( testedStore . exist ( \"fx1\" ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetMergeFeature ( java . lang . String ) { if ( ( ! ( this . orderedBuildList . isEmpty ( ) ) ) && ( this . features . containsKey ( featureId , getLatestBuild ( ) ) ) ) { final xbdd . model . simple . Feature feature = this . features . get ( featureId , getLatestBuild ( ) ) ; final java . util . List < java . lang . String > featureStatuses = getFeatureStatuses ( feature ) ; final java . util . List < xbdd . model . MergeScenario > scenarioList = getMergedScenarios ( feature ) ; final xbdd . model . MergeFeature mergeFeature = new xbdd . model . MergeFeature ( ) ; mergeFeature . setId ( feature . getId ( ) ) ; mergeFeature . setName ( feature . getName ( ) ) ; mergeFeature . setStatuses ( featureStatuses ) ; mergeFeature . setUrl ( ( ( ( ( ( \"reports/\" + ( feature . getCoordinates ( ) . getProduct ( ) ) ) + \"/\" ) + ( feature . getCoordinates ( ) . getVersionString ( ) ) ) + \"/{{BUILD_NAME}}/\" ) + ( feature . getId ( ) ) ) ) ; mergeFeature . setScenarios ( scenarioList ) ; return mergeFeature ; } else { return null ; } }\n### UNIT_TEST\nnoFeatureAdded ( ) { final xbdd . model . simple . Feature feature = new xbdd . model . simple . Feature ( ( ( com . mongodb . BasicDBObject ) ( com . mongodb . util . JSON . parse ( \"{'_id'<sp>:<sp>'p1/f1','id'<sp>:<sp>'f1','description'<sp>:<sp>''<sp>,'name'<sp>:<sp>'f1',<sp>'elements'<sp>:<sp>[{'id'<sp>:<sp>'e1','description'<sp>:<sp>'','name'<sp>:<sp>'e1','steps'<sp>:<sp>[{'result'<sp>:<sp>{'status'<sp>:<sp>'passed'},'name'<sp>:<sp>'e2',},{'result'<sp>:<sp>{'status'<sp>:<sp>'passed'},'name'<sp>:<sp>'e3',}],}],'coordinates'<sp>:<sp>{'product'<sp>:<sp>'P1','major'<sp>:<sp>1,'minor'<sp>:<sp>1,'servicePack'<sp>:<sp>1,'build'<sp>:<sp>'build1','version'<sp>:<sp>'1.1.1'},'calculatedStatus'<sp>:<sp>'unknown<sp>status?<sp>-<sp>expected<sp>passed,failed<sp>or<sp>undefined','originalAutomatedStatus'<sp>:<sp>'unknown<sp>status?<sp>-<sp>expected<sp>passed,failed<sp>or<sp>undefined'}\" ) ) ) ) ; final java . lang . String [ ] builds = new java . lang . String [ ] { \"build1\" , \"build2\" } ; final xbdd . util . MultipleBuildsFeatureMergeHelper target = new xbdd . util . MultipleBuildsFeatureMergeHelper ( java . util . Arrays . asList ( builds ) ) ; final xbdd . model . MergeFeature isNull = null ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getMergeFeature\n[UNIT_TEST]:noFeatureAdded\n### generate assertion", "label": "org . junit . Assert . assertThat ( target . getMergeFeature ( feature . getId ( ) ) , org . hamcrest . Matchers . is ( isNull ) )"}
{"prompt": "### METHOD_UNDER_TEST\nget ( java . lang . String ) { return map . get ( name ) ; }\n### UNIT_TEST\nupdateTypeEntityOnDepA ( ) { waitForSync ( ) ; com . google . appengine . api . datastore . Key key = com . google . appengine . api . datastore . KeyFactory . createKey ( \"UPDATE\" , 1 ) ; com . google . appengine . api . datastore . Entity lookup = getService ( ) . get ( key ) ; \"<AssertPlaceHolder>\" ; lookup . setProperty ( \"type\" , \"DONE\" ) ; getService ( ) . put ( lookup ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:updateTypeEntityOnDepA\n### generate assertion\norg . junit . Assert . assertNotNull ( lookup )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetPropertyRaw ( java . lang . String ) { return getStateProvider ( ) . getProperty ( getNode ( ) , name ) ; }\n### UNIT_TEST\ndisabledElement_updateIsAllowedBySynchronizeProperty_updateIsDone ( ) { com . vaadin . flow . dom . Element element = com . vaadin . flow . dom . ElementFactory . createDiv ( ) ; com . vaadin . flow . component . UI ui = new com . vaadin . flow . component . UI ( ) ; ui . getElement ( ) . appendChild ( element ) ; element . setEnabled ( false ) ; element . synchronizeProperty ( com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . TEST_PROPERTY , com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . DUMMY_EVENT , DisabledUpdateMode . ALWAYS ) ; com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . sendSynchronizePropertyEvent ( element , ui , com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . TEST_PROPERTY , com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . NEW_VALUE ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getPropertyRaw\n[UNIT_TEST]:disabledElement_updateIsAllowedBySynchronizeProperty_updateIsDone\n### generate assertion", "label": "org . junit . Assert . assertEquals ( com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . NEW_VALUE , element . getPropertyRaw ( com . vaadin . flow . server . communication . rpc . MapSyncRpcHandlerTest . TEST_PROPERTY ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetIndexPath ( ) { return indexPath ; }\n### UNIT_TEST\ntestServerGetIndexPath ( ) { System . out . println ( \"testServerGetIndexPath\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getIndexPath\n[UNIT_TEST]:testServerGetIndexPath\n### generate assertion\norg . junit . Assert . assertEquals ( config . getIndexPath ( ) , storage . getIndexPath ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetErrorIndex ( ) { return errorIndex ; }\n### UNIT_TEST\ntest_parse_french_short_strict_full_noMatch ( ) { setStrict ( true ) ; java . text . ParsePosition pos = new java . text . ParsePosition ( 0 ) ; getFormatter ( test . java . time . format . MONTH_OF_YEAR , TextStyle . SHORT ) . withLocale ( Locale . FRENCH ) . parseUnresolved ( \"janvier\" , pos ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getErrorIndex\n[UNIT_TEST]:test_parse_french_short_strict_full_noMatch\n### generate assertion", "label": "org . junit . Assert . assertEquals ( pos . getErrorIndex ( ) , 0 )"}
{"prompt": "### METHOD_UNDER_TEST\neval ( java . lang . String ) { return getValue ( expression , java . lang . Object . class ) ; }\n### UNIT_TEST\ntestMod02 ( ) { javax . el . ELProcessor processor = new javax . el . ELProcessor ( ) ; java . lang . Object result = processor . eval ( \"null<sp>%<sp>null\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:eval\n[UNIT_TEST]:testMod02\n### generate assertion\norg . junit . Assert . assertEquals ( java . lang . Long . valueOf ( 0 ) , result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nevaluate ( org . xml . sax . InputSource ) { throw new java . lang . UnsupportedOperationException ( ) ; }\n### UNIT_TEST\nnoTargetField ( ) { final org . w3c . dom . Document document = newRecord ( eu . aliada . rdfizer . pipeline . format . marc . selector . xml . A_VARIABLE_FIELD_NAME , '#' , '#' , 'a' ) ; final eu . aliada . rdfizer . pipeline . format . marc . selector . xml . VariableFieldExpression expression = new eu . aliada . rdfizer . pipeline . format . marc . selector . xml . VariableFieldExpression ( ( ( A_VARIABLE_FIELD_NAME ) + \"a\" ) ) ; expression . xpath = new eu . aliada . rdfizer . pipeline . format . xml . OXPath ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:evaluate\n[UNIT_TEST]:noTargetField\n### generate assertion", "label": "org . junit . Assert . assertNull ( expression . evaluate ( document ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFullName ( ) { return fullName ; }\n### UNIT_TEST\ntestFullName ( ) { org . eclipse . orion . server . core . metastore . WorkspaceInfo workspaceInfo = new org . eclipse . orion . server . core . metastore . WorkspaceInfo ( ) ; java . lang . String fullName = \"Test<sp>Workspace\" ; workspaceInfo . setFullName ( fullName ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFullName\n[UNIT_TEST]:testFullName\n### generate assertion\norg . junit . Assert . assertEquals ( fullName , workspaceInfo . getFullName ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetXWikiContext ( ) { return xcontext ; }\n### UNIT_TEST\ntestAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff ( ) { java . security . Principal principal = this . authService . authenticate ( XWikiRightService . SUPERADMIN_USER_FULLNAME , \"whatever\" , this . oldcore . getXWikiContext ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getXWikiContext\n[UNIT_TEST]:testAuthenticateWithSuperAdminPrefixedWithXWikiWhenSuperAdminPasswordIsTurnedOff\n### generate assertion", "label": "org . junit . Assert . assertNull ( principal )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { if ( ( stringValue ) == null ) stringValue = decode ( com . beijunyi . parallelgit . filesystem . CHARSET , path ) ; return stringValue ; }\n### UNIT_TEST\nresolveRootPathFromAbsolutePathTest ( ) { com . beijunyi . parallelgit . filesystem . GitPath parent = gfs . getPath ( \"/parent/dir\" ) ; com . beijunyi . parallelgit . filesystem . GitPath path = parent . resolve ( \"/\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:resolveRootPathFromAbsolutePathTest\n### generate assertion\norg . junit . Assert . assertEquals ( \"/\" , path . toString ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetRootDirectory ( ) { return rootDirectory ; }\n### UNIT_TEST\ntestCacheTiming ( ) { java . lang . String filename = \"file:testCacheTiming.xml\" ; System . out . printf ( \"%s%n\" , filename ) ; java . lang . String cacheDirName = tempFolder . newFolder ( ) . getAbsolutePath ( ) ; System . out . printf ( \"cacheDir=%s%n\" , cacheDirName ) ; java . io . File cacheDir = new java . io . File ( cacheDirName ) ; org . apache . commons . io . FileUtils . deleteDirectory ( cacheDir ) ; assert ! ( cacheDir . exists ( ) ) ; ucar . nc2 . util . DiskCache2 cache = new ucar . nc2 . util . DiskCache2 ( cacheDirName , false , 0 , 0 ) ; cache . setAlwaysUseCache ( true ) ; \"<AssertPlaceHolder>\" ; assert new java . io . File ( cache . getRootDirectory ( ) ) . exists ( ) ; ucar . nc2 . ncml . Aggregation . setPersistenceCache ( cache ) ; AggregationExisting . countCacheUse = 0 ; long start = java . lang . System . currentTimeMillis ( ) ; try ( ucar . nc2 . NetcdfFile ncfile = ucar . nc2 . ncml . NcMLReader . readNcML ( new java . io . StringReader ( ncml2 ) , filename , null ) ) { System . out . printf ( \"%nTestNcmlAggExisting.open<sp>%s%n\" , filename ) ; ucar . nc2 . Variable time = ncfile . findVariable ( \"time\" ) ; System . out . printf ( \"<sp>Variable<sp>%s%n\" , time . getNameAndDimensions ( ) ) ; time . read ( ) ; } System . out . printf ( \"<sp>countCacheUse<sp>=<sp>%d%n\" , AggregationExisting . countCacheUse ) ; long took = ( java . lang . System . currentTimeMillis ( ) ) - start ; System . out . printf ( \"<sp>first<sp>took<sp>%d<sp>msecs%n\" , took ) ; AggregationExisting . countCacheUse = 0 ; start = java . lang . System . currentTimeMillis ( ) ; try ( ucar . nc2 . NetcdfFile ncfile = ucar . nc2 . ncml . NcMLReader . readNcML ( new java . io . StringReader ( ncml2 ) , filename , null ) ) { System . out . printf ( \"%nTestNcmlAggExisting.open<sp>%s%n\" , filename ) ; ucar . nc2 . Variable time = ncfile . findVariable ( \"time\" ) ; System . out . printf ( \"<sp>Variable<sp>%s%n\" , time . getNameAndDimensions ( ) ) ; time . read ( ) ; } System . out . printf ( \"<sp>countCacheUse<sp>=<sp>%d%n\" , AggregationExisting . countCacheUse ) ; took = ( java . lang . System . currentTimeMillis ( ) ) - start ; System . out . printf ( \"<sp>second<sp>took<sp>%d<sp>msecs%n\" , took ) ; }\n[METHOD_UNDER_TEST]:getRootDirectory\n[UNIT_TEST]:testCacheTiming\n### generate assertion", "label": "org . junit . Assert . assertEquals ( cache . getRootDirectory ( ) , cacheDirName )"}
{"prompt": "### METHOD_UNDER_TEST\ngetTransaction ( java . lang . String , java . lang . String ) { return null ; }\n### UNIT_TEST\ntestGetTransactionsAfterRemoveInvalid ( ) { long initialTime = clock . millis ( ) ; when ( clock . millis ( ) ) . thenReturn ( initialTime , ( initialTime + 1000 ) , ( initialTime + 2000 ) ) ; org . hawkular . apm . api . model . config . txn . TransactionConfig btc1 = new org . hawkular . apm . api . model . config . txn . TransactionConfig ( ) ; btc1 . setDescription ( \"btc1\" ) ; try { cfgs . setTransaction ( null , \"btc1\" , btc1 ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( \"Failed<sp>to<sp>update<sp>btc1:<sp>\" + e ) ) ; } try { cfgs . removeTransaction ( null , \"btc1\" ) ; } catch ( java . lang . Exception e ) { org . junit . Assert . fail ( ( \"Failed<sp>to<sp>remove<sp>btc1:<sp>\" + e ) ) ; } org . hawkular . apm . api . model . config . txn . TransactionConfig btc1again = cfgs . getTransaction ( null , \"btc1\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getTransaction\n[UNIT_TEST]:testGetTransactionsAfterRemoveInvalid\n### generate assertion\norg . junit . Assert . assertNull ( btc1again )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisTxConsistent ( org . bitcoinj . core . Transaction , boolean ) { boolean isActuallySpent = true ; for ( org . bitcoinj . core . TransactionOutput o : tx . getOutputs ( ) ) { if ( o . isAvailableForSpending ( ) ) { if ( o . isMineOrWatched ( this ) ) isActuallySpent = false ; if ( ( o . getSpentBy ( ) ) != null ) { org . bitcoinj . wallet . Wallet . log . error ( \"isAvailableForSpending<sp>!=<sp>spentBy\" ) ; return false ; } } else { if ( ( o . getSpentBy ( ) ) == null ) { org . bitcoinj . wallet . Wallet . log . error ( \"isAvailableForSpending<sp>!=<sp>spentBy\" ) ; return false ; } } } return isActuallySpent == isSpent ; }\n### UNIT_TEST\nisTxConsistentReturnsFalseAsExpected ( ) { org . bitcoinj . wallet . Wallet wallet = new org . bitcoinj . wallet . Wallet ( PARAMS ) ; org . bitcoinj . core . TransactionOutput to = createMock ( org . bitcoinj . core . TransactionOutput . class ) ; org . easymock . EasyMock . expect ( to . isAvailableForSpending ( ) ) . andReturn ( true ) ; org . easymock . EasyMock . expect ( to . isMineOrWatched ( wallet ) ) . andReturn ( true ) ; org . easymock . EasyMock . expect ( to . getSpentBy ( ) ) . andReturn ( new org . bitcoinj . core . TransactionInput ( PARAMS , null , new byte [ 0 ] ) ) ; org . bitcoinj . core . Transaction tx = org . bitcoinj . wallet . FakeTxBuilder . createFakeTxWithoutChange ( org . bitcoinj . wallet . PARAMS , to ) ; replay ( to ) ; boolean isConsistent = wallet . isTxConsistent ( tx , false ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isTxConsistent\n[UNIT_TEST]:isTxConsistentReturnsFalseAsExpected\n### generate assertion", "label": "org . junit . Assert . assertFalse ( isConsistent )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFirstName ( ) { return firstName ; }\n### UNIT_TEST\ntestFieldValueOverwritten ( ) { final org . hyalinedto . test . domainclasses . Person dto = org . hyalinedto . api . Hyaline . dtoFromScratch ( john , new org . hyalinedto . api . DTO ( ) { @ org . hyalinedto . test . api . SuppressWarnings ( \"unused\" ) private java . lang . String firstName = \"Ringo\" ; } ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFirstName\n[UNIT_TEST]:testFieldValueOverwritten\n### generate assertion\norg . junit . Assert . assertEquals ( \"Ringo\" , dto . getFirstName ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ninitFieldNameStrategy ( ) { info . smart_tools . smartactors . ioc . ioc . IOC . register ( info . smart_tools . smartactors . ioc . ioc . IOC . resolve ( info . smart_tools . smartactors . ioc . ioc . IOC . getKeyForKeyStorage ( ) , \"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\" ) , new info . smart_tools . smartactors . ioc . resolve_by_name_ioc_with_lambda_strategy . ResolveByNameIocStrategy ( ( a ) -> { try { return new info . smart_tools . smartactors . iobject . field_name . FieldName ( ( ( java . lang . String ) ( a [ 0 ] ) ) ) ; } catch ( e ) { throw new java . lang . RuntimeException ( \"Could<sp>not<sp>create<sp>new<sp>instance<sp>of<sp>FieldName.\" ) ; } } ) ) ; }\n### UNIT_TEST\ncheckRefCntMethod ( ) { initFieldNameStrategy ( ) ; info . smart_tools . smartactors . iobject . iobject . IObject message = mock ( info . smart_tools . smartactors . iobject . iobject . IObject . class ) ; io . netty . handler . codec . http . FullHttpRequest request = new info . smart_tools . smartactors . testing . test_http_endpoint . TestFullHttpRequest ( message ) ; \"<AssertPlaceHolder>\" ; request . refCnt ( ) ; org . junit . Assert . fail ( ) ; }\n[METHOD_UNDER_TEST]:initFieldNameStrategy\n[UNIT_TEST]:checkRefCntMethod\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( request )"}
{"prompt": "### METHOD_UNDER_TEST\ngetIndexPath ( ) { return indexPath ; }\n### UNIT_TEST\ntestServerGetIndexPath ( ) { System . out . println ( \"testServerGetIndexPath\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getIndexPath\n[UNIT_TEST]:testServerGetIndexPath\n### generate assertion\norg . junit . Assert . assertEquals ( config . getIndexPath ( ) , storage . getIndexPath ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetUserKey ( ) { return userKey ; }\n### UNIT_TEST\ntestSetUserKey ( ) { details . setUserKey ( 12 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getUserKey\n[UNIT_TEST]:testSetUserKey\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 12 , details . getUserKey ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { return ( ( ( ( ( ( ( \"[\" + ( grammar . name ) ) + \".\" ) + ( name ) ) + \",index=\" ) + ( index ) ) + \",line=\" ) + ( tree . getToken ( ) . getLine ( ) ) ) + \"]\" ; }\n### UNIT_TEST\ntestRepeatsVisit2 ( ) { org . antlr . runtime . tree . TreeWizard wiz = new org . antlr . runtime . tree . TreeWizard ( org . antlr . test . TestTreeWizard . adaptor , org . antlr . test . TestTreeWizard . tokens ) ; org . antlr . runtime . tree . CommonTree t = ( ( org . antlr . runtime . tree . CommonTree ) ( wiz . create ( \"(A<sp>B<sp>(A<sp>C<sp>B)<sp>B<sp>D<sp>D)\" ) ) ) ; final java . util . List < java . lang . Object > elements = new java . util . ArrayList < java . lang . Object > ( ) ; wiz . visit ( t , wiz . getTokenType ( \"A\" ) , new org . antlr . runtime . tree . TreeWizard . Visitor ( ) { @ org . antlr . test . Override public void visit ( java . lang . Object t ) { elements . add ( t ) ; } } ) ; java . lang . String found = elements . toString ( ) ; java . lang . String expecting = \"[A,<sp>A]\" ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testRepeatsVisit2\n### generate assertion\norg . junit . Assert . assertEquals ( expecting , found )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ntoString ( ) { return ( ( getVerb ( ) ) + \"<sp>\" ) + ( edu . illinois . library . cantaloupe . resource . api . APITask . getUUID ( ) ) ; }\n### UNIT_TEST\ntestGetPublicReferenceFallsBackToHTTPSRequest ( ) { java . lang . String resourceURI = \"https://example.net/cats/dogs\" ; edu . illinois . library . cantaloupe . resource . MockHttpServletRequest servletRequest = ( ( edu . illinois . library . cantaloupe . resource . MockHttpServletRequest ) ( instance . getRequest ( ) . getServletRequest ( ) ) ) ; servletRequest . setContextPath ( \"/cats\" ) ; servletRequest . setRequestURL ( resourceURI ) ; edu . illinois . library . cantaloupe . http . Reference ref = instance . getPublicReference ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testGetPublicReferenceFallsBackToHTTPSRequest\n### generate assertion", "label": "org . junit . Assert . assertEquals ( resourceURI , ref . toString ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ncreate ( java . lang . Object ) { return clone ( value ) ; }\n### UNIT_TEST\ntestCreate ( ) { com . streamsets . pipeline . api . impl . IntegerTypeSupport ts = new com . streamsets . pipeline . api . impl . IntegerTypeSupport ( ) ; int o = 1 ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:create\n[UNIT_TEST]:testCreate\n### generate assertion\norg . junit . Assert . assertSame ( o , ts . create ( o ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncreateSample ( java . lang . String , java . lang . String , java . util . List , java . util . List , double ) { final java . lang . String suffix = ( nameSuffix == null ) ? \"\" : nameSuffix ; final java . util . List < java . lang . String > labelNames = ( additionalLabelNames == null ) ? java . util . Collections . < java . lang . String > emptyList ( ) : additionalLabelNames ; final java . util . List < java . lang . String > labelValues = ( additionalLabelValues == null ) ? java . util . Collections . < java . lang . String > emptyList ( ) : additionalLabelValues ; return new io . prometheus . client . Collector . MetricFamilySamples . Sample ( io . prometheus . client . Collector . sanitizeMetricName ( ( dropwizardName + suffix ) ) , new java . util . ArrayList < java . lang . String > ( labelNames ) , new java . util . ArrayList < java . lang . String > ( labelValues ) , value ) ; }\n### UNIT_TEST\ntest_WHEN_MetricNameSuffixRequested_THEN_ShouldReturnCorrectSample ( ) { final java . util . Map < java . lang . String , java . lang . String > labels = new java . util . HashMap < java . lang . String , java . lang . String > ( ) ; labels . put ( \"service\" , \"${0}\" ) ; labels . put ( \"status\" , \"s_${1}\" ) ; final io . prometheus . client . dropwizard . samplebuilder . MapperConfig mapperConfig = new io . prometheus . client . dropwizard . samplebuilder . MapperConfig ( \"app.okhttpclient.client.HttpClient.*.*\" , \"${0}\" 0 , labels ) ; final java . util . List < io . prometheus . client . dropwizard . samplebuilder . MapperConfig > mapperConfigs = java . util . Arrays . asList ( new io . prometheus . client . dropwizard . samplebuilder . MapperConfig ( \"${0}\" 2 ) , mapperConfig , new io . prometheus . client . dropwizard . samplebuilder . MapperConfig ( \"app.okhttpclient.client.HttpClient.*.total\" ) ) ; final io . prometheus . client . dropwizard . samplebuilder . CustomMappingSampleBuilder converter = new io . prometheus . client . dropwizard . samplebuilder . CustomMappingSampleBuilder ( mapperConfigs ) ; final io . prometheus . client . Collector . MetricFamilySamples . Sample expectedResult = new io . prometheus . client . Collector . MetricFamilySamples . Sample ( \"app_okhttpclient_client_HttpClient_greatService_suffix\" , java . util . Arrays . asList ( \"service\" , \"status\" ) , java . util . Arrays . asList ( \"greatService\" , \"s_400\" ) , 1.0 ) ; final io . prometheus . client . Collector . MetricFamilySamples . Sample result = converter . createSample ( \"${0}\" 1 , \"_suffix\" , java . util . Collections . < java . lang . String > emptyList ( ) , java . util . Collections . < java . lang . String > emptyList ( ) , 1.0 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:createSample\n[UNIT_TEST]:test_WHEN_MetricNameSuffixRequested_THEN_ShouldReturnCorrectSample\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expectedResult , result )"}
{"prompt": "### METHOD_UNDER_TEST\ncompareTo ( opennlp . tools . util . Span ) { if ( ( getStart ( ) ) < ( s . getStart ( ) ) ) { return - 1 ; } else if ( ( getStart ( ) ) == ( s . getStart ( ) ) ) { if ( ( getEnd ( ) ) > ( s . getEnd ( ) ) ) { return - 1 ; } else if ( ( getEnd ( ) ) < ( s . getEnd ( ) ) ) { return 1 ; } else { if ( ( ( getType ( ) ) == null ) && ( ( s . getType ( ) ) == null ) ) { return 0 ; } else if ( ( ( getType ( ) ) != null ) && ( ( s . getType ( ) ) != null ) ) { return getType ( ) . compareTo ( s . getType ( ) ) ; } else if ( ( getType ( ) ) != null ) { return - 1 ; } return 1 ; } } else { return 1 ; } }\n### UNIT_TEST\ntestCompareToHigher ( ) { opennlp . tools . util . Span a = new opennlp . tools . util . Span ( 100 , 200 ) ; opennlp . tools . util . Span b = new opennlp . tools . util . Span ( 300 , 400 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:compareTo\n[UNIT_TEST]:testCompareToHigher\n### generate assertion\norg . junit . Assert . assertEquals ( true , ( ( a . compareTo ( b ) ) < 0 ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetKind ( ) { return org . apache . flink . core . fs . FileSystemKind . OBJECT_STORE ; }\n### UNIT_TEST\ntestS3Kind ( ) { try { java . lang . Class . forName ( \"org.apache.hadoop.fs.s3.S3FileSystem\" ) ; } catch ( java . lang . ClassNotFoundException ignored ) { log . info ( \"Skipping<sp>test<sp>'testS3Kind()'<sp>because<sp>the<sp>S3<sp>file<sp>system<sp>is<sp>not<sp>in<sp>the<sp>class<sp>path\" ) ; return ; } final org . apache . flink . core . fs . FileSystem s3 = new org . apache . flink . core . fs . Path ( \"s3://myId:mySecret@bucket/some/bucket/some/object\" ) . getFileSystem ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getKind\n[UNIT_TEST]:testS3Kind\n### generate assertion", "label": "org . junit . Assert . assertEquals ( FileSystemKind . OBJECT_STORE , s3 . getKind ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetObject ( ) { return object ; }\n### UNIT_TEST\ncreateProducerWithDefaultMetadata ( ) { final org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > producerMetadata = new org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > ( \"test\" ) ; final org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > tm = org . mockito . Mockito . spy ( producerMetadata ) ; final org . springframework . integration . kafka . support . ProducerFactoryBean < byte [ ] , byte [ ] > producerFactoryBean = new org . springframework . integration . kafka . support . ProducerFactoryBean < byte [ ] , byte [ ] > ( tm , \"localhost:9092\" ) ; final kafka . javaapi . producer . Producer < byte [ ] , byte [ ] > producer = producerFactoryBean . getObject ( ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getPartitioner ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getCompressionCodec ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getValueEncoder ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getKeyEncoder ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . isAsync ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 0 ) ) . getBatchNumMessages ( ) ; }\n[METHOD_UNDER_TEST]:getObject\n[UNIT_TEST]:createProducerWithDefaultMetadata\n### generate assertion\norg . junit . Assert . assertTrue ( ( producer != null ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nget ( io . grpc . internal . SharedResourceHolder$Resource ) { return io . grpc . internal . SharedResourceHolder . holder . getInternal ( resource ) ; }\n### UNIT_TEST\nscheduledExecutorService_default ( ) { io . grpc . inprocess . InProcessChannelBuilder builder = io . grpc . inprocess . InProcessChannelBuilder . forName ( \"foo\" ) ; io . grpc . internal . ClientTransportFactory clientTransportFactory = builder . buildTransportFactory ( ) ; \"<AssertPlaceHolder>\" ; io . grpc . internal . SharedResourceHolder . release ( io . grpc . inprocess . TIMER_SERVICE , clientTransportFactory . getScheduledExecutorService ( ) ) ; clientTransportFactory . close ( ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:scheduledExecutorService_default\n### generate assertion", "label": "org . junit . Assert . assertSame ( io . grpc . internal . SharedResourceHolder . get ( io . grpc . inprocess . TIMER_SERVICE ) , clientTransportFactory . getScheduledExecutorService ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nget ( org . spf4j . base . Tag ) { java . lang . Object res = baggage . get ( key ) ; if ( res == null ) { if ( ( source ) != null ) { return source . get ( key ) ; } else { return null ; } } else { return ( ( T ) ( res ) ) ; } }\n### UNIT_TEST\ntestConverterAvroArray ( ) { org . spf4j . jmx . JMXBeanMapping mxBeanMapping2 = conv . get ( org . spf4j . tsdb2 . avro . TableDef [ ] . class ) ; \"<AssertPlaceHolder>\" ; org . spf4j . tsdb2 . avro . TableDef [ ] defs = new org . spf4j . tsdb2 . avro . TableDef [ ] { org . spf4j . tsdb2 . avro . TableDef . newBuilder ( ) . setId ( 4 ) . setDescription ( \"bla\" ) . setName ( \"name\" ) . setSampleTime ( 10 ) . setColumns ( java . util . Collections . singletonList ( org . spf4j . tsdb2 . avro . ColumnDef . newBuilder ( ) . setName ( \"bla\" ) . setType ( Type . LONG ) . setDescription ( \"bla\" ) . setUnitOfMeasurement ( \"um\" ) . build ( ) ) ) . build ( ) } ; java . lang . Object toOpenValue = mxBeanMapping2 . toOpenValue ( defs ) ; org . spf4j . jmx . OpenTypeConverterTest . LOG . debug ( \"Open<sp>value<sp>{}<sp>from<sp>{}\" , toOpenValue , defs ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:testConverterAvroArray\n### generate assertion\norg . junit . Assert . assertNotNull ( mxBeanMapping2 )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nget ( ) { java . util . concurrent . ConcurrentMap < com . github . jknack . handlebars . io . TemplateSource , java . util . concurrent . Future < org . apache . commons . lang3 . tuple . Pair < com . github . jknack . handlebars . io . TemplateSource , com . github . jknack . handlebars . Template > > > cache = new java . util . concurrent . ConcurrentHashMap ( ) ; com . github . jknack . handlebars . io . TemplateSource source = new com . github . jknack . handlebars . io . URLTemplateSource ( \"/template.hbs\" , getClass ( ) . getResource ( \"/template.hbs\" ) ) ; com . github . jknack . handlebars . Template template = createMock ( com . github . jknack . handlebars . Template . class ) ; com . github . jknack . handlebars . Parser parser = createMock ( com . github . jknack . handlebars . Parser . class ) ; expect ( parser . parse ( source ) ) . andReturn ( template ) ; replay ( parser , template ) ; org . junit . Assert . assertEquals ( template , new com . github . jknack . handlebars . cache . HighConcurrencyTemplateCache ( cache ) . get ( source , parser ) ) ; org . junit . Assert . assertEquals ( template , new com . github . jknack . handlebars . cache . HighConcurrencyTemplateCache ( cache ) . get ( source , parser ) ) ; verify ( parser , template ) ; }\n### UNIT_TEST\nerrorShouldBeReThrow ( ) { java . util . concurrent . ConcurrentMap < com . github . jknack . handlebars . io . TemplateSource , java . util . concurrent . Future < org . apache . commons . lang3 . tuple . Pair < com . github . jknack . handlebars . io . TemplateSource , com . github . jknack . handlebars . Template > > > cache = createMock ( java . util . concurrent . ConcurrentHashMap . class ) ; com . github . jknack . handlebars . io . TemplateSource source = new com . github . jknack . handlebars . io . URLTemplateSource ( \"/template.hbs\" , getClass ( ) . getResource ( \"/template.hbs\" ) ) ; java . util . concurrent . Future < org . apache . commons . lang3 . tuple . Pair < com . github . jknack . handlebars . io . TemplateSource , com . github . jknack . handlebars . Template > > future = createMock ( java . util . concurrent . Future . class ) ; expect ( cache . get ( source ) ) . andReturn ( future ) ; expect ( future . get ( ) ) . andThrow ( new java . lang . Error ( ) ) ; com . github . jknack . handlebars . Template template = createMock ( com . github . jknack . handlebars . Template . class ) ; org . apache . commons . lang3 . tuple . Pair < com . github . jknack . handlebars . io . TemplateSource , com . github . jknack . handlebars . Template > pair = createMock ( org . apache . commons . lang3 . tuple . Pair . class ) ; expect ( pair . getLeft ( ) ) . andReturn ( source ) ; expect ( pair . getValue ( ) ) . andReturn ( template ) ; expect ( cache . get ( source ) ) . andReturn ( future ) ; expect ( future . get ( ) ) . andReturn ( pair ) . times ( 2 ) ; com . github . jknack . handlebars . Parser parser = createMock ( com . github . jknack . handlebars . Parser . class ) ; replay ( parser , template , cache , future , pair ) ; \"<AssertPlaceHolder>\" ; verify ( parser , template , cache , future , pair ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:errorShouldBeReThrow\n### generate assertion", "label": "org . junit . Assert . assertEquals ( template , new com . github . jknack . handlebars . cache . HighConcurrencyTemplateCache ( cache ) . get ( source , parser ) )"}
{"prompt": "### METHOD_UNDER_TEST\nget ( java . lang . String ) { return com . liferay . journal . content . search . web . configuration . JournalContentSearchWebConfigurationUtil . _configuration . get ( key ) ; }\n### UNIT_TEST\ntestMergeFieldsAfterNewFieldValueIsInsertedInTheMiddleOfSeries ( ) { com . liferay . dynamic . data . mapping . model . DDMForm ddmForm = createDDMForm ( ) ; addDDMFormFields ( ddmForm , createTextDDMFormField ( \"Content\" , \"\" , true , true , false ) ) ; com . liferay . dynamic . data . mapping . model . DDMStructure ddmStructure = createStructure ( \"Test<sp>Structure\" , ddmForm ) ; com . liferay . dynamic . data . mapping . storage . Field existingContentField = createField ( ddmStructure . getStructureId ( ) , \"Content\" , createValuesList ( \"Content<sp>1\" , \"Content<sp>3\" ) , createValuesList ( \"Conteudo<sp>1\" , \"Conteudo<sp>3\" ) ) ; com . liferay . dynamic . data . mapping . storage . Field existingFieldsDisplayField = createFieldsDisplayField ( ddmStructure . getStructureId ( ) , \"Content<sp>1\" 0 ) ; com . liferay . dynamic . data . mapping . storage . Fields existingFields = createFields ( existingContentField , existingFieldsDisplayField ) ; com . liferay . dynamic . data . mapping . storage . Field newContentField = createField ( ddmStructure . getStructureId ( ) , \"Content\" , createValuesList ( \"Content<sp>1\" , \"Content<sp>2\" , \"Content<sp>3\" ) , null ) ; com . liferay . dynamic . data . mapping . storage . Field newFieldsDisplayField = createFieldsDisplayField ( ddmStructure . getStructureId ( ) , ( \"Content_INSTANCE_ovho,Content_INSTANCE_zuvh,\" + \"Content_INSTANCE_yiek\" ) ) ; com . liferay . dynamic . data . mapping . storage . Fields newFields = createFields ( newContentField , newFieldsDisplayField ) ; com . liferay . dynamic . data . mapping . storage . Fields actualFields = _ddm . mergeFields ( newFields , existingFields ) ; com . liferay . dynamic . data . mapping . storage . Field actualContentField = actualFields . get ( \"Content\" ) ; \"<AssertPlaceHolder>\" ; testValues ( actualContentField . getValues ( LocaleUtil . US ) , \"Content<sp>1\" , \"Content<sp>2\" , \"Content<sp>3\" ) ; testValues ( actualContentField . getValues ( LocaleUtil . BRAZIL ) , \"Conteudo<sp>1\" , \"Content<sp>2\" , \"Conteudo<sp>3\" ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:testMergeFieldsAfterNewFieldValueIsInsertedInTheMiddleOfSeries\n### generate assertion\norg . junit . Assert . assertNotNull ( actualContentField )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetMessageDelivery ( java . lang . Long ) { return dataObjectService . find ( org . kuali . rice . kcb . bo . MessageDelivery . class , id ) ; }\n### UNIT_TEST\ntestInvalidRead ( ) { org . kuali . rice . kcb . bo . MessageDelivery m = messageDeliveryService . getMessageDelivery ( java . lang . Long . valueOf ( ( - 1 ) ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getMessageDelivery\n[UNIT_TEST]:testInvalidRead\n### generate assertion", "label": "org . junit . Assert . assertNull ( m )"}
{"prompt": "### METHOD_UNDER_TEST\nisSuccess ( ) { if ( ! ( super . isSuccess ( ) ) ) { return false ; } return checkResults ( result ( ) , rawResult . size ( ) , dataSize ) ; }\n### UNIT_TEST\ntestBootstrap2 ( ) { final java . util . Random rnd = new java . util . Random ( 42 ) ; net . tomp2p . p2p . Peer master = null ; try { net . tomp2p . p2p . Peer [ ] peers = net . tomp2p . Utils2 . createNodes ( 2000 , rnd , 4001 ) ; master = peers [ 0 ] ; java . util . List < net . tomp2p . futures . FutureBootstrap > tmp = new java . util . ArrayList < net . tomp2p . futures . FutureBootstrap > ( ) ; for ( int i = 0 ; i < ( peers . length ) ; i ++ ) { if ( ( peers [ i ] ) != master ) { net . tomp2p . futures . FutureBootstrap res = peers [ i ] . bootstrap ( ) . peerAddress ( master . peerAddress ( ) ) . start ( ) ; tmp . add ( res ) ; } } int i = 0 ; for ( net . tomp2p . futures . FutureBootstrap fm : tmp ) { fm . awaitUninterruptibly ( ) ; if ( fm . isFailed ( ) ) System . err . println ( ( \"FAILL:\" + ( fm . failedReason ( ) ) ) ) ; \"<AssertPlaceHolder>\" ; System . err . println ( ( \"i:\" + ( ++ i ) ) ) ; } } finally { if ( master != null ) { master . shutdown ( ) . await ( ) ; } } }\n[METHOD_UNDER_TEST]:isSuccess\n[UNIT_TEST]:testBootstrap2\n### generate assertion\norg . junit . Assert . assertEquals ( true , fm . isSuccess ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisCancelled ( ) { return _future . isCancelled ( ) ; }\n### UNIT_TEST\ntestRPCWithCancellation ( ) { io . netty . channel . ChannelPipeline channelPipeline = _embeddedChannel . pipeline ( ) ; channelPipeline . addFirst ( new io . netty . channel . ChannelOutboundHandlerAdapter ( ) { @ com . liferay . portal . fabric . netty . rpc . Override public void write ( io . netty . channel . ChannelHandlerContext channelHandlerContext , java . lang . Object object , io . netty . channel . ChannelPromise channelPromise ) { channelPromise . cancel ( true ) ; } } ) ; java . util . concurrent . Future < java . lang . String > future = com . liferay . portal . fabric . netty . rpc . RPCUtil . execute ( _embeddedChannel , new com . liferay . portal . fabric . netty . rpc . RPCUtilTest . ResultRPCCallable ( \"result\" ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isCancelled\n[UNIT_TEST]:testRPCWithCancellation\n### generate assertion", "label": "org . junit . Assert . assertTrue ( future . isCancelled ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFirstName ( ) { return firstName ; }\n### UNIT_TEST\ntestFieldValueOverwritten ( ) { final org . hyalinedto . test . domainclasses . Person dto = org . hyalinedto . api . Hyaline . dtoFromScratch ( john , new org . hyalinedto . api . DTO ( ) { @ org . hyalinedto . test . api . SuppressWarnings ( \"unused\" ) private java . lang . String firstName = \"Ringo\" ; } ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFirstName\n[UNIT_TEST]:testFieldValueOverwritten\n### generate assertion\norg . junit . Assert . assertEquals ( \"Ringo\" , dto . getFirstName ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetN ( ) { return this . nobs ; }\n### UNIT_TEST\ntest20090720 ( ) { org . apache . commons . math4 . stat . descriptive . DescriptiveStatistics descriptiveStatistics = new org . apache . commons . math4 . stat . descriptive . DescriptiveStatistics ( 100 ) ; for ( int i = 0 ; i < 161 ; i ++ ) { descriptiveStatistics . addValue ( 1.2 ) ; } descriptiveStatistics . clear ( ) ; descriptiveStatistics . addValue ( 1.2 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getN\n[UNIT_TEST]:test20090720\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 1 , descriptiveStatistics . getN ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nget ( java . lang . String ) { return com . liferay . journal . content . search . web . configuration . JournalContentSearchWebConfigurationUtil . _configuration . get ( key ) ; }\n### UNIT_TEST\ntestMergeFieldsAfterNewFieldValueIsInsertedInTheMiddleOfSeries ( ) { com . liferay . dynamic . data . mapping . model . DDMForm ddmForm = createDDMForm ( ) ; addDDMFormFields ( ddmForm , createTextDDMFormField ( \"Content\" , \"\" , true , true , false ) ) ; com . liferay . dynamic . data . mapping . model . DDMStructure ddmStructure = createStructure ( \"Test<sp>Structure\" , ddmForm ) ; com . liferay . dynamic . data . mapping . storage . Field existingContentField = createField ( ddmStructure . getStructureId ( ) , \"Content\" , createValuesList ( \"Content<sp>1\" , \"Content<sp>3\" ) , createValuesList ( \"Conteudo<sp>1\" , \"Conteudo<sp>3\" ) ) ; com . liferay . dynamic . data . mapping . storage . Field existingFieldsDisplayField = createFieldsDisplayField ( ddmStructure . getStructureId ( ) , \"Content<sp>1\" 0 ) ; com . liferay . dynamic . data . mapping . storage . Fields existingFields = createFields ( existingContentField , existingFieldsDisplayField ) ; com . liferay . dynamic . data . mapping . storage . Field newContentField = createField ( ddmStructure . getStructureId ( ) , \"Content\" , createValuesList ( \"Content<sp>1\" , \"Content<sp>2\" , \"Content<sp>3\" ) , null ) ; com . liferay . dynamic . data . mapping . storage . Field newFieldsDisplayField = createFieldsDisplayField ( ddmStructure . getStructureId ( ) , ( \"Content_INSTANCE_ovho,Content_INSTANCE_zuvh,\" + \"Content_INSTANCE_yiek\" ) ) ; com . liferay . dynamic . data . mapping . storage . Fields newFields = createFields ( newContentField , newFieldsDisplayField ) ; com . liferay . dynamic . data . mapping . storage . Fields actualFields = _ddm . mergeFields ( newFields , existingFields ) ; com . liferay . dynamic . data . mapping . storage . Field actualContentField = actualFields . get ( \"Content\" ) ; \"<AssertPlaceHolder>\" ; testValues ( actualContentField . getValues ( LocaleUtil . US ) , \"Content<sp>1\" , \"Content<sp>2\" , \"Content<sp>3\" ) ; testValues ( actualContentField . getValues ( LocaleUtil . BRAZIL ) , \"Conteudo<sp>1\" , \"Content<sp>2\" , \"Conteudo<sp>3\" ) ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:testMergeFieldsAfterNewFieldValueIsInsertedInTheMiddleOfSeries\n### generate assertion\norg . junit . Assert . assertNotNull ( actualContentField )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nfind ( ) { return criteriaBuilderFactory . get ( ) ; }\n### UNIT_TEST\nshouldReturnCriteriaBuilder ( ) { com . qcadoo . model . api . types . BelongsToType fieldType = mock ( com . qcadoo . model . api . types . BelongsToType . class ) ; com . qcadoo . model . internal . api . InternalDataDefinition dataDefinition = mock ( com . qcadoo . model . internal . api . InternalDataDefinition . class , com . qcadoo . model . internal . RETURNS_DEEP_STUBS ) ; given ( fieldType . getDataDefinition ( ) ) . willReturn ( dataDefinition ) ; com . qcadoo . model . api . FieldDefinition fieldDefinition = mock ( com . qcadoo . model . api . FieldDefinition . class ) ; given ( fieldDefinition . getType ( ) ) . willReturn ( fieldType ) ; given ( fieldDefinition . getName ( ) ) . willReturn ( \"field\" ) ; given ( dataDefinition . getField ( \"tree\" ) ) . willReturn ( fieldDefinition ) ; com . qcadoo . model . api . search . SearchCriteriaBuilder searchCriteriaBuilder = mock ( com . qcadoo . model . api . search . SearchCriteriaBuilder . class ) ; given ( dataDefinition . find ( ) . createAlias ( fieldDefinition . getName ( ) , fieldDefinition . getName ( ) ) . add ( com . qcadoo . model . api . search . SearchRestrictions . eq ( ( ( fieldDefinition . getName ( ) ) + \".id\" ) , 1L ) ) ) . willReturn ( searchCriteriaBuilder ) ; com . qcadoo . model . api . EntityList list = new com . qcadoo . model . internal . EntityListImpl ( dataDefinition , \"tree\" , 1L ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:find\n[UNIT_TEST]:shouldReturnCriteriaBuilder\n### generate assertion", "label": "org . junit . Assert . assertEquals ( searchCriteriaBuilder , list . find ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nfireAllRules ( ) { return 0 ; }\n### UNIT_TEST\ntestJoinLongToDouble ( ) { final java . lang . String drl1 = ( ( ( ( ( ( ( ( ( \"import<sp>\" + ( org . drools . modelcompiler . TypeCoercionTest . DoubleHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"import<sp>\" ) + ( org . drools . modelcompiler . TypeCoercionTest . LongHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"rule<sp>R<sp>when\\n\" ) + \"<sp>LongHolder(<sp>$l<sp>:<sp>value<sp>)\\n\" ) + \"<sp>DoubleHolder(<sp>value<sp>>=<sp>$l<sp>)\\n\" ) + \"then\\n\" ) + \"end\\n\" ; org . kie . api . runtime . KieSession ksession = getKieSession ( drl1 ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . LongHolder ( ) ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . DoubleHolder ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:fireAllRules\n[UNIT_TEST]:testJoinLongToDouble\n### generate assertion\norg . junit . Assert . assertEquals ( 1 , ksession . fireAllRules ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\napplyRule ( java . lang . String ) { uk . co . hadoopathome . kafkastreams . drools . Message message = new uk . co . hadoopathome . kafkastreams . drools . Message ( value ) ; uk . co . hadoopathome . kafkastreams . drools . DroolsRulesApplier . KIE_SESSION . insert ( message ) ; uk . co . hadoopathome . kafkastreams . drools . DroolsRulesApplier . KIE_SESSION . fireAllRules ( ) ; return message . getContent ( ) ; }\n### UNIT_TEST\ntestRuleNotTriggered ( ) { uk . co . hadoopathome . kafkastreams . drools . DroolsRulesApplier rulesApplier = new uk . co . hadoopathome . kafkastreams . drools . DroolsRulesApplier ( \"IfContainsEPrepend0KS\" ) ; java . lang . String output = rulesApplier . applyRule ( \"canal\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:applyRule\n[UNIT_TEST]:testRuleNotTriggered\n### generate assertion", "label": "org . junit . Assert . assertEquals ( \"canal\" , output )"}
{"prompt": "### METHOD_UNDER_TEST\nisExpired ( long ) { java . util . Date current = new java . util . Date ( ) ; long currentDate = current . getTime ( ) ; long hours = currentDate - pwdRecoveryStartDate ; return hours > ( org . oscm . internal . passwordrecovery . PasswordRecoveryValidator . EXPIRY ) ; }\n### UNIT_TEST\nisExpired_Failed ( ) { java . util . Date current = new java . util . Date ( ) ; long time = current . getTime ( ) ; time = time - 86400020 ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isExpired\n[UNIT_TEST]:isExpired_Failed\n### generate assertion\norg . junit . Assert . assertEquals ( true , org . oscm . internal . passwordrecovery . PasswordRecoveryValidator . isExpired ( time ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetATime ( ) { guard ( org . dcache . nfs . vfs . Stat . StatAttribute . ATIME ) ; return _atime ; }\n### UNIT_TEST\ntestGetATime ( ) { org . dcache . nfs . vfs . Stat stat = new org . dcache . nfs . vfs . Stat ( ) ; stat . setATime ( 1 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getATime\n[UNIT_TEST]:testGetATime\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 1 , stat . getATime ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetId ( ) { return id ; }\n### UNIT_TEST\ntestLookupBlob ( ) { final java . io . File repoPath = setupRepository ( \"testrepo\" ) ; org . libgit2 . jagged . Repository repository = new org . libgit2 . jagged . Repository ( repoPath . getAbsolutePath ( ) ) ; org . libgit2 . jagged . ObjectId oid = new org . libgit2 . jagged . ObjectId ( \"dc48b6c38e967e57965e36c6f7a1c3ec5c3e1ff4\" ) ; org . libgit2 . jagged . Blob blob = repository . lookup ( oid ) ; \"<AssertPlaceHolder>\" ; repository . close ( ) ; }\n[METHOD_UNDER_TEST]:getId\n[UNIT_TEST]:testLookupBlob\n### generate assertion\norg . junit . Assert . assertEquals ( oid , blob . getId ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetAgentId ( io . nuls . kernel . model . NulsDigestData ) { java . lang . String hashHex = hash . getDigestHex ( ) ; return hashHex . substring ( ( ( hashHex . length ( ) ) - 8 ) ) . toUpperCase ( ) ; }\n### UNIT_TEST\ngetAgentId ( ) { io . nuls . kernel . model . NulsDigestData hash = io . nuls . kernel . model . NulsDigestData . calcDigestData ( \"123123\" . getBytes ( ) ) ; System . out . println ( io . nuls . consensus . poc . protocol . util . PoConvertUtil . getAgentId ( hash ) ) ; System . out . println ( hash ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getAgentId\n[UNIT_TEST]:getAgentId\n### generate assertion", "label": "org . junit . Assert . assertTrue ( true )"}
{"prompt": "### METHOD_UNDER_TEST\ngetEvaluations ( ) { return evaluations ; }\n### UNIT_TEST\nshouldGetEvaluations ( ) { org . springframework . test . util . ReflectionTestUtils . setField ( algorithm , \"evaluations\" , 15 ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getEvaluations\n[UNIT_TEST]:shouldGetEvaluations\n### generate assertion\norg . junit . Assert . assertEquals ( 15 , algorithm . getEvaluations ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetSelection ( ) { checkWidget ( ) ; org . eclipse . nebula . widgets . grid . GridItem [ ] result = new org . eclipse . nebula . widgets . grid . GridItem [ 0 ] ; if ( cellSelectionEnabled ) { } else { result = selectedItems . toArray ( new org . eclipse . nebula . widgets . grid . GridItem [ selectedItems . size ( ) ] ) ; } return result ; }\n### UNIT_TEST\ntestHandleSetSelection_multi ( ) { handler = new org . eclipse . swt . internal . widgets . treekit . TreeOperationHandler ( tree ) ; org . eclipse . swt . internal . widgets . treekit . TreeOperationHandler_Test . createTreeItems ( tree , 3 ) ; org . eclipse . swt . widgets . TreeItem item1 = tree . getItem ( 0 ) ; org . eclipse . swt . widgets . TreeItem item2 = tree . getItem ( 2 ) ; org . eclipse . rap . json . JsonArray selection = new org . eclipse . rap . json . JsonArray ( ) . add ( getId ( item1 ) ) . add ( getId ( item2 ) ) ; handler . handleSet ( new org . eclipse . rap . json . JsonObject ( ) . add ( \"selection\" , selection ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getSelection\n[UNIT_TEST]:testHandleSetSelection_multi\n### generate assertion", "label": "org . junit . Assert . assertArrayEquals ( new org . eclipse . swt . widgets . TreeItem [ ] { item1 , item2 } , tree . getSelection ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nis ( T ) { return new com . github . drrb . rust . netbeans . util . Option < > ( value ) ; }\n### UNIT_TEST\nshouldOnlyReturnMessagesFromTargetFile ( ) { java . io . File mainFile = tempFolder . newFile ( \"main.rs\" ) ; java . io . File modFile = tempFolder . newFile ( \"other.rs\" ) ; java . nio . file . Files . write ( modFile . toPath ( ) , \"pub<sp>fn<sp>other_function()<sp>{<sp>x<sp>x<sp>}\" . getBytes ( com . github . drrb . rust . netbeans . rustbridge . UTF_8 ) ) ; java . util . List < com . github . drrb . rust . netbeans . rustbridge . RustParseMessage > messages = new com . github . drrb . rust . netbeans . rustbridge . RustCompiler ( ) . compile ( mainFile , \"mod<sp>other;\\nfn<sp>main()<sp>{<sp>other::other_function()<sp>}\" , mainFile , com . github . drrb . rust . netbeans . configuration . RustConfiguration . get ( ) . getLibrariesPaths ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:is\n[UNIT_TEST]:shouldOnlyReturnMessagesFromTargetFile\n### generate assertion\norg . junit . Assert . assertThat ( messages , is ( empty ( ) ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nreceiverMessageFromLink ( java . lang . String ) { com . microsoft . azure . sdk . iot . deps . transport . amqp . AmqpMessage result ; if ( ( linkName == null ) || ( linkName . isEmpty ( ) ) ) { result = null ; } else if ( ( this . receiverLink ) == null ) { result = null ; } else { com . microsoft . azure . sdk . iot . deps . transport . amqp . Delivery delivery = this . receiverLink . current ( ) ; if ( ( ( ( linkName . equals ( this . receiverLinkTag ) ) && ( delivery != null ) ) && ( delivery . isReadable ( ) ) ) && ( ! ( delivery . isPartial ( ) ) ) ) { int size = delivery . pending ( ) ; byte [ ] buffer = new byte [ size ] ; int read = this . receiverLink . recv ( buffer , 0 , buffer . length ) ; this . receiverLink . advance ( ) ; result = new com . microsoft . azure . sdk . iot . deps . transport . amqp . AmqpMessage ( ) ; result . decode ( buffer , 0 , read ) ; } else { result = null ; } } return result ; }\n### UNIT_TEST\nReceiverMessageFromLinkReceiverLinkNull ( ) { com . microsoft . azure . sdk . iot . deps . transport . amqp . AmqpDeviceOperations amqpDeviceOperation = new com . microsoft . azure . sdk . iot . deps . transport . amqp . AmqpDeviceOperations ( ) ; new mockit . NonStrictExpectations ( ) { { } } ; com . microsoft . azure . sdk . iot . deps . transport . amqp . AmqpMessage result = amqpDeviceOperation . receiverMessageFromLink ( tests . unit . com . microsoft . azure . sdk . iot . deps . transport . amqp . AmqpDeviceOperationsTest . TEST_SENDER_LINK_NAME ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:receiverMessageFromLink\n[UNIT_TEST]:ReceiverMessageFromLinkReceiverLinkNull\n### generate assertion", "label": "org . junit . Assert . assertNull ( result )"}
{"prompt": "### METHOD_UNDER_TEST\ngetCurrentSession ( ) { return sessionFactory . getCurrentSession ( ) ; }\n### UNIT_TEST\nfetchModeSelectCriteria ( ) { persistBooks ( ( ) -> new com . example . entities . BookFetchModeSelect ( ) ) ; System . out . println ( \"FetchMode.SELECT<sp>Criteria<sp>API\" ) ; java . util . List books = getCurrentSession ( ) . createCriteria ( com . example . entities . BookFetchModeSelect . class ) . list ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getCurrentSession\n[UNIT_TEST]:fetchModeSelectCriteria\n### generate assertion\norg . junit . Assert . assertEquals ( 4 , books . size ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetStylesSource ( ) { return this . stylesSource ; }\n### UNIT_TEST\ntestLoadSaveLoad ( ) { try ( org . apache . poi . xssf . usermodel . XSSFWorkbook workbook = org . apache . poi . xssf . XSSFTestDataSamples . openSampleWorkbook ( org . apache . poi . xssf . model . TestStylesTable . testFile ) ) { \"<AssertPlaceHolder>\" ; org . apache . poi . xssf . model . StylesTable st = workbook . getStylesSource ( ) ; doTestExisting ( st ) ; st = org . apache . poi . xssf . XSSFTestDataSamples . writeOutAndReadBack ( workbook ) . getStylesSource ( ) ; doTestExisting ( st ) ; } }\n[METHOD_UNDER_TEST]:getStylesSource\n[UNIT_TEST]:testLoadSaveLoad\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( workbook . getStylesSource ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nfireAllRules ( ) { return 0 ; }\n### UNIT_TEST\ntestJoinLongToDouble ( ) { final java . lang . String drl1 = ( ( ( ( ( ( ( ( ( \"import<sp>\" + ( org . drools . modelcompiler . TypeCoercionTest . DoubleHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"import<sp>\" ) + ( org . drools . modelcompiler . TypeCoercionTest . LongHolder . class . getCanonicalName ( ) ) ) + \";\\n\" ) + \"rule<sp>R<sp>when\\n\" ) + \"<sp>LongHolder(<sp>$l<sp>:<sp>value<sp>)\\n\" ) + \"<sp>DoubleHolder(<sp>value<sp>>=<sp>$l<sp>)\\n\" ) + \"then\\n\" ) + \"end\\n\" ; org . kie . api . runtime . KieSession ksession = getKieSession ( drl1 ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . LongHolder ( ) ) ; ksession . insert ( new org . drools . modelcompiler . TypeCoercionTest . DoubleHolder ( ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:fireAllRules\n[UNIT_TEST]:testJoinLongToDouble\n### generate assertion\norg . junit . Assert . assertEquals ( 1 , ksession . fireAllRules ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nreadDouble ( java . io . File ) { return new java . io . DataInputStream ( new java . io . FileInputStream ( file ) ) . readDouble ( ) ; }\n### UNIT_TEST\nshouldWriteDoubleToFile ( ) { tdd . junit . FileWriter writer = null ; java . io . File file = null ; try { file = java . io . File . createTempFile ( \"FileWriterTest\" , \"\" ) ; writer = new tdd . junit . FileWriter ( file ) ; writer . writeDouble ( 40.4 ) ; \"<AssertPlaceHolder>\" ; } finally { closeWriter ( writer ) ; deleteFile ( file ) ; } }\n[METHOD_UNDER_TEST]:readDouble\n[UNIT_TEST]:shouldWriteDoubleToFile\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 40.4 , readDouble ( file ) , 0 )"}
{"prompt": "### METHOD_UNDER_TEST\ngetId ( ) { return this . id ; }\n### UNIT_TEST\ntestCreate ( ) { org . oscarehr . common . model . MeasurementType entity = new org . oscarehr . common . model . MeasurementType ( ) ; org . oscarehr . common . dao . utils . EntityDataGenerator . generateTestDataForModelClass ( entity ) ; dao . persist ( entity ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getId\n[UNIT_TEST]:testCreate\n### generate assertion\norg . junit . Assert . assertNotNull ( entity . getId ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ngetData ( ) { return data ; }\n### UNIT_TEST\ntestGetData ( ) { com . eclipsesource . tabris . ui . PageData data = mock ( com . eclipsesource . tabris . ui . PageData . class ) ; webPage = new com . eclipsesource . tabris . internal . ui . web . WebPage ( ui , uiRenderer , descriptor , data ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getData\n[UNIT_TEST]:testGetData\n### generate assertion", "label": "org . junit . Assert . assertSame ( data , webPage . getData ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( com . hartwig . hmftools . common . purple . region . FittedRegion ) { return new java . util . StringJoiner ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . DELIMITER ) . add ( java . lang . String . valueOf ( copyNumber . chromosome ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . start ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . end ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . status ( ) ) ) . add ( \"\" ) . add ( java . lang . String . valueOf ( copyNumber . bafCount ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . observedBAF ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . minorAllelePloidy ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . minorAllelePloidyDeviation ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . observedTumorRatio ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . observedNormalRatio ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . majorAllelePloidy ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . majorAllelePloidyDeviation ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . deviationPenalty ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . tumorCopyNumber ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . fittedTumorCopyNumber ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . fittedBAF ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . refNormalisedCopyNumber ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . ratioSupport ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . support ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . depthWindowCount ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . tumorBAF ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . gcContent ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . svCluster ( ) ) ) . add ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . FORMAT . format ( copyNumber . eventPenalty ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . minStart ( ) ) ) . add ( java . lang . String . valueOf ( copyNumber . maxStart ( ) ) ) . toString ( ) ; }\n### UNIT_TEST\ntestToFromString ( ) { final com . hartwig . hmftools . common . purple . region . FittedRegion expected = com . hartwig . hmftools . common . purple . region . FittedRegionFileTest . createRandom ( new java . util . Random ( ) ) ; final com . hartwig . hmftools . common . purple . region . FittedRegion decoded = com . hartwig . hmftools . common . purple . region . FittedRegionFile . fromString ( com . hartwig . hmftools . common . purple . region . FittedRegionFile . toString ( expected ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testToFromString\n### generate assertion\norg . junit . Assert . assertEquals ( expected , decoded )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ntoString ( ) { final int maxLen = 10 ; java . lang . StringBuilder builder = new java . lang . StringBuilder ( ) ; builder . append ( \"DataProfile<sp>[file=\" ) . append ( file ) . append ( \",<sp>domainObject=\" ) . append ( domainObject ) . append ( \",<sp>irodsTagValues=\" 1 ) . append ( ( ( metadata ) != null ? metadata . subList ( 0 , java . lang . Math . min ( metadata . size ( ) , maxLen ) ) : null ) ) . append ( \",<sp>acls=\" ) . append ( ( ( acls ) != null ? acls . subList ( 0 , java . lang . Math . min ( acls . size ( ) , maxLen ) ) : null ) ) . append ( \",<sp>isStarred=\" ) . append ( isStarred ) . append ( \",<sp>isShared=\" ) . append ( isShared ) . append ( \",<sp>mimeType=\" ) . append ( mimeType ) . append ( \",<sp>irodsTagValues=\" 0 ) . append ( infoType ) . append ( \",<sp>irodsTagValues=\" ) . append ( ( ( irodsTagValues ) != null ? irodsTagValues . subList ( 0 , java . lang . Math . min ( irodsTagValues . size ( ) , maxLen ) ) : null ) ) . append ( \",<sp>parentPath=\" ) . append ( parentPath ) . append ( \",<sp>irodsTagValues=\" 2 ) . append ( childName ) . append ( \",<sp>pathComponents=\" ) . append ( ( ( pathComponents ) != null ? pathComponents . subList ( 0 , java . lang . Math . min ( pathComponents . size ( ) , maxLen ) ) : null ) ) . append ( \"]\" ) ; return builder . toString ( ) ; }\n### UNIT_TEST\ntestModifyUserTypeCheckXML ( ) { java . lang . String userName = \"test\" ; org . irods . jargon . core . protovalues . UserTypeEnum userType = org . irods . jargon . core . protovalues . UserTypeEnum . RODS_ADMIN ; org . irods . jargon . core . packinstr . GeneralAdminInp pi = org . irods . jargon . core . packinstr . GeneralAdminInp . instanceForModifyUserType ( userName , userType ) ; java . lang . String tagOut = pi . getParsedTags ( ) ; java . lang . StringBuilder sb = new java . lang . StringBuilder ( ) ; sb . append ( \"<generalAdminInp_PI><arg0>modify</arg0>\\n\" ) ; sb . append ( \"<arg1>user</arg1>\\n\" ) ; sb . append ( \"<arg2>test</arg2>\\n\" ) ; sb . append ( \"<arg3>type</arg3>\\n\" ) ; sb . append ( \"<arg4>rodsadmin</arg4>\\n\" ) ; sb . append ( \"<arg5></arg5>\\n\" ) ; sb . append ( \"<arg6></arg6>\\n\" ) ; sb . append ( \"<arg3>type</arg3>\\n\" 0 ) ; sb . append ( \"<arg3>type</arg3>\\n\" 1 ) ; sb . append ( \"<arg9></arg9>\\n\" ) ; sb . append ( \"</generalAdminInp_PI>\\n\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testModifyUserTypeCheckXML\n### generate assertion", "label": "org . junit . Assert . assertEquals ( \"<arg3>type</arg3>\\n\" 2 , sb . toString ( ) , tagOut )"}
{"prompt": "### METHOD_UNDER_TEST\nnext ( ) { if ( isClosed ) { throw new java . sql . SQLException ( \"Operation<sp>not<sp>permit<sp>on<sp>a<sp>closed<sp>resultSet\" , \"HY000\" ) ; } if ( ( rowPointer ) < ( ( dataSize ) - 1 ) ) { ( rowPointer ) ++ ; return true ; } else { if ( ( streaming ) && ( ! ( isEof ) ) ) { lock . lock ( ) ; try { if ( ! ( isEof ) ) { nextStreamingValue ( ) ; } } catch ( java . io . IOException ioe ) { throw handleIoException ( ioe ) ; } finally { lock . unlock ( ) ; } if ( ( resultSetScrollType ) == ( TYPE_FORWARD_ONLY ) ) { rowPointer = 0 ; return ( dataSize ) > 0 ; } else { ( rowPointer ) ++ ; return ( dataSize ) > ( rowPointer ) ; } } rowPointer = dataSize ; return false ; } }\n### UNIT_TEST\ntimeTest3 ( ) { java . sql . Statement stmt = sharedConnection . createStatement ( ) ; java . sql . ResultSet rs = stmt . executeQuery ( \"select<sp>'aaa'<sp>as<sp>a\" ) ; \"<AssertPlaceHolder>\" ; rs . getTimestamp ( \"a\" ) ; }\n[METHOD_UNDER_TEST]:next\n[UNIT_TEST]:timeTest3\n### generate assertion\norg . junit . Assert . assertTrue ( rs . next ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nclose ( ) { input . close ( ) ; }\n### UNIT_TEST\nrecordAndVerifyWithMixedCascadeLevels ( mockit . CascadingParametersTest$SocketFactory ) { new mockit . Expectations ( ) { { sf . createSocket ( \"first\" , 80 ) . getKeepAlive ( ) ; result = true ; sf . createSocket ( \"second\" , anyInt ) . getChannel ( ) . close ( ) ; times = 1 ; } } ; sf . createSocket ( \"second\" , 80 ) . getChannel ( ) . close ( ) ; \"<AssertPlaceHolder>\" ; sf . createSocket ( \"first\" , 8080 ) . getChannel ( ) . provider ( ) . openPipe ( ) ; new mockit . Verifications ( ) { { sf . createSocket ( \"first\" , 8080 ) . getChannel ( ) . provider ( ) . openPipe ( ) ; } } ; }\n[METHOD_UNDER_TEST]:close\n[UNIT_TEST]:recordAndVerifyWithMixedCascadeLevels\n### generate assertion", "label": "org . junit . Assert . assertTrue ( sf . createSocket ( \"first\" , 80 ) . getKeepAlive ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFullName ( ) { return fullName ; }\n### UNIT_TEST\ntestFullName ( ) { org . eclipse . orion . server . core . metastore . WorkspaceInfo workspaceInfo = new org . eclipse . orion . server . core . metastore . WorkspaceInfo ( ) ; java . lang . String fullName = \"Test<sp>Workspace\" ; workspaceInfo . setFullName ( fullName ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getFullName\n[UNIT_TEST]:testFullName\n### generate assertion\norg . junit . Assert . assertEquals ( fullName , workspaceInfo . getFullName ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nconfigureWhiteList ( com . intel . mtwilson . TxtHostRecord ) { java . lang . String result = text ( httpPost ( msurl ( \"/host/whitelist\" ) , toJSON ( hostObj ) ) ) ; return \"true\" . equals ( result ) ; }\n### UNIT_TEST\ntestAddIntelHost ( ) { java . util . List < com . intel . mtwilson . datatypes . ConnectionString > hosts = com . intel . mtwilson . My . env ( ) . getHostConnectionList ( ) ; java . util . List < com . intel . mtwilson . datatypes . ConnectionString > intel = getVendorHosts ( hosts , Vendor . INTEL ) ; if ( intel . isEmpty ( ) ) { throw new java . lang . IllegalArgumentException ( \"No<sp>Intel<sp>hosts<sp>in<sp>your<sp>environment\" ) ; } for ( com . intel . mtwilson . datatypes . ConnectionString conn : intel ) { try { System . out . println ( ( \"Adding<sp>\" + conn ) ) ; com . intel . mtwilson . datatypes . TxtHostRecord gkvHost = new com . intel . mtwilson . datatypes . TxtHostRecord ( ) ; gkvHost . HostName = conn . getManagementServerName ( ) ; gkvHost . AddOn_Connection_String = conn . getConnectionStringWithPrefix ( ) ; com . intel . mtwilson . datatypes . HostConfigData hostdata = new com . intel . mtwilson . datatypes . HostConfigData ( ) ; hostdata . setRegisterHost ( false ) ; hostdata . setTxtHostRecord ( gkvHost ) ; boolean success = com . intel . mtwilson . My . client ( ) . configureWhiteList ( hostdata ) ; \"<AssertPlaceHolder>\" ; } catch ( test . api . ApiException e ) { if ( ( e . getErrorCode ( ) ) == ( ErrorCode . MS_HOST_COMMUNICATION_ERROR . getErrorCode ( ) ) ) { System . err . println ( ( ( ( \"Cannot<sp>add<sp>host<sp><\" + ( conn . getConnectionStringWithPrefix ( ) ) ) + \">:<sp>\" ) + ( e . getMessage ( ) ) ) ) ; } } } }\n[METHOD_UNDER_TEST]:configureWhiteList\n[UNIT_TEST]:testAddIntelHost\n### generate assertion", "label": "org . junit . Assert . assertTrue ( success )"}
{"prompt": "### METHOD_UNDER_TEST\nisExpired ( long ) { java . util . Date current = new java . util . Date ( ) ; long currentDate = current . getTime ( ) ; long hours = currentDate - pwdRecoveryStartDate ; return hours > ( org . oscm . internal . passwordrecovery . PasswordRecoveryValidator . EXPIRY ) ; }\n### UNIT_TEST\nisExpired_Failed ( ) { java . util . Date current = new java . util . Date ( ) ; long time = current . getTime ( ) ; time = time - 86400020 ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isExpired\n[UNIT_TEST]:isExpired_Failed\n### generate assertion\norg . junit . Assert . assertEquals ( true , org . oscm . internal . passwordrecovery . PasswordRecoveryValidator . isExpired ( time ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nextractStartTime ( ucar . nc2 . NetcdfFile ) { return org . esa . beam . binning . reader . BinnedProductReader . extractTime ( netcdfFile , \"time_coverage_start\" ) ; }\n### UNIT_TEST\ntestExtractStartTime_NoTimeInfo ( ) { final java . net . URL resource = getClass ( ) . getResource ( \"test_without_time_info.nc\" ) ; final ucar . nc2 . NetcdfFile netcdfFile = ucar . nc2 . NetcdfFile . openInMemory ( resource . toURI ( ) ) ; org . esa . beam . framework . datamodel . ProductData . UTC startTime = org . esa . beam . binning . reader . BinnedProductReader . extractStartTime ( netcdfFile ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:extractStartTime\n[UNIT_TEST]:testExtractStartTime_NoTimeInfo\n### generate assertion", "label": "org . junit . Assert . assertNull ( startTime )"}
{"prompt": "### METHOD_UNDER_TEST\nsize ( ) { try { return ins . available ( ) ; } catch ( java . io . IOException e ) { throw org . nutz . lang . Lang . wrapThrow ( e ) ; } }\n### UNIT_TEST\ntest_param_names ( ) { org . nutz . dao . impl . sql . NutSql sql = org . nutz . dao . impl . sql . SqlLiteralTest . L ( \"UPDATE<sp>dao_platoon<sp>SET<sp>name=@name1,base=@baseName2,leader=@leaderName3<sp>WHERE<sp>id=@id4\" ) ; java . lang . String [ ] paramNames = sql . literal . getParamIndexes ( ) . names ( ) . toArray ( new java . lang . String [ sql . literal . getParamIndexes ( ) . names ( ) . size ( ) ] ) ; java . lang . String [ ] result = new java . lang . String [ ] { \"leaderName3\" , \"id4\" , \"baseName2\" , \"name1\" } ; java . util . Arrays . sort ( paramNames ) ; java . util . Arrays . sort ( result ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:test_param_names\n### generate assertion\norg . junit . Assert . assertArrayEquals ( paramNames , result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nvalueOf ( long ) { return new org . postgresql . replication . LogSequenceNumber ( value ) ; }\n### UNIT_TEST\ntestEqualLSN ( ) { org . postgresql . replication . LogSequenceNumber first = org . postgresql . replication . LogSequenceNumber . valueOf ( \"0/15D690F8\" ) ; org . postgresql . replication . LogSequenceNumber second = org . postgresql . replication . LogSequenceNumber . valueOf ( \"0/15D690F8\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:valueOf\n[UNIT_TEST]:testEqualLSN\n### generate assertion", "label": "org . junit . Assert . assertThat ( first , org . hamcrest . CoreMatchers . equalTo ( second ) )"}
{"prompt": "### METHOD_UNDER_TEST\nnext ( ) { if ( isClosed ) { throw new java . sql . SQLException ( \"Operation<sp>not<sp>permit<sp>on<sp>a<sp>closed<sp>resultSet\" , \"HY000\" ) ; } if ( ( rowPointer ) < ( ( dataSize ) - 1 ) ) { ( rowPointer ) ++ ; return true ; } else { if ( ( streaming ) && ( ! ( isEof ) ) ) { lock . lock ( ) ; try { if ( ! ( isEof ) ) { nextStreamingValue ( ) ; } } catch ( java . io . IOException ioe ) { throw handleIoException ( ioe ) ; } finally { lock . unlock ( ) ; } if ( ( resultSetScrollType ) == ( TYPE_FORWARD_ONLY ) ) { rowPointer = 0 ; return ( dataSize ) > 0 ; } else { ( rowPointer ) ++ ; return ( dataSize ) > ( rowPointer ) ; } } rowPointer = dataSize ; return false ; } }\n### UNIT_TEST\ntimeTest3 ( ) { java . sql . Statement stmt = sharedConnection . createStatement ( ) ; java . sql . ResultSet rs = stmt . executeQuery ( \"select<sp>'aaa'<sp>as<sp>a\" ) ; \"<AssertPlaceHolder>\" ; rs . getTimestamp ( \"a\" ) ; }\n[METHOD_UNDER_TEST]:next\n[UNIT_TEST]:timeTest3\n### generate assertion\norg . junit . Assert . assertTrue ( rs . next ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nback ( ) { if ( ( org . eclipse . swt . chromium . Chromium . lib ) == null ) { org . eclipse . swt . SWT . error ( SWT . ERROR_FAILED_LOAD_LIBRARY ) ; } if ( canGoBack ) { org . eclipse . swt . chromium . Chromium . lib . cefswt_go_back ( browser ) ; return true ; } return false ; }\n### UNIT_TEST\ntest_back ( ) { for ( int i = 0 ; i < 2 ; i ++ ) { browser . back ( ) ; } boolean result = browser . back ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:back\n[UNIT_TEST]:test_back\n### generate assertion", "label": "org . junit . Assert . assertFalse ( result )"}
{"prompt": "### METHOD_UNDER_TEST\nfindIds ( ) { new org . tests . model . cache . EColAB ( \"03\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"04\" , \"someId\" ) . save ( ) ; new org . tests . model . cache . EColAB ( \"05\" , \"someId\" ) . save ( ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; java . util . List < java . lang . Integer > colA_first = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . Integer > colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . ON ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; java . util . List < java . lang . String > sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( colA_first ) . isSameAs ( colA_second ) ; assertThat ( colA_first ) . hasSize ( 3 ) ; assertThat ( sql ) . hasSize ( 1 ) ; org . ebeantest . LoggedSqlCollector . start ( ) ; colA_second = io . ebean . Ebean . find ( org . tests . model . cache . EColAB . class ) . setUseQueryCache ( CacheMode . PUT ) . where ( ) . eq ( \"columnB\" , \"someId\" ) . findIds ( ) ; sql = org . ebeantest . LoggedSqlCollector . stop ( ) ; assertThat ( sql ) . hasSize ( 1 ) ; }\n### UNIT_TEST\ntestQuery ( ) { org . tests . model . basic . Truck truck = new org . tests . model . basic . Truck ( ) ; truck . setLicenseNumber ( \"TK123\" ) ; io . ebean . Ebean . save ( truck ) ; java . util . List < java . lang . Integer > ids = io . ebean . Ebean . find ( org . tests . model . basic . Vehicle . class ) . findIds ( ) ; \"<AssertPlaceHolder>\" ; io . ebean . Ebean . delete ( truck ) ; }\n[METHOD_UNDER_TEST]:findIds\n[UNIT_TEST]:testQuery\n### generate assertion\norg . junit . Assert . assertNotNull ( ids )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsaveAll ( java . lang . Iterable ) { org . springframework . util . Assert . notNull ( entities , \"Entities<sp>must<sp>not<sp>be<sp>null!\" ) ; return saveAll ( reactor . core . publisher . Flux . fromIterable ( entities ) ) ; }\n### UNIT_TEST\nshouldSaveIterableEntities ( ) { java . lang . String documentId = randomNumeric ( 5 ) ; org . springframework . data . elasticsearch . entities . SampleEntity sampleEntity1 = new org . springframework . data . elasticsearch . entities . SampleEntity ( ) ; sampleEntity1 . setId ( documentId ) ; sampleEntity1 . setMessage ( \"hello<sp>world.\" ) ; sampleEntity1 . setVersion ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . String documentId2 = randomNumeric ( 5 ) ; org . springframework . data . elasticsearch . entities . SampleEntity sampleEntity2 = new org . springframework . data . elasticsearch . entities . SampleEntity ( ) ; sampleEntity2 . setId ( documentId2 ) ; sampleEntity2 . setMessage ( \"hello<sp>world.\" ) ; sampleEntity2 . setVersion ( java . lang . System . currentTimeMillis ( ) ) ; java . lang . Iterable < org . springframework . data . elasticsearch . entities . SampleEntity > sampleEntities = java . util . Arrays . asList ( sampleEntity1 , sampleEntity2 ) ; repository . saveAll ( sampleEntities ) ; org . springframework . data . domain . Page < org . springframework . data . elasticsearch . entities . SampleEntity > entities = repository . search ( termQuery ( \"id\" , documentId ) , org . springframework . data . domain . PageRequest . of ( 0 , 50 ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:saveAll\n[UNIT_TEST]:shouldSaveIterableEntities\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( entities )"}
{"prompt": "### METHOD_UNDER_TEST\nsize ( ) { return ( ( ( historicProcessInstanceIds . size ( ) ) + ( historicDecisionInstanceIds . size ( ) ) ) + ( historicCaseInstanceIds . size ( ) ) ) + ( historicBatchIds . size ( ) ) ; }\n### UNIT_TEST\ntestQueryByType ( ) { helper . createMigrationBatchWithSize ( 1 ) ; helper . createMigrationBatchWithSize ( 1 ) ; java . util . List < org . camunda . bpm . engine . batch . BatchStatistics > statistics = managementService . createBatchStatisticsQuery ( ) . type ( Batch . TYPE_PROCESS_INSTANCE_MIGRATION ) . list ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:testQueryByType\n### generate assertion\norg . junit . Assert . assertEquals ( 2 , statistics . size ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ncreateClusterStatsRequestBuilder ( com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest ) { org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequestBuilder clusterStatsRequestBuilder = ClusterStatsAction . INSTANCE . newRequestBuilder ( _elasticsearchClientResolver . getClient ( ) ) ; return clusterStatsRequestBuilder ; }\n### UNIT_TEST\ntestClusterRequestTranslation ( ) { com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest statsClusterRequest = new com . liferay . portal . search . engine . adapter . cluster . StatsClusterRequest ( new java . lang . String [ ] { com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorTest . _INDEX_NAME } ) ; com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorImpl statsClusterRequestExecutorImpl = new com . liferay . portal . search . elasticsearch6 . internal . search . engine . adapter . cluster . StatsClusterRequestExecutorImpl ( ) { { setElasticsearchClientResolver ( _elasticsearchFixture ) ; } } ; org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequestBuilder clusterStatsRequestBuilder = statsClusterRequestExecutorImpl . createClusterStatsRequestBuilder ( statsClusterRequest ) ; org . elasticsearch . action . admin . cluster . stats . ClusterStatsRequest clusterStatsRequest = clusterStatsRequestBuilder . request ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:createClusterStatsRequestBuilder\n[UNIT_TEST]:testClusterRequestTranslation\n### generate assertion", "label": "org . junit . Assert . assertNotNull ( clusterStatsRequest )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { return ( ( ( ( ( ( ( \"[\" + ( grammar . name ) ) + \".\" ) + ( name ) ) + \",index=\" ) + ( index ) ) + \",line=\" ) + ( tree . getToken ( ) . getLine ( ) ) ) + \"]\" ; }\n### UNIT_TEST\ntestRepeatsVisit2 ( ) { org . antlr . runtime . tree . TreeWizard wiz = new org . antlr . runtime . tree . TreeWizard ( org . antlr . test . TestTreeWizard . adaptor , org . antlr . test . TestTreeWizard . tokens ) ; org . antlr . runtime . tree . CommonTree t = ( ( org . antlr . runtime . tree . CommonTree ) ( wiz . create ( \"(A<sp>B<sp>(A<sp>C<sp>B)<sp>B<sp>D<sp>D)\" ) ) ) ; final java . util . List < java . lang . Object > elements = new java . util . ArrayList < java . lang . Object > ( ) ; wiz . visit ( t , wiz . getTokenType ( \"A\" ) , new org . antlr . runtime . tree . TreeWizard . Visitor ( ) { @ org . antlr . test . Override public void visit ( java . lang . Object t ) { elements . add ( t ) ; } } ) ; java . lang . String found = elements . toString ( ) ; java . lang . String expecting = \"[A,<sp>A]\" ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testRepeatsVisit2\n### generate assertion\norg . junit . Assert . assertEquals ( expecting , found )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ntoString ( ) { return java . lang . String . format ( \"%s,<sp>%s\" , rounds ( latitudeWGS84 , 4 ) , rounds ( longitudeWGS84 , 4 ) ) ; }\n### UNIT_TEST\ntestToString ( ) { java . lang . String expResult = \"47.4212,<sp>10.9863\" ; java . lang . String result = de . nx42 . maps4cim . util . gis . CoordinateTest . instance . toString ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testToString\n### generate assertion", "label": "org . junit . Assert . assertEquals ( expResult , result )"}
{"prompt": "### METHOD_UNDER_TEST\nsize ( ) { try { return ins . available ( ) ; } catch ( java . io . IOException e ) { throw org . nutz . lang . Lang . wrapThrow ( e ) ; } }\n### UNIT_TEST\ntest_param_names ( ) { org . nutz . dao . impl . sql . NutSql sql = org . nutz . dao . impl . sql . SqlLiteralTest . L ( \"UPDATE<sp>dao_platoon<sp>SET<sp>name=@name1,base=@baseName2,leader=@leaderName3<sp>WHERE<sp>id=@id4\" ) ; java . lang . String [ ] paramNames = sql . literal . getParamIndexes ( ) . names ( ) . toArray ( new java . lang . String [ sql . literal . getParamIndexes ( ) . names ( ) . size ( ) ] ) ; java . lang . String [ ] result = new java . lang . String [ ] { \"leaderName3\" , \"id4\" , \"baseName2\" , \"name1\" } ; java . util . Arrays . sort ( paramNames ) ; java . util . Arrays . sort ( result ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:test_param_names\n### generate assertion\norg . junit . Assert . assertArrayEquals ( paramNames , result )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nsize ( ) { return rows . size ( ) ; }\n### UNIT_TEST\ngraph_union_1q ( ) { java . util . List < org . apache . jena . sparql . engine . binding . Binding > results = exec ( ( ( \"(graph<sp><\" + ( Quad . unionGraph . getURI ( ) ) ) + \"><sp>(bgp<sp>(<s2><sp>?p<sp>?o)))\" ) , org . apache . jena . sparql . core . TestSpecialGraphNames . Mode . QUADS ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:size\n[UNIT_TEST]:graph_union_1q\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 2 , results . size ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nisEmpty ( ) { return map . isEmpty ( ) ; }\n### UNIT_TEST\ntestGetDirectChildrenFromLeaf_shouldReturnEmptyList ( ) { java . util . List < org . apache . directory . shared . ldap . model . entry . Entry > children = dao . getDirectChildren ( baseDn ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isEmpty\n[UNIT_TEST]:testGetDirectChildrenFromLeaf_shouldReturnEmptyList\n### generate assertion\norg . junit . Assert . assertThat ( children . isEmpty ( ) , org . hamcrest . Matchers . is ( true ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisHidden ( ) { throw new java . lang . UnsupportedOperationException ( ) ; }\n### UNIT_TEST\ntestRefreshLayoutMainInitial ( ) { org . talend . components . jira . tjiraoutput . TJiraOutputProperties properties = new org . talend . components . jira . tjiraoutput . TJiraOutputProperties ( \"root\" ) ; properties . init ( ) ; properties . refreshLayout ( properties . getForm ( Form . MAIN ) ) ; boolean deleteSubtasksHidden = properties . getForm ( Form . ADVANCED ) . getWidget ( \"deleteSubtasks\" ) . isHidden ( ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isHidden\n[UNIT_TEST]:testRefreshLayoutMainInitial\n### generate assertion", "label": "org . junit . Assert . assertTrue ( deleteSubtasksHidden )"}
{"prompt": "### METHOD_UNDER_TEST\ntoString ( ) { return ( ( ( ( ( ( ( \"[\" + ( grammar . name ) ) + \".\" ) + ( name ) ) + \",index=\" ) + ( index ) ) + \",line=\" ) + ( tree . getToken ( ) . getLine ( ) ) ) + \"]\" ; }\n### UNIT_TEST\ntestRepeatsVisit2 ( ) { org . antlr . runtime . tree . TreeWizard wiz = new org . antlr . runtime . tree . TreeWizard ( org . antlr . test . TestTreeWizard . adaptor , org . antlr . test . TestTreeWizard . tokens ) ; org . antlr . runtime . tree . CommonTree t = ( ( org . antlr . runtime . tree . CommonTree ) ( wiz . create ( \"(A<sp>B<sp>(A<sp>C<sp>B)<sp>B<sp>D<sp>D)\" ) ) ) ; final java . util . List < java . lang . Object > elements = new java . util . ArrayList < java . lang . Object > ( ) ; wiz . visit ( t , wiz . getTokenType ( \"A\" ) , new org . antlr . runtime . tree . TreeWizard . Visitor ( ) { @ org . antlr . test . Override public void visit ( java . lang . Object t ) { elements . add ( t ) ; } } ) ; java . lang . String found = elements . toString ( ) ; java . lang . String expecting = \"[A,<sp>A]\" ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:testRepeatsVisit2\n### generate assertion\norg . junit . Assert . assertEquals ( expecting , found )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ntoString ( ) { return ( ( ( ( ( ( ( ( ( ( ( \"Exam<sp>[id=\" + ( id ) ) + \",<sp>examNumber=\" ) + ( examNumber ) ) + \",<sp>isAnswer=\" ) + ( isAnswer ) ) + \",<sp>answerArray=\" ) + ( java . util . Arrays . toString ( answerArray ) ) ) + \",<sp>isRight=\" ) + ( isRight ) ) + \",<sp>isSubject=\" ) + ( isSubject ) ) + \"]\" ; }\n### UNIT_TEST\ntoStringTest2 ( ) { java . lang . String str = \"{\\\"test\\\":\\\"关于开展2018年度“文明集体”、“文明职工”评选表彰活动的通知\\\"}\" ; cn . hutool . json . JSONObject json = new cn . hutool . json . JSONObject ( str ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:toString\n[UNIT_TEST]:toStringTest2\n### generate assertion", "label": "org . junit . Assert . assertEquals ( str , json . toString ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\nneedUpgrade ( ) { int appliedTasks = repository . countUpgradeTask ( org . talend . dataprep . upgrade . VERSION . name ( ) ) ; int availableTasks = ( ( int ) ( tasks . stream ( ) . filter ( ( task ) -> java . util . Objects . equals ( task . getTarget ( ) , org . talend . dataprep . upgrade . VERSION ) ) . count ( ) ) ) ; if ( appliedTasks > availableTasks ) { org . talend . dataprep . upgrade . UpgradeService . LOG . warn ( \"It<sp>seems<sp>that<sp>more<sp>upgrade<sp>tasks<sp>have<sp>been<sp>applied<sp>than<sp>the<sp>available<sp>ones.\" ) ; return true ; } else if ( appliedTasks == availableTasks ) { return false ; } else { return true ; } }\n### UNIT_TEST\nshouldNotAllowUpgrade ( ) { when ( repository . countUpgradeTask ( anyString ( ) ) ) . thenReturn ( 1 ) ; final org . talend . dataprep . upgrade . model . UpgradeTask upgradeTask = mock ( org . talend . dataprep . upgrade . model . UpgradeTask . class ) ; when ( upgradeTask . getTarget ( ) ) . thenReturn ( org . talend . dataprep . upgrade . VERSION ) ; service . setTasks ( java . util . Collections . singletonList ( upgradeTask ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:needUpgrade\n[UNIT_TEST]:shouldNotAllowUpgrade\n### generate assertion\norg . junit . Assert . assertFalse ( service . needUpgrade ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nisEmpty ( ) { return false ; }\n### UNIT_TEST\nupgradeV8TOV9 ( ) { java . util . List < com . streamsets . pipeline . api . Config > configs = new java . util . ArrayList ( 1 ) ; configs . add ( new com . streamsets . pipeline . api . Config ( \"oracleCDCConfigBean.queryTimeout\" , 10 ) ) ; configs = new com . streamsets . pipeline . stage . origin . jdbc . cdc . oracle . OracleCDCSourceUpgrader ( ) . upgrade ( \"a\" , \"b\" , \"v\" , 8 , 9 , configs ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:isEmpty\n[UNIT_TEST]:upgradeV8TOV9\n### generate assertion", "label": "org . junit . Assert . assertTrue ( configs . isEmpty ( ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetObject ( ) { return object ; }\n### UNIT_TEST\ncreateProducerWithDefaultMetadata ( ) { final org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > producerMetadata = new org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > ( \"test\" ) ; final org . springframework . integration . kafka . support . ProducerMetadata < byte [ ] , byte [ ] > tm = org . mockito . Mockito . spy ( producerMetadata ) ; final org . springframework . integration . kafka . support . ProducerFactoryBean < byte [ ] , byte [ ] > producerFactoryBean = new org . springframework . integration . kafka . support . ProducerFactoryBean < byte [ ] , byte [ ] > ( tm , \"localhost:9092\" ) ; final kafka . javaapi . producer . Producer < byte [ ] , byte [ ] > producer = producerFactoryBean . getObject ( ) ; \"<AssertPlaceHolder>\" ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getPartitioner ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getCompressionCodec ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getValueEncoder ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . getKeyEncoder ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 1 ) ) . isAsync ( ) ; org . mockito . Mockito . verify ( tm , org . mockito . Mockito . times ( 0 ) ) . getBatchNumMessages ( ) ; }\n[METHOD_UNDER_TEST]:getObject\n[UNIT_TEST]:createProducerWithDefaultMetadata\n### generate assertion\norg . junit . Assert . assertTrue ( ( producer != null ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nget ( ) { return this . t ; }\n### UNIT_TEST\nshouldSupportConfigurationOfRegistryBuilder ( ) { final org . apache . tinkerpop . gremlin . driver . ser . GraphBinaryMessageSerializerV1 serializer = new org . apache . tinkerpop . gremlin . driver . ser . GraphBinaryMessageSerializerV1 ( ) ; final java . util . Map < java . lang . String , java . lang . Object > config = new java . util . HashMap ( ) ; int counter = org . apache . tinkerpop . gremlin . driver . ser . binary . GraphBinaryMessageSerializerV1Test . SampleTypeSerializerRegistryBuilder . createCounter . get ( ) ; config . put ( GraphBinaryMessageSerializerV1 . TOKEN_BUILDER , \"org.apache.tinkerpop.gremlin.driver.ser.binary.GraphBinaryMessageSerializerV1Test$SampleTypeSerializerRegistryBuilder\" ) ; serializer . configure ( config , null ) ; counter = ( org . apache . tinkerpop . gremlin . driver . ser . binary . GraphBinaryMessageSerializerV1Test . SampleTypeSerializerRegistryBuilder . createCounter . get ( ) ) - counter ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:get\n[UNIT_TEST]:shouldSupportConfigurationOfRegistryBuilder\n### generate assertion", "label": "org . junit . Assert . assertEquals ( 1 , counter )"}
{"prompt": "### METHOD_UNDER_TEST\ngetFile ( java . lang . String ) { org . eclipse . linuxtools . internal . perf . model . PMFile tmp = ( ( org . eclipse . linuxtools . internal . perf . model . PMFile ) ( getChild ( fileName ) ) ) ; if ( tmp != null ) { } else { tmp = new org . eclipse . linuxtools . internal . perf . model . PMFile ( fileName ) ; addChild ( tmp ) ; } return tmp ; }\n### UNIT_TEST\ntestShortcutEditor ( ) { org . eclipse . linuxtools . internal . valgrind . helgrind . tests . ValgrindTestHelgrindLaunchShortcut shortcut = new org . eclipse . linuxtools . internal . valgrind . helgrind . tests . ValgrindTestHelgrindLaunchShortcut ( ) ; org . eclipse . ui . IWorkbenchPage page = org . eclipse . ui . PlatformUI . getWorkbench ( ) . getActiveWorkbenchWindow ( ) . getActivePage ( ) ; org . eclipse . core . resources . IFile file = proj . getProject ( ) . getFile ( \"test.c\" ) ; org . eclipse . ui . IEditorPart editor = org . eclipse . ui . ide . IDE . openEditor ( page , file ) ; \"<AssertPlaceHolder>\" ; shortcut . launch ( editor , ILaunchManager . PROFILE_MODE ) ; org . eclipse . debug . core . ILaunchConfiguration config = shortcut . getConfig ( ) ; compareWithDefaults ( config ) ; }\n[METHOD_UNDER_TEST]:getFile\n[UNIT_TEST]:testShortcutEditor\n### generate assertion\norg . junit . Assert . assertNotNull ( editor )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nvisibleFileTry ( java . lang . String [ ] ) { try { return _getProjects ( ) . isVisible ( files ) ; } catch ( java . lang . Exception e ) { _getProjects ( ) . setFocus ( ) ; try { java . lang . String [ ] parents = java . util . Arrays . copyOfRange ( files , 0 , ( ( files . length ) - 1 ) ) ; _getProjects ( ) . expand ( parents ) ; _getProjects ( ) . contextMenu ( com . liferay . ide . ui . liferay . action . REFRESH , parents ) ; ide . sleep ( 2000 ) ; } catch ( java . lang . Exception e1 ) { } for ( int i = ( files . length ) - 1 ; i > 0 ; i -- ) { java . lang . String [ ] parents = java . util . Arrays . copyOfRange ( files , 0 , ( ( files . length ) - i ) ) ; org . eclipse . swtbot . swt . finder . widgets . SWTBotTreeItem parent = _getProjects ( ) . getTreeItem ( parents ) ; _getProjects ( ) . expand ( parents ) ; java . lang . String subnode = files [ ( ( files . length ) - i ) ] ; _jobAction . waitForSubnode ( parent , subnode , com . liferay . ide . ui . liferay . action . REFRESH ) ; } return _getProjects ( ) . isVisible ( files ) ; } }\n### UNIT_TEST\ncreateActivator ( ) { wizardAction . openNewLiferayModuleWizard ( ) ; wizardAction . newModule . prepareGradle ( project . getName ( ) , com . liferay . ide . ui . module . tests . ACTIVATOR ) ; wizardAction . finish ( ) ; jobAction . waitForNoRunningJobs ( ) ; viewAction . project . refreshGradleProject ( com . liferay . ide . ui . module . tests . NewModuleProjectWizardLiferayWorkspaceGradleTests . liferayWorkspace . getName ( ) ) ; \"<AssertPlaceHolder>\" ; viewAction . project . closeAndDeleteFromDisk ( com . liferay . ide . ui . module . tests . NewModuleProjectWizardLiferayWorkspaceGradleTests . liferayWorkspace . getModuleFiles ( project . getName ( ) ) ) ; }\n[METHOD_UNDER_TEST]:visibleFileTry\n[UNIT_TEST]:createActivator\n### generate assertion", "label": "org . junit . Assert . assertTrue ( viewAction . project . visibleFileTry ( com . liferay . ide . ui . module . tests . NewModuleProjectWizardLiferayWorkspaceGradleTests . liferayWorkspace . getModuleFiles ( project . getName ( ) ) ) )"}
{"prompt": "### METHOD_UNDER_TEST\ngetIndexPath ( ) { return indexPath ; }\n### UNIT_TEST\ntestServerGetIndexPath ( ) { System . out . println ( \"testServerGetIndexPath\" ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:getIndexPath\n[UNIT_TEST]:testServerGetIndexPath\n### generate assertion\norg . junit . Assert . assertEquals ( config . getIndexPath ( ) , storage . getIndexPath ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\nrecordedDirectories ( ) { return existing ; }\n### UNIT_TEST\nrecordPathRecordsProperly ( ) { java . nio . file . Path path = java . nio . file . Paths . get ( \"foo\" , \"bar\" ) ; com . facebook . buck . util . unarchive . DirectoryCreator creator = new com . facebook . buck . util . unarchive . DirectoryCreator ( filesystem ) ; creator . recordPath ( path ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:recordedDirectories\n[UNIT_TEST]:recordPathRecordsProperly\n### generate assertion", "label": "org . junit . Assert . assertTrue ( creator . recordedDirectories ( ) . contains ( java . nio . file . Paths . get ( \"foo\" , \"bar\" ) ) )"}
{"prompt": "### METHOD_UNDER_TEST\nneedUpgrade ( ) { int appliedTasks = repository . countUpgradeTask ( org . talend . dataprep . upgrade . VERSION . name ( ) ) ; int availableTasks = ( ( int ) ( tasks . stream ( ) . filter ( ( task ) -> java . util . Objects . equals ( task . getTarget ( ) , org . talend . dataprep . upgrade . VERSION ) ) . count ( ) ) ) ; if ( appliedTasks > availableTasks ) { org . talend . dataprep . upgrade . UpgradeService . LOG . warn ( \"It<sp>seems<sp>that<sp>more<sp>upgrade<sp>tasks<sp>have<sp>been<sp>applied<sp>than<sp>the<sp>available<sp>ones.\" ) ; return true ; } else if ( appliedTasks == availableTasks ) { return false ; } else { return true ; } }\n### UNIT_TEST\nshouldNotAllowUpgrade ( ) { when ( repository . countUpgradeTask ( anyString ( ) ) ) . thenReturn ( 1 ) ; final org . talend . dataprep . upgrade . model . UpgradeTask upgradeTask = mock ( org . talend . dataprep . upgrade . model . UpgradeTask . class ) ; when ( upgradeTask . getTarget ( ) ) . thenReturn ( org . talend . dataprep . upgrade . VERSION ) ; service . setTasks ( java . util . Collections . singletonList ( upgradeTask ) ) ; \"<AssertPlaceHolder>\" ; }\n[METHOD_UNDER_TEST]:needUpgrade\n[UNIT_TEST]:shouldNotAllowUpgrade\n### generate assertion\norg . junit . Assert . assertFalse ( service . needUpgrade ( ) )\nend_of_demo\n\n\n### METHOD_UNDER_TEST\ndoMove ( java . lang . String , java . lang . String ) { try { fileService . doMoveFiles ( destPathId , params ) ; return buildOkResponse ( ) ; } catch ( java . io . FileNotFoundException e ) { org . pentaho . platform . web . http . api . resources . FileResource . logger . error ( org . pentaho . platform . web . http . messages . Messages . getInstance ( ) . getErrorString ( \"FileResource.DESTINATION_PATH_UNKNOWN\" , destPathId ) , e ) ; return buildStatusResponse ( Response . Status . NOT_FOUND ) ; } catch ( org . pentaho . platform . api . repository2 . unified . UnifiedRepositoryAccessDeniedException e ) { org . pentaho . platform . web . http . api . resources . FileResource . logger . error ( org . pentaho . platform . web . http . messages . Messages . getInstance ( ) . getErrorString ( \"FileResource.FILE_MOVE_ACCESS_DENIED\" , params ) , e ) ; return buildStatusResponse ( Response . Status . FORBIDDEN ) ; } catch ( java . lang . Throwable t ) { org . pentaho . platform . web . http . api . resources . FileResource . logger . error ( org . pentaho . platform . web . http . messages . Messages . getInstance ( ) . getString ( \"SystemResource.FILE_MOVE_FAILED\" ) , t ) ; return buildStatusResponse ( Response . Status . INTERNAL_SERVER_ERROR ) ; } }\n### UNIT_TEST\ntestDoMove ( ) { java . lang . String params = \"params\" ; doNothing ( ) . when ( fileResource . fileService ) . doMoveFiles ( org . pentaho . platform . web . http . api . resources . FileResourceTest . PATH_ID , params ) ; javax . ws . rs . core . Response mockResponse = mock ( javax . ws . rs . core . Response . class ) ; doReturn ( mockResponse ) . when ( fileResource ) . buildOkResponse ( ) ; javax . ws . rs . core . Response testResponse = fileResource . doMove ( org . pentaho . platform . web . http . api . resources . FileResourceTest . PATH_ID , params ) ; \"<AssertPlaceHolder>\" ; verify ( fileResource . fileService , times ( 1 ) ) . doMoveFiles ( org . pentaho . platform . web . http . api . resources . FileResourceTest . PATH_ID , params ) ; verify ( fileResource , times ( 1 ) ) . buildOkResponse ( ) ; }\n[METHOD_UNDER_TEST]:doMove\n[UNIT_TEST]:testDoMove\n### generate assertion", "label": "org . junit . Assert . assertEquals ( mockResponse , testResponse )"}
